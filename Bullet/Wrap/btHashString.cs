/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BulletCSharp {

using System;
using System.Runtime.InteropServices;

public class btHashString : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal btHashString(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(btHashString obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~btHashString() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LinearMathPINVOKE.delete_btHashString(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public string m_string {
    set {
      LinearMathPINVOKE.btHashString_m_string_set(swigCPtr, value);
    } 
    get {
      string ret = LinearMathPINVOKE.btHashString_m_string_get(swigCPtr);
      return ret;
    } 
  }

  public uint m_hash {
    set {
      LinearMathPINVOKE.btHashString_m_hash_set(swigCPtr, value);
    } 
    get {
      uint ret = LinearMathPINVOKE.btHashString_m_hash_get(swigCPtr);
      return ret;
    } 
  }

  public uint getHash() {
    uint ret = LinearMathPINVOKE.btHashString_getHash(swigCPtr);
    return ret;
  }

  public btHashString(string name) : this(LinearMathPINVOKE.new_btHashString(name), true) {
  }

  public int portableStringCompare(string src, string dst) {
    int ret = LinearMathPINVOKE.btHashString_portableStringCompare(swigCPtr, src, dst);
    return ret;
  }

  public bool equals(btHashString other) {
    bool ret = LinearMathPINVOKE.btHashString_equals(swigCPtr, btHashString.getCPtr(other));
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BulletCSharp {

using System;
using System.Runtime.InteropServices;

public class RayResultCallback : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal RayResultCallback(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(RayResultCallback obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~RayResultCallback() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletSoftBodyPINVOKE.delete_RayResultCallback(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public float m_closestHitFraction {
    set {
      BulletSoftBodyPINVOKE.RayResultCallback_m_closestHitFraction_set(swigCPtr, value);
    } 
    get {
      float ret = BulletSoftBodyPINVOKE.RayResultCallback_m_closestHitFraction_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_btCollisionObject m_collisionObject {
    set {
      BulletSoftBodyPINVOKE.RayResultCallback_m_collisionObject_set(swigCPtr, SWIGTYPE_p_btCollisionObject.getCPtr(value));
    } 
    get {
      IntPtr cPtr = BulletSoftBodyPINVOKE.RayResultCallback_m_collisionObject_get(swigCPtr);
      SWIGTYPE_p_btCollisionObject ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_btCollisionObject(cPtr, false);
      return ret;
    } 
  }

  public short m_collisionFilterGroup {
    set {
      BulletSoftBodyPINVOKE.RayResultCallback_m_collisionFilterGroup_set(swigCPtr, value);
    } 
    get {
      short ret = BulletSoftBodyPINVOKE.RayResultCallback_m_collisionFilterGroup_get(swigCPtr);
      return ret;
    } 
  }

  public short m_collisionFilterMask {
    set {
      BulletSoftBodyPINVOKE.RayResultCallback_m_collisionFilterMask_set(swigCPtr, value);
    } 
    get {
      short ret = BulletSoftBodyPINVOKE.RayResultCallback_m_collisionFilterMask_get(swigCPtr);
      return ret;
    } 
  }

  public uint m_flags {
    set {
      BulletSoftBodyPINVOKE.RayResultCallback_m_flags_set(swigCPtr, value);
    } 
    get {
      uint ret = BulletSoftBodyPINVOKE.RayResultCallback_m_flags_get(swigCPtr);
      return ret;
    } 
  }

  public bool hasHit() {
    bool ret = BulletSoftBodyPINVOKE.RayResultCallback_hasHit(swigCPtr);
    return ret;
  }

  public virtual bool needsCollision(SWIGTYPE_p_btBroadphaseProxy proxy0) {
    bool ret = BulletSoftBodyPINVOKE.RayResultCallback_needsCollision(swigCPtr, SWIGTYPE_p_btBroadphaseProxy.getCPtr(proxy0));
    return ret;
  }

  public virtual float addSingleResult(LocalRayResult rayResult, bool normalInWorldSpace) {
    float ret = BulletSoftBodyPINVOKE.RayResultCallback_addSingleResult(swigCPtr, LocalRayResult.getCPtr(rayResult), normalInWorldSpace);
    if (BulletSoftBodyPINVOKE.SWIGPendingException.Pending) throw BulletSoftBodyPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BulletCSharp {

using System;
using System.Runtime.InteropServices;

public class btRotationalLimitMotor : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal btRotationalLimitMotor(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(btRotationalLimitMotor obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~btRotationalLimitMotor() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletDynamicsPINVOKE.delete_btRotationalLimitMotor(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public float m_loLimit {
    set {
      BulletDynamicsPINVOKE.btRotationalLimitMotor_m_loLimit_set(swigCPtr, value);
    } 
    get {
      float ret = BulletDynamicsPINVOKE.btRotationalLimitMotor_m_loLimit_get(swigCPtr);
      return ret;
    } 
  }

  public float m_hiLimit {
    set {
      BulletDynamicsPINVOKE.btRotationalLimitMotor_m_hiLimit_set(swigCPtr, value);
    } 
    get {
      float ret = BulletDynamicsPINVOKE.btRotationalLimitMotor_m_hiLimit_get(swigCPtr);
      return ret;
    } 
  }

  public float m_targetVelocity {
    set {
      BulletDynamicsPINVOKE.btRotationalLimitMotor_m_targetVelocity_set(swigCPtr, value);
    } 
    get {
      float ret = BulletDynamicsPINVOKE.btRotationalLimitMotor_m_targetVelocity_get(swigCPtr);
      return ret;
    } 
  }

  public float m_maxMotorForce {
    set {
      BulletDynamicsPINVOKE.btRotationalLimitMotor_m_maxMotorForce_set(swigCPtr, value);
    } 
    get {
      float ret = BulletDynamicsPINVOKE.btRotationalLimitMotor_m_maxMotorForce_get(swigCPtr);
      return ret;
    } 
  }

  public float m_maxLimitForce {
    set {
      BulletDynamicsPINVOKE.btRotationalLimitMotor_m_maxLimitForce_set(swigCPtr, value);
    } 
    get {
      float ret = BulletDynamicsPINVOKE.btRotationalLimitMotor_m_maxLimitForce_get(swigCPtr);
      return ret;
    } 
  }

  public float m_damping {
    set {
      BulletDynamicsPINVOKE.btRotationalLimitMotor_m_damping_set(swigCPtr, value);
    } 
    get {
      float ret = BulletDynamicsPINVOKE.btRotationalLimitMotor_m_damping_get(swigCPtr);
      return ret;
    } 
  }

  public float m_limitSoftness {
    set {
      BulletDynamicsPINVOKE.btRotationalLimitMotor_m_limitSoftness_set(swigCPtr, value);
    } 
    get {
      float ret = BulletDynamicsPINVOKE.btRotationalLimitMotor_m_limitSoftness_get(swigCPtr);
      return ret;
    } 
  }

  public float m_normalCFM {
    set {
      BulletDynamicsPINVOKE.btRotationalLimitMotor_m_normalCFM_set(swigCPtr, value);
    } 
    get {
      float ret = BulletDynamicsPINVOKE.btRotationalLimitMotor_m_normalCFM_get(swigCPtr);
      return ret;
    } 
  }

  public float m_stopERP {
    set {
      BulletDynamicsPINVOKE.btRotationalLimitMotor_m_stopERP_set(swigCPtr, value);
    } 
    get {
      float ret = BulletDynamicsPINVOKE.btRotationalLimitMotor_m_stopERP_get(swigCPtr);
      return ret;
    } 
  }

  public float m_stopCFM {
    set {
      BulletDynamicsPINVOKE.btRotationalLimitMotor_m_stopCFM_set(swigCPtr, value);
    } 
    get {
      float ret = BulletDynamicsPINVOKE.btRotationalLimitMotor_m_stopCFM_get(swigCPtr);
      return ret;
    } 
  }

  public float m_bounce {
    set {
      BulletDynamicsPINVOKE.btRotationalLimitMotor_m_bounce_set(swigCPtr, value);
    } 
    get {
      float ret = BulletDynamicsPINVOKE.btRotationalLimitMotor_m_bounce_get(swigCPtr);
      return ret;
    } 
  }

  public bool m_enableMotor {
    set {
      BulletDynamicsPINVOKE.btRotationalLimitMotor_m_enableMotor_set(swigCPtr, value);
    } 
    get {
      bool ret = BulletDynamicsPINVOKE.btRotationalLimitMotor_m_enableMotor_get(swigCPtr);
      return ret;
    } 
  }

  public float m_currentLimitError {
    set {
      BulletDynamicsPINVOKE.btRotationalLimitMotor_m_currentLimitError_set(swigCPtr, value);
    } 
    get {
      float ret = BulletDynamicsPINVOKE.btRotationalLimitMotor_m_currentLimitError_get(swigCPtr);
      return ret;
    } 
  }

  public float m_currentPosition {
    set {
      BulletDynamicsPINVOKE.btRotationalLimitMotor_m_currentPosition_set(swigCPtr, value);
    } 
    get {
      float ret = BulletDynamicsPINVOKE.btRotationalLimitMotor_m_currentPosition_get(swigCPtr);
      return ret;
    } 
  }

  public int m_currentLimit {
    set {
      BulletDynamicsPINVOKE.btRotationalLimitMotor_m_currentLimit_set(swigCPtr, value);
    } 
    get {
      int ret = BulletDynamicsPINVOKE.btRotationalLimitMotor_m_currentLimit_get(swigCPtr);
      return ret;
    } 
  }

  public float m_accumulatedImpulse {
    set {
      BulletDynamicsPINVOKE.btRotationalLimitMotor_m_accumulatedImpulse_set(swigCPtr, value);
    } 
    get {
      float ret = BulletDynamicsPINVOKE.btRotationalLimitMotor_m_accumulatedImpulse_get(swigCPtr);
      return ret;
    } 
  }

  public btRotationalLimitMotor() : this(BulletDynamicsPINVOKE.new_btRotationalLimitMotor__SWIG_0(), true) {
  }

  public btRotationalLimitMotor(btRotationalLimitMotor limot) : this(BulletDynamicsPINVOKE.new_btRotationalLimitMotor__SWIG_1(btRotationalLimitMotor.getCPtr(limot)), true) {
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isLimited() {
    bool ret = BulletDynamicsPINVOKE.btRotationalLimitMotor_isLimited(swigCPtr);
    return ret;
  }

  public bool needApplyTorques() {
    bool ret = BulletDynamicsPINVOKE.btRotationalLimitMotor_needApplyTorques(swigCPtr);
    return ret;
  }

  public int testLimitValue(float test_value) {
    int ret = BulletDynamicsPINVOKE.btRotationalLimitMotor_testLimitValue(swigCPtr, test_value);
    return ret;
  }

  public float solveAngularLimits(float timeStep, SWIGTYPE_p_btVector3 axis, float jacDiagABInv, btRigidBody body0, btRigidBody body1) {
    float ret = BulletDynamicsPINVOKE.btRotationalLimitMotor_solveAngularLimits(swigCPtr, timeStep, SWIGTYPE_p_btVector3.getCPtr(axis), jacDiagABInv, btRigidBody.getCPtr(body0), btRigidBody.getCPtr(body1));
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}

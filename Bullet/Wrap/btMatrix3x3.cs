/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BulletCSharp {

using System;
using System.Runtime.InteropServices;

public class btMatrix3x3 : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal btMatrix3x3(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(btMatrix3x3 obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~btMatrix3x3() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LinearMathPINVOKE.delete_btMatrix3x3(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public btMatrix3x3() : this(LinearMathPINVOKE.new_btMatrix3x3__SWIG_0(), true) {
  }

  public btMatrix3x3(btQuaternion q) : this(LinearMathPINVOKE.new_btMatrix3x3__SWIG_1(btQuaternion.getCPtr(q)), true) {
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
  }

  public btMatrix3x3(float xx, float xy, float xz, float yx, float yy, float yz, float zx, float zy, float zz) : this(LinearMathPINVOKE.new_btMatrix3x3__SWIG_2(xx, xy, xz, yx, yy, yz, zx, zy, zz), true) {
  }

  public btMatrix3x3(btMatrix3x3 other) : this(LinearMathPINVOKE.new_btMatrix3x3__SWIG_3(btMatrix3x3.getCPtr(other)), true) {
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
  }

  public btVector3 getColumn(int i) {
    btVector3 ret = new btVector3(LinearMathPINVOKE.btMatrix3x3_getColumn(swigCPtr, i), true);
    return ret;
  }

  public btVector3 getRow(int i) {
    btVector3 ret = new btVector3(LinearMathPINVOKE.btMatrix3x3_getRow(swigCPtr, i), false);
    return ret;
  }

  public void setFromOpenGLSubMatrix(SWIGTYPE_p_float m) {
    LinearMathPINVOKE.btMatrix3x3_setFromOpenGLSubMatrix(swigCPtr, SWIGTYPE_p_float.getCPtr(m));
  }

  public void setValue(float xx, float xy, float xz, float yx, float yy, float yz, float zx, float zy, float zz) {
    LinearMathPINVOKE.btMatrix3x3_setValue(swigCPtr, xx, xy, xz, yx, yy, yz, zx, zy, zz);
  }

  public void setRotation(btQuaternion q) {
    LinearMathPINVOKE.btMatrix3x3_setRotation(swigCPtr, btQuaternion.getCPtr(q));
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setEulerYPR(float yaw, float pitch, float roll) {
    LinearMathPINVOKE.btMatrix3x3_setEulerYPR(swigCPtr, yaw, pitch, roll);
  }

  public void setEulerZYX(float eulerX, float eulerY, float eulerZ) {
    LinearMathPINVOKE.btMatrix3x3_setEulerZYX(swigCPtr, eulerX, eulerY, eulerZ);
  }

  public void setIdentity() {
    LinearMathPINVOKE.btMatrix3x3_setIdentity(swigCPtr);
  }

  public static btMatrix3x3 getIdentity() {
    btMatrix3x3 ret = new btMatrix3x3(LinearMathPINVOKE.btMatrix3x3_getIdentity(), false);
    return ret;
  }

  public void getOpenGLSubMatrix(SWIGTYPE_p_float m) {
    LinearMathPINVOKE.btMatrix3x3_getOpenGLSubMatrix(swigCPtr, SWIGTYPE_p_float.getCPtr(m));
  }

  public void getRotation(btQuaternion q) {
    LinearMathPINVOKE.btMatrix3x3_getRotation(swigCPtr, btQuaternion.getCPtr(q));
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
  }

  public void getEulerYPR(SWIGTYPE_p_float yaw, SWIGTYPE_p_float pitch, SWIGTYPE_p_float roll) {
    LinearMathPINVOKE.btMatrix3x3_getEulerYPR(swigCPtr, SWIGTYPE_p_float.getCPtr(yaw), SWIGTYPE_p_float.getCPtr(pitch), SWIGTYPE_p_float.getCPtr(roll));
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
  }

  public void getEulerZYX(SWIGTYPE_p_float yaw, SWIGTYPE_p_float pitch, SWIGTYPE_p_float roll, uint solution_number) {
    LinearMathPINVOKE.btMatrix3x3_getEulerZYX__SWIG_0(swigCPtr, SWIGTYPE_p_float.getCPtr(yaw), SWIGTYPE_p_float.getCPtr(pitch), SWIGTYPE_p_float.getCPtr(roll), solution_number);
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
  }

  public void getEulerZYX(SWIGTYPE_p_float yaw, SWIGTYPE_p_float pitch, SWIGTYPE_p_float roll) {
    LinearMathPINVOKE.btMatrix3x3_getEulerZYX__SWIG_1(swigCPtr, SWIGTYPE_p_float.getCPtr(yaw), SWIGTYPE_p_float.getCPtr(pitch), SWIGTYPE_p_float.getCPtr(roll));
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
  }

  public btMatrix3x3 scaled(btVector3 s) {
    btMatrix3x3 ret = new btMatrix3x3(LinearMathPINVOKE.btMatrix3x3_scaled(swigCPtr, btVector3.getCPtr(s)), true);
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float determinant() {
    float ret = LinearMathPINVOKE.btMatrix3x3_determinant(swigCPtr);
    return ret;
  }

  public btMatrix3x3 adjoint() {
    btMatrix3x3 ret = new btMatrix3x3(LinearMathPINVOKE.btMatrix3x3_adjoint(swigCPtr), true);
    return ret;
  }

  public btMatrix3x3 absolute() {
    btMatrix3x3 ret = new btMatrix3x3(LinearMathPINVOKE.btMatrix3x3_absolute(swigCPtr), true);
    return ret;
  }

  public btMatrix3x3 transpose() {
    btMatrix3x3 ret = new btMatrix3x3(LinearMathPINVOKE.btMatrix3x3_transpose(swigCPtr), true);
    return ret;
  }

  public btMatrix3x3 inverse() {
    btMatrix3x3 ret = new btMatrix3x3(LinearMathPINVOKE.btMatrix3x3_inverse(swigCPtr), true);
    return ret;
  }

  public btMatrix3x3 transposeTimes(btMatrix3x3 m) {
    btMatrix3x3 ret = new btMatrix3x3(LinearMathPINVOKE.btMatrix3x3_transposeTimes(swigCPtr, btMatrix3x3.getCPtr(m)), true);
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public btMatrix3x3 timesTranspose(btMatrix3x3 m) {
    btMatrix3x3 ret = new btMatrix3x3(LinearMathPINVOKE.btMatrix3x3_timesTranspose(swigCPtr, btMatrix3x3.getCPtr(m)), true);
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float tdotx(btVector3 v) {
    float ret = LinearMathPINVOKE.btMatrix3x3_tdotx(swigCPtr, btVector3.getCPtr(v));
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float tdoty(btVector3 v) {
    float ret = LinearMathPINVOKE.btMatrix3x3_tdoty(swigCPtr, btVector3.getCPtr(v));
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float tdotz(btVector3 v) {
    float ret = LinearMathPINVOKE.btMatrix3x3_tdotz(swigCPtr, btVector3.getCPtr(v));
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void diagonalize(btMatrix3x3 rot, float threshold, int maxSteps) {
    LinearMathPINVOKE.btMatrix3x3_diagonalize(swigCPtr, btMatrix3x3.getCPtr(rot), threshold, maxSteps);
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
  }

  public float cofac(int r1, int c1, int r2, int c2) {
    float ret = LinearMathPINVOKE.btMatrix3x3_cofac(swigCPtr, r1, c1, r2, c2);
    return ret;
  }

  public void serialize(btMatrix3x3FloatData dataOut) {
    LinearMathPINVOKE.btMatrix3x3_serialize(swigCPtr, btMatrix3x3FloatData.getCPtr(dataOut));
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
  }

  public void serializeFloat(btMatrix3x3FloatData dataOut) {
    LinearMathPINVOKE.btMatrix3x3_serializeFloat(swigCPtr, btMatrix3x3FloatData.getCPtr(dataOut));
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
  }

  public void deSerialize(btMatrix3x3FloatData dataIn) {
    LinearMathPINVOKE.btMatrix3x3_deSerialize(swigCPtr, btMatrix3x3FloatData.getCPtr(dataIn));
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
  }

  public void deSerializeFloat(btMatrix3x3FloatData dataIn) {
    LinearMathPINVOKE.btMatrix3x3_deSerializeFloat(swigCPtr, btMatrix3x3FloatData.getCPtr(dataIn));
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
  }

  public void deSerializeDouble(btMatrix3x3DoubleData dataIn) {
    LinearMathPINVOKE.btMatrix3x3_deSerializeDouble(swigCPtr, btMatrix3x3DoubleData.getCPtr(dataIn));
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
  }

}

}

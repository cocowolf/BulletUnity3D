/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BulletCSharp {

using System;
using System.Runtime.InteropServices;

public class btRigidBodyFloatData : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal btRigidBodyFloatData(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(btRigidBodyFloatData obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~btRigidBodyFloatData() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletDynamicsPINVOKE.delete_btRigidBodyFloatData(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public SWIGTYPE_p_btCollisionObjectFloatData m_collisionObjectData {
    set {
      BulletDynamicsPINVOKE.btRigidBodyFloatData_m_collisionObjectData_set(swigCPtr, SWIGTYPE_p_btCollisionObjectFloatData.getCPtr(value));
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_btCollisionObjectFloatData ret = new SWIGTYPE_p_btCollisionObjectFloatData(BulletDynamicsPINVOKE.btRigidBodyFloatData_m_collisionObjectData_get(swigCPtr), true);
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_btMatrix3x3FloatData m_invInertiaTensorWorld {
    set {
      BulletDynamicsPINVOKE.btRigidBodyFloatData_m_invInertiaTensorWorld_set(swigCPtr, SWIGTYPE_p_btMatrix3x3FloatData.getCPtr(value));
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_btMatrix3x3FloatData ret = new SWIGTYPE_p_btMatrix3x3FloatData(BulletDynamicsPINVOKE.btRigidBodyFloatData_m_invInertiaTensorWorld_get(swigCPtr), true);
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_btVector3FloatData m_linearVelocity {
    set {
      BulletDynamicsPINVOKE.btRigidBodyFloatData_m_linearVelocity_set(swigCPtr, SWIGTYPE_p_btVector3FloatData.getCPtr(value));
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_btVector3FloatData ret = new SWIGTYPE_p_btVector3FloatData(BulletDynamicsPINVOKE.btRigidBodyFloatData_m_linearVelocity_get(swigCPtr), true);
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_btVector3FloatData m_angularVelocity {
    set {
      BulletDynamicsPINVOKE.btRigidBodyFloatData_m_angularVelocity_set(swigCPtr, SWIGTYPE_p_btVector3FloatData.getCPtr(value));
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_btVector3FloatData ret = new SWIGTYPE_p_btVector3FloatData(BulletDynamicsPINVOKE.btRigidBodyFloatData_m_angularVelocity_get(swigCPtr), true);
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_btVector3FloatData m_angularFactor {
    set {
      BulletDynamicsPINVOKE.btRigidBodyFloatData_m_angularFactor_set(swigCPtr, SWIGTYPE_p_btVector3FloatData.getCPtr(value));
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_btVector3FloatData ret = new SWIGTYPE_p_btVector3FloatData(BulletDynamicsPINVOKE.btRigidBodyFloatData_m_angularFactor_get(swigCPtr), true);
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_btVector3FloatData m_linearFactor {
    set {
      BulletDynamicsPINVOKE.btRigidBodyFloatData_m_linearFactor_set(swigCPtr, SWIGTYPE_p_btVector3FloatData.getCPtr(value));
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_btVector3FloatData ret = new SWIGTYPE_p_btVector3FloatData(BulletDynamicsPINVOKE.btRigidBodyFloatData_m_linearFactor_get(swigCPtr), true);
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_btVector3FloatData m_gravity {
    set {
      BulletDynamicsPINVOKE.btRigidBodyFloatData_m_gravity_set(swigCPtr, SWIGTYPE_p_btVector3FloatData.getCPtr(value));
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_btVector3FloatData ret = new SWIGTYPE_p_btVector3FloatData(BulletDynamicsPINVOKE.btRigidBodyFloatData_m_gravity_get(swigCPtr), true);
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_btVector3FloatData m_gravity_acceleration {
    set {
      BulletDynamicsPINVOKE.btRigidBodyFloatData_m_gravity_acceleration_set(swigCPtr, SWIGTYPE_p_btVector3FloatData.getCPtr(value));
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_btVector3FloatData ret = new SWIGTYPE_p_btVector3FloatData(BulletDynamicsPINVOKE.btRigidBodyFloatData_m_gravity_acceleration_get(swigCPtr), true);
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_btVector3FloatData m_invInertiaLocal {
    set {
      BulletDynamicsPINVOKE.btRigidBodyFloatData_m_invInertiaLocal_set(swigCPtr, SWIGTYPE_p_btVector3FloatData.getCPtr(value));
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_btVector3FloatData ret = new SWIGTYPE_p_btVector3FloatData(BulletDynamicsPINVOKE.btRigidBodyFloatData_m_invInertiaLocal_get(swigCPtr), true);
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_btVector3FloatData m_totalForce {
    set {
      BulletDynamicsPINVOKE.btRigidBodyFloatData_m_totalForce_set(swigCPtr, SWIGTYPE_p_btVector3FloatData.getCPtr(value));
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_btVector3FloatData ret = new SWIGTYPE_p_btVector3FloatData(BulletDynamicsPINVOKE.btRigidBodyFloatData_m_totalForce_get(swigCPtr), true);
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_btVector3FloatData m_totalTorque {
    set {
      BulletDynamicsPINVOKE.btRigidBodyFloatData_m_totalTorque_set(swigCPtr, SWIGTYPE_p_btVector3FloatData.getCPtr(value));
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_btVector3FloatData ret = new SWIGTYPE_p_btVector3FloatData(BulletDynamicsPINVOKE.btRigidBodyFloatData_m_totalTorque_get(swigCPtr), true);
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float m_inverseMass {
    set {
      BulletDynamicsPINVOKE.btRigidBodyFloatData_m_inverseMass_set(swigCPtr, value);
    } 
    get {
      float ret = BulletDynamicsPINVOKE.btRigidBodyFloatData_m_inverseMass_get(swigCPtr);
      return ret;
    } 
  }

  public float m_linearDamping {
    set {
      BulletDynamicsPINVOKE.btRigidBodyFloatData_m_linearDamping_set(swigCPtr, value);
    } 
    get {
      float ret = BulletDynamicsPINVOKE.btRigidBodyFloatData_m_linearDamping_get(swigCPtr);
      return ret;
    } 
  }

  public float m_angularDamping {
    set {
      BulletDynamicsPINVOKE.btRigidBodyFloatData_m_angularDamping_set(swigCPtr, value);
    } 
    get {
      float ret = BulletDynamicsPINVOKE.btRigidBodyFloatData_m_angularDamping_get(swigCPtr);
      return ret;
    } 
  }

  public float m_additionalDampingFactor {
    set {
      BulletDynamicsPINVOKE.btRigidBodyFloatData_m_additionalDampingFactor_set(swigCPtr, value);
    } 
    get {
      float ret = BulletDynamicsPINVOKE.btRigidBodyFloatData_m_additionalDampingFactor_get(swigCPtr);
      return ret;
    } 
  }

  public float m_additionalLinearDampingThresholdSqr {
    set {
      BulletDynamicsPINVOKE.btRigidBodyFloatData_m_additionalLinearDampingThresholdSqr_set(swigCPtr, value);
    } 
    get {
      float ret = BulletDynamicsPINVOKE.btRigidBodyFloatData_m_additionalLinearDampingThresholdSqr_get(swigCPtr);
      return ret;
    } 
  }

  public float m_additionalAngularDampingThresholdSqr {
    set {
      BulletDynamicsPINVOKE.btRigidBodyFloatData_m_additionalAngularDampingThresholdSqr_set(swigCPtr, value);
    } 
    get {
      float ret = BulletDynamicsPINVOKE.btRigidBodyFloatData_m_additionalAngularDampingThresholdSqr_get(swigCPtr);
      return ret;
    } 
  }

  public float m_additionalAngularDampingFactor {
    set {
      BulletDynamicsPINVOKE.btRigidBodyFloatData_m_additionalAngularDampingFactor_set(swigCPtr, value);
    } 
    get {
      float ret = BulletDynamicsPINVOKE.btRigidBodyFloatData_m_additionalAngularDampingFactor_get(swigCPtr);
      return ret;
    } 
  }

  public float m_linearSleepingThreshold {
    set {
      BulletDynamicsPINVOKE.btRigidBodyFloatData_m_linearSleepingThreshold_set(swigCPtr, value);
    } 
    get {
      float ret = BulletDynamicsPINVOKE.btRigidBodyFloatData_m_linearSleepingThreshold_get(swigCPtr);
      return ret;
    } 
  }

  public float m_angularSleepingThreshold {
    set {
      BulletDynamicsPINVOKE.btRigidBodyFloatData_m_angularSleepingThreshold_set(swigCPtr, value);
    } 
    get {
      float ret = BulletDynamicsPINVOKE.btRigidBodyFloatData_m_angularSleepingThreshold_get(swigCPtr);
      return ret;
    } 
  }

  public int m_additionalDamping {
    set {
      BulletDynamicsPINVOKE.btRigidBodyFloatData_m_additionalDamping_set(swigCPtr, value);
    } 
    get {
      int ret = BulletDynamicsPINVOKE.btRigidBodyFloatData_m_additionalDamping_get(swigCPtr);
      return ret;
    } 
  }

  public btRigidBodyFloatData() : this(BulletDynamicsPINVOKE.new_btRigidBodyFloatData(), true) {
  }

}

}

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BulletCSharp {

using System;
using System.Runtime.InteropServices;

public class HullDesc : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal HullDesc(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(HullDesc obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~HullDesc() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LinearMathPINVOKE.delete_HullDesc(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public HullDesc() : this(LinearMathPINVOKE.new_HullDesc__SWIG_0(), true) {
  }

  public HullDesc(HullFlag flag, uint vcount, btVector3 vertices, uint stride) : this(LinearMathPINVOKE.new_HullDesc__SWIG_1((int)flag, vcount, btVector3.getCPtr(vertices), stride), true) {
  }

  public HullDesc(HullFlag flag, uint vcount, btVector3 vertices) : this(LinearMathPINVOKE.new_HullDesc__SWIG_2((int)flag, vcount, btVector3.getCPtr(vertices)), true) {
  }

  public bool HasHullFlag(HullFlag flag) {
    bool ret = LinearMathPINVOKE.HullDesc_HasHullFlag(swigCPtr, (int)flag);
    return ret;
  }

  public void SetHullFlag(HullFlag flag) {
    LinearMathPINVOKE.HullDesc_SetHullFlag(swigCPtr, (int)flag);
  }

  public void ClearHullFlag(HullFlag flag) {
    LinearMathPINVOKE.HullDesc_ClearHullFlag(swigCPtr, (int)flag);
  }

  public uint mFlags {
    set {
      LinearMathPINVOKE.HullDesc_mFlags_set(swigCPtr, value);
    } 
    get {
      uint ret = LinearMathPINVOKE.HullDesc_mFlags_get(swigCPtr);
      return ret;
    } 
  }

  public uint mVcount {
    set {
      LinearMathPINVOKE.HullDesc_mVcount_set(swigCPtr, value);
    } 
    get {
      uint ret = LinearMathPINVOKE.HullDesc_mVcount_get(swigCPtr);
      return ret;
    } 
  }

  public btVector3 mVertices {
    set {
      LinearMathPINVOKE.HullDesc_mVertices_set(swigCPtr, btVector3.getCPtr(value));
    } 
    get {
      IntPtr cPtr = LinearMathPINVOKE.HullDesc_mVertices_get(swigCPtr);
      btVector3 ret = (cPtr == IntPtr.Zero) ? null : new btVector3(cPtr, false);
      return ret;
    } 
  }

  public uint mVertexStride {
    set {
      LinearMathPINVOKE.HullDesc_mVertexStride_set(swigCPtr, value);
    } 
    get {
      uint ret = LinearMathPINVOKE.HullDesc_mVertexStride_get(swigCPtr);
      return ret;
    } 
  }

  public float mNormalEpsilon {
    set {
      LinearMathPINVOKE.HullDesc_mNormalEpsilon_set(swigCPtr, value);
    } 
    get {
      float ret = LinearMathPINVOKE.HullDesc_mNormalEpsilon_get(swigCPtr);
      return ret;
    } 
  }

  public uint mMaxVertices {
    set {
      LinearMathPINVOKE.HullDesc_mMaxVertices_set(swigCPtr, value);
    } 
    get {
      uint ret = LinearMathPINVOKE.HullDesc_mMaxVertices_get(swigCPtr);
      return ret;
    } 
  }

  public uint mMaxFaces {
    set {
      LinearMathPINVOKE.HullDesc_mMaxFaces_set(swigCPtr, value);
    } 
    get {
      uint ret = LinearMathPINVOKE.HullDesc_mMaxFaces_get(swigCPtr);
      return ret;
    } 
  }

}

}

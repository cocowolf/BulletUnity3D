/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BulletCSharp {

using System;
using System.Runtime.InteropServices;

public class CProfileManager : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CProfileManager(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(CProfileManager obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CProfileManager() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LinearMathPINVOKE.delete_CProfileManager(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public static void Start_Profile(string name) {
    LinearMathPINVOKE.CProfileManager_Start_Profile(name);
  }

  public static void Stop_Profile() {
    LinearMathPINVOKE.CProfileManager_Stop_Profile();
  }

  public static void CleanupMemory() {
    LinearMathPINVOKE.CProfileManager_CleanupMemory();
  }

  public static void Reset() {
    LinearMathPINVOKE.CProfileManager_Reset();
  }

  public static void Increment_Frame_Counter() {
    LinearMathPINVOKE.CProfileManager_Increment_Frame_Counter();
  }

  public static int Get_Frame_Count_Since_Reset() {
    int ret = LinearMathPINVOKE.CProfileManager_Get_Frame_Count_Since_Reset();
    return ret;
  }

  public static float Get_Time_Since_Reset() {
    float ret = LinearMathPINVOKE.CProfileManager_Get_Time_Since_Reset();
    return ret;
  }

  public static CProfileIterator Get_Iterator() {
    IntPtr cPtr = LinearMathPINVOKE.CProfileManager_Get_Iterator();
    CProfileIterator ret = (cPtr == IntPtr.Zero) ? null : new CProfileIterator(cPtr, false);
    return ret;
  }

  public static void Release_Iterator(CProfileIterator iterator) {
    LinearMathPINVOKE.CProfileManager_Release_Iterator(CProfileIterator.getCPtr(iterator));
  }

  public static void dumpRecursive(CProfileIterator profileIterator, int spacing) {
    LinearMathPINVOKE.CProfileManager_dumpRecursive(CProfileIterator.getCPtr(profileIterator), spacing);
  }

  public static void dumpAll() {
    LinearMathPINVOKE.CProfileManager_dumpAll();
  }

  public CProfileManager() : this(LinearMathPINVOKE.new_CProfileManager(), true) {
  }

}

}

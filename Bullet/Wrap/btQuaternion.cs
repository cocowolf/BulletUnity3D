/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BulletCSharp {

using System;
using System.Runtime.InteropServices;

public class btQuaternion : btQuadWord {
  private HandleRef swigCPtr;

  internal btQuaternion(IntPtr cPtr, bool cMemoryOwn) : base(LinearMathPINVOKE.btQuaternion_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(btQuaternion obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~btQuaternion() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LinearMathPINVOKE.delete_btQuaternion(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public btQuaternion() : this(LinearMathPINVOKE.new_btQuaternion__SWIG_0(), true) {
  }

  public btQuaternion(btQuaternion rhs) : this(LinearMathPINVOKE.new_btQuaternion__SWIG_1(btQuaternion.getCPtr(rhs)), true) {
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
  }

  public btQuaternion(float _x, float _y, float _z, float _w) : this(LinearMathPINVOKE.new_btQuaternion__SWIG_2(_x, _y, _z, _w), true) {
  }

  public btQuaternion(btVector3 _axis, float _angle) : this(LinearMathPINVOKE.new_btQuaternion__SWIG_3(btVector3.getCPtr(_axis), _angle), true) {
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
  }

  public btQuaternion(float yaw, float pitch, float roll) : this(LinearMathPINVOKE.new_btQuaternion__SWIG_4(yaw, pitch, roll), true) {
  }

  public void setRotation(btVector3 axis, float _angle) {
    LinearMathPINVOKE.btQuaternion_setRotation(swigCPtr, btVector3.getCPtr(axis), _angle);
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setEuler(float yaw, float pitch, float roll) {
    LinearMathPINVOKE.btQuaternion_setEuler(swigCPtr, yaw, pitch, roll);
  }

  public void setEulerZYX(float yaw, float pitch, float roll) {
    LinearMathPINVOKE.btQuaternion_setEulerZYX(swigCPtr, yaw, pitch, roll);
  }

  public float dot(btQuaternion q) {
    float ret = LinearMathPINVOKE.btQuaternion_dot(swigCPtr, btQuaternion.getCPtr(q));
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float length2() {
    float ret = LinearMathPINVOKE.btQuaternion_length2(swigCPtr);
    return ret;
  }

  public float length() {
    float ret = LinearMathPINVOKE.btQuaternion_length(swigCPtr);
    return ret;
  }

  public btQuaternion normalize() {
    btQuaternion ret = new btQuaternion(LinearMathPINVOKE.btQuaternion_normalize(swigCPtr), false);
    return ret;
  }

  public btQuaternion normalized() {
    btQuaternion ret = new btQuaternion(LinearMathPINVOKE.btQuaternion_normalized(swigCPtr), true);
    return ret;
  }

  public float angle(btQuaternion q) {
    float ret = LinearMathPINVOKE.btQuaternion_angle(swigCPtr, btQuaternion.getCPtr(q));
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getAngle() {
    float ret = LinearMathPINVOKE.btQuaternion_getAngle(swigCPtr);
    return ret;
  }

  public btVector3 getAxis() {
    btVector3 ret = new btVector3(LinearMathPINVOKE.btQuaternion_getAxis(swigCPtr), true);
    return ret;
  }

  public btQuaternion inverse() {
    btQuaternion ret = new btQuaternion(LinearMathPINVOKE.btQuaternion_inverse(swigCPtr), true);
    return ret;
  }

  public btQuaternion farthest(btQuaternion qd) {
    btQuaternion ret = new btQuaternion(LinearMathPINVOKE.btQuaternion_farthest(swigCPtr, btQuaternion.getCPtr(qd)), true);
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public btQuaternion nearest(btQuaternion qd) {
    btQuaternion ret = new btQuaternion(LinearMathPINVOKE.btQuaternion_nearest(swigCPtr, btQuaternion.getCPtr(qd)), true);
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public btQuaternion slerp(btQuaternion q, float t) {
    btQuaternion ret = new btQuaternion(LinearMathPINVOKE.btQuaternion_slerp(swigCPtr, btQuaternion.getCPtr(q), t), true);
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static btQuaternion getIdentity() {
    btQuaternion ret = new btQuaternion(LinearMathPINVOKE.btQuaternion_getIdentity(), false);
    return ret;
  }

  public float getW() {
    float ret = LinearMathPINVOKE.btQuaternion_getW(swigCPtr);
    return ret;
  }

}

}

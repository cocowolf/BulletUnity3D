/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BulletCSharp {

using System;
using System.Runtime.InteropServices;

public class btRigidBody : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;
  private SWIGTYPE_p_btRigidBody swigWrapPtr;
		
  public SWIGTYPE_p_btRigidBody GetSwigPtr()
  {
      return swigWrapPtr;
  }
		
  internal btRigidBody(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
	swigWrapPtr = new SWIGTYPE_p_btRigidBody(cPtr, true);
  }

  internal static HandleRef getCPtr(btRigidBody obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~btRigidBody() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletDynamicsPINVOKE.delete_btRigidBody(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
		swigWrapPtr = new SWIGTYPE_p_btRigidBody(IntPtr.Zero, true);
      }
      GC.SuppressFinalize(this);
    }
  }

  public btRigidBody(btRigidBodyConstructionInfo constructionInfo) : this(BulletDynamicsPINVOKE.new_btRigidBody__SWIG_0(btRigidBodyConstructionInfo.getCPtr(constructionInfo)), true) {
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public btRigidBody(float mass, SWIGTYPE_p_btMotionState motionState, SWIGTYPE_p_btCollisionShape collisionShape, SWIGTYPE_p_btVector3 localInertia) : this(BulletDynamicsPINVOKE.new_btRigidBody__SWIG_1(mass, SWIGTYPE_p_btMotionState.getCPtr(motionState), SWIGTYPE_p_btCollisionShape.getCPtr(collisionShape), SWIGTYPE_p_btVector3.getCPtr(localInertia)), true) {
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public btRigidBody(float mass, SWIGTYPE_p_btMotionState motionState, SWIGTYPE_p_btCollisionShape collisionShape) : this(BulletDynamicsPINVOKE.new_btRigidBody__SWIG_2(mass, SWIGTYPE_p_btMotionState.getCPtr(motionState), SWIGTYPE_p_btCollisionShape.getCPtr(collisionShape)), true) {
  }

  public void proceedToTransform(SWIGTYPE_p_btTransform newTrans) {
    BulletDynamicsPINVOKE.btRigidBody_proceedToTransform(swigCPtr, SWIGTYPE_p_btTransform.getCPtr(newTrans));
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static btRigidBody upcast(SWIGTYPE_p_btCollisionObject colObj) {
    IntPtr cPtr = BulletDynamicsPINVOKE.btRigidBody_upcast__SWIG_0(SWIGTYPE_p_btCollisionObject.getCPtr(colObj));
    btRigidBody ret = (cPtr == IntPtr.Zero) ? null : new btRigidBody(cPtr, false);
    return ret;
  }

  public void predictIntegratedTransform(float step, SWIGTYPE_p_btTransform predictedTransform) {
    BulletDynamicsPINVOKE.btRigidBody_predictIntegratedTransform(swigCPtr, step, SWIGTYPE_p_btTransform.getCPtr(predictedTransform));
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void saveKinematicState(float step) {
    BulletDynamicsPINVOKE.btRigidBody_saveKinematicState(swigCPtr, step);
  }

  public void applyGravity() {
    BulletDynamicsPINVOKE.btRigidBody_applyGravity(swigCPtr);
  }

  public void setGravity(SWIGTYPE_p_btVector3 acceleration) {
    BulletDynamicsPINVOKE.btRigidBody_setGravity(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(acceleration));
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_btVector3 getGravity() {
    SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(BulletDynamicsPINVOKE.btRigidBody_getGravity(swigCPtr), false);
    return ret;
  }

  public void setDamping(float lin_damping, float ang_damping) {
    BulletDynamicsPINVOKE.btRigidBody_setDamping(swigCPtr, lin_damping, ang_damping);
  }

  public float getLinearDamping() {
    float ret = BulletDynamicsPINVOKE.btRigidBody_getLinearDamping(swigCPtr);
    return ret;
  }

  public float getAngularDamping() {
    float ret = BulletDynamicsPINVOKE.btRigidBody_getAngularDamping(swigCPtr);
    return ret;
  }

  public float getLinearSleepingThreshold() {
    float ret = BulletDynamicsPINVOKE.btRigidBody_getLinearSleepingThreshold(swigCPtr);
    return ret;
  }

  public float getAngularSleepingThreshold() {
    float ret = BulletDynamicsPINVOKE.btRigidBody_getAngularSleepingThreshold(swigCPtr);
    return ret;
  }

  public void applyDamping(float timeStep) {
    BulletDynamicsPINVOKE.btRigidBody_applyDamping(swigCPtr, timeStep);
  }

  public SWIGTYPE_p_btCollisionShape getCollisionShape() {
    IntPtr cPtr = BulletDynamicsPINVOKE.btRigidBody_getCollisionShape__SWIG_0(swigCPtr);
    SWIGTYPE_p_btCollisionShape ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_btCollisionShape(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_btCollisionObject GetCollisionObject() {
    IntPtr cPtr = BulletDynamicsPINVOKE.btRigidBody_GetCollisionObject(swigCPtr);
    SWIGTYPE_p_btCollisionObject ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_btCollisionObject(cPtr, false);
    return ret;
  }

  public void setMassProps(float mass, SWIGTYPE_p_btVector3 inertia) {
    BulletDynamicsPINVOKE.btRigidBody_setMassProps(swigCPtr, mass, SWIGTYPE_p_btVector3.getCPtr(inertia));
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_btVector3 getLinearFactor() {
    SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(BulletDynamicsPINVOKE.btRigidBody_getLinearFactor(swigCPtr), false);
    return ret;
  }

  public void setLinearFactor(SWIGTYPE_p_btVector3 linearFactor) {
    BulletDynamicsPINVOKE.btRigidBody_setLinearFactor(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(linearFactor));
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public float getInvMass() {
    float ret = BulletDynamicsPINVOKE.btRigidBody_getInvMass(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_btMatrix3x3 getInvInertiaTensorWorld() {
    SWIGTYPE_p_btMatrix3x3 ret = new SWIGTYPE_p_btMatrix3x3(BulletDynamicsPINVOKE.btRigidBody_getInvInertiaTensorWorld(swigCPtr), false);
    return ret;
  }

  public void integrateVelocities(float step) {
    BulletDynamicsPINVOKE.btRigidBody_integrateVelocities(swigCPtr, step);
  }

  public void setCenterOfMassTransform(SWIGTYPE_p_btTransform xform) {
    BulletDynamicsPINVOKE.btRigidBody_setCenterOfMassTransform(swigCPtr, SWIGTYPE_p_btTransform.getCPtr(xform));
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void applyCentralForce(SWIGTYPE_p_btVector3 force) {
    BulletDynamicsPINVOKE.btRigidBody_applyCentralForce(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(force));
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_btVector3 getTotalForce() {
    SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(BulletDynamicsPINVOKE.btRigidBody_getTotalForce(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_btVector3 getTotalTorque() {
    SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(BulletDynamicsPINVOKE.btRigidBody_getTotalTorque(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_btVector3 getInvInertiaDiagLocal() {
    SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(BulletDynamicsPINVOKE.btRigidBody_getInvInertiaDiagLocal(swigCPtr), false);
    return ret;
  }

  public void setInvInertiaDiagLocal(SWIGTYPE_p_btVector3 diagInvInertia) {
    BulletDynamicsPINVOKE.btRigidBody_setInvInertiaDiagLocal(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(diagInvInertia));
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSleepingThresholds(float linear, float angular) {
    BulletDynamicsPINVOKE.btRigidBody_setSleepingThresholds(swigCPtr, linear, angular);
  }

  public void applyTorque(SWIGTYPE_p_btVector3 torque) {
    BulletDynamicsPINVOKE.btRigidBody_applyTorque(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(torque));
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void applyForce(SWIGTYPE_p_btVector3 force, SWIGTYPE_p_btVector3 rel_pos) {
    BulletDynamicsPINVOKE.btRigidBody_applyForce(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(force), SWIGTYPE_p_btVector3.getCPtr(rel_pos));
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void applyCentralImpulse(SWIGTYPE_p_btVector3 impulse) {
    BulletDynamicsPINVOKE.btRigidBody_applyCentralImpulse(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(impulse));
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void applyTorqueImpulse(SWIGTYPE_p_btVector3 torque) {
    BulletDynamicsPINVOKE.btRigidBody_applyTorqueImpulse(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(torque));
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void applyImpulse(SWIGTYPE_p_btVector3 impulse, SWIGTYPE_p_btVector3 rel_pos) {
    BulletDynamicsPINVOKE.btRigidBody_applyImpulse(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(impulse), SWIGTYPE_p_btVector3.getCPtr(rel_pos));
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clearForces() {
    BulletDynamicsPINVOKE.btRigidBody_clearForces(swigCPtr);
  }

  public void updateInertiaTensor() {
    BulletDynamicsPINVOKE.btRigidBody_updateInertiaTensor(swigCPtr);
  }

  public SWIGTYPE_p_btVector3 getCenterOfMassPosition() {
    SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(BulletDynamicsPINVOKE.btRigidBody_getCenterOfMassPosition(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_btQuaternion getOrientation() {
    SWIGTYPE_p_btQuaternion ret = new SWIGTYPE_p_btQuaternion(BulletDynamicsPINVOKE.btRigidBody_getOrientation(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_btTransform getCenterOfMassTransform() {
    SWIGTYPE_p_btTransform ret = new SWIGTYPE_p_btTransform(BulletDynamicsPINVOKE.btRigidBody_getCenterOfMassTransform(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_btVector3 getLinearVelocity() {
    SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(BulletDynamicsPINVOKE.btRigidBody_getLinearVelocity(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_btVector3 getAngularVelocity() {
    SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(BulletDynamicsPINVOKE.btRigidBody_getAngularVelocity(swigCPtr), false);
    return ret;
  }

  public void setLinearVelocity(SWIGTYPE_p_btVector3 lin_vel) {
    BulletDynamicsPINVOKE.btRigidBody_setLinearVelocity(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(lin_vel));
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAngularVelocity(SWIGTYPE_p_btVector3 ang_vel) {
    BulletDynamicsPINVOKE.btRigidBody_setAngularVelocity(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(ang_vel));
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_btVector3 getVelocityInLocalPoint(SWIGTYPE_p_btVector3 rel_pos) {
    SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(BulletDynamicsPINVOKE.btRigidBody_getVelocityInLocalPoint(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(rel_pos)), true);
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void translate(SWIGTYPE_p_btVector3 v) {
    BulletDynamicsPINVOKE.btRigidBody_translate(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(v));
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void getAabb(SWIGTYPE_p_btVector3 aabbMin, SWIGTYPE_p_btVector3 aabbMax) {
    BulletDynamicsPINVOKE.btRigidBody_getAabb(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(aabbMin), SWIGTYPE_p_btVector3.getCPtr(aabbMax));
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public float computeImpulseDenominator(SWIGTYPE_p_btVector3 pos, SWIGTYPE_p_btVector3 normal) {
    float ret = BulletDynamicsPINVOKE.btRigidBody_computeImpulseDenominator(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(pos), SWIGTYPE_p_btVector3.getCPtr(normal));
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float computeAngularImpulseDenominator(SWIGTYPE_p_btVector3 axis) {
    float ret = BulletDynamicsPINVOKE.btRigidBody_computeAngularImpulseDenominator(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(axis));
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void updateDeactivation(float timeStep) {
    BulletDynamicsPINVOKE.btRigidBody_updateDeactivation(swigCPtr, timeStep);
  }

  public bool wantsSleeping() {
    bool ret = BulletDynamicsPINVOKE.btRigidBody_wantsSleeping(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_btBroadphaseProxy getBroadphaseProxy() {
    IntPtr cPtr = BulletDynamicsPINVOKE.btRigidBody_getBroadphaseProxy__SWIG_0(swigCPtr);
    SWIGTYPE_p_btBroadphaseProxy ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_btBroadphaseProxy(cPtr, false);
    return ret;
  }

  public void setNewBroadphaseProxy(SWIGTYPE_p_btBroadphaseProxy broadphaseProxy) {
    BulletDynamicsPINVOKE.btRigidBody_setNewBroadphaseProxy(swigCPtr, SWIGTYPE_p_btBroadphaseProxy.getCPtr(broadphaseProxy));
  }

  public SWIGTYPE_p_btMotionState getMotionState() {
    IntPtr cPtr = BulletDynamicsPINVOKE.btRigidBody_getMotionState__SWIG_0(swigCPtr);
    SWIGTYPE_p_btMotionState ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_btMotionState(cPtr, false);
    return ret;
  }

  public void setMotionState(SWIGTYPE_p_btMotionState motionState) {
    BulletDynamicsPINVOKE.btRigidBody_setMotionState(swigCPtr, SWIGTYPE_p_btMotionState.getCPtr(motionState));
  }

  public int m_contactSolverType {
    set {
      BulletDynamicsPINVOKE.btRigidBody_m_contactSolverType_set(swigCPtr, value);
    } 
    get {
      int ret = BulletDynamicsPINVOKE.btRigidBody_m_contactSolverType_get(swigCPtr);
      return ret;
    } 
  }

  public int m_frictionSolverType {
    set {
      BulletDynamicsPINVOKE.btRigidBody_m_frictionSolverType_set(swigCPtr, value);
    } 
    get {
      int ret = BulletDynamicsPINVOKE.btRigidBody_m_frictionSolverType_get(swigCPtr);
      return ret;
    } 
  }

  public void setAngularFactor(SWIGTYPE_p_btVector3 angFac) {
    BulletDynamicsPINVOKE.btRigidBody_setAngularFactor__SWIG_0(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(angFac));
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAngularFactor(float angFac) {
    BulletDynamicsPINVOKE.btRigidBody_setAngularFactor__SWIG_1(swigCPtr, angFac);
  }

  public SWIGTYPE_p_btVector3 getAngularFactor() {
    SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(BulletDynamicsPINVOKE.btRigidBody_getAngularFactor(swigCPtr), false);
    return ret;
  }

  public bool isInWorld() {
    bool ret = BulletDynamicsPINVOKE.btRigidBody_isInWorld(swigCPtr);
    return ret;
  }

  public virtual bool checkCollideWithOverride(SWIGTYPE_p_btCollisionObject co) {
    bool ret = BulletDynamicsPINVOKE.btRigidBody_checkCollideWithOverride(swigCPtr, SWIGTYPE_p_btCollisionObject.getCPtr(co));
    return ret;
  }

  public void addConstraintRef(SWIGTYPE_p_btTypedConstraint c) {
    BulletDynamicsPINVOKE.btRigidBody_addConstraintRef(swigCPtr, SWIGTYPE_p_btTypedConstraint.getCPtr(c));
  }

  public void removeConstraintRef(SWIGTYPE_p_btTypedConstraint c) {
    BulletDynamicsPINVOKE.btRigidBody_removeConstraintRef(swigCPtr, SWIGTYPE_p_btTypedConstraint.getCPtr(c));
  }

  public SWIGTYPE_p_btTypedConstraint getConstraintRef(int index) {
    IntPtr cPtr = BulletDynamicsPINVOKE.btRigidBody_getConstraintRef(swigCPtr, index);
    SWIGTYPE_p_btTypedConstraint ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_btTypedConstraint(cPtr, false);
    return ret;
  }

  public int getNumConstraintRefs() {
    int ret = BulletDynamicsPINVOKE.btRigidBody_getNumConstraintRefs(swigCPtr);
    return ret;
  }

  public void setFlags(int flags) {
    BulletDynamicsPINVOKE.btRigidBody_setFlags(swigCPtr, flags);
  }

  public int getFlags() {
    int ret = BulletDynamicsPINVOKE.btRigidBody_getFlags(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_btVector3 computeGyroscopicForce(float maxGyroscopicForce) {
    SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(BulletDynamicsPINVOKE.btRigidBody_computeGyroscopicForce(swigCPtr, maxGyroscopicForce), true);
    return ret;
  }

  public virtual int calculateSerializeBufferSize() {
    int ret = BulletDynamicsPINVOKE.btRigidBody_calculateSerializeBufferSize(swigCPtr);
    return ret;
  }

  public virtual string serialize(SWIGTYPE_p_void dataBuffer, SWIGTYPE_p_btSerializer serializer) {
    string ret = BulletDynamicsPINVOKE.btRigidBody_serialize(swigCPtr, SWIGTYPE_p_void.getCPtr(dataBuffer), SWIGTYPE_p_btSerializer.getCPtr(serializer));
    return ret;
  }

  public virtual void serializeSingleObject(SWIGTYPE_p_btSerializer serializer) {
    BulletDynamicsPINVOKE.btRigidBody_serializeSingleObject(swigCPtr, SWIGTYPE_p_btSerializer.getCPtr(serializer));
  }

}

}

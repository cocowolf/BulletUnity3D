/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BulletCSharp {

using System;
using System.Runtime.InteropServices;

public class btSliderConstraint : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;
  private SWIGTYPE_p_btTypedConstraint swigWrapPtr;

  internal btSliderConstraint(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
    swigWrapPtr = new SWIGTYPE_p_btTypedConstraint(cPtr, true);
  }

  internal static HandleRef getCPtr(btSliderConstraint obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~btSliderConstraint() {
    Dispose();
  }

  public SWIGTYPE_p_btTypedConstraint GetSwigPtr()
  {
      return swigWrapPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletDynamicsPINVOKE.delete_btSliderConstraint(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
        swigWrapPtr = new SWIGTYPE_p_btTypedConstraint(IntPtr.Zero, true);
      }
      GC.SuppressFinalize(this);
    }
  }

  public btSliderConstraint(btRigidBody rbA, btRigidBody rbB, SWIGTYPE_p_btTransform frameInA, SWIGTYPE_p_btTransform frameInB, bool useLinearReferenceFrameA) : this(BulletDynamicsPINVOKE.new_btSliderConstraint__SWIG_0(btRigidBody.getCPtr(rbA), btRigidBody.getCPtr(rbB), SWIGTYPE_p_btTransform.getCPtr(frameInA), SWIGTYPE_p_btTransform.getCPtr(frameInB), useLinearReferenceFrameA), true) {
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public btSliderConstraint(btRigidBody rbB, SWIGTYPE_p_btTransform frameInB, bool useLinearReferenceFrameA) : this(BulletDynamicsPINVOKE.new_btSliderConstraint__SWIG_1(btRigidBody.getCPtr(rbB), SWIGTYPE_p_btTransform.getCPtr(frameInB), useLinearReferenceFrameA), true) {
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void getInfo1(btConstraintInfo1 info) {
    BulletDynamicsPINVOKE.btSliderConstraint_getInfo1(swigCPtr, btConstraintInfo1.getCPtr(info));
  }

  public void getInfo1NonVirtual(btConstraintInfo1 info) {
    BulletDynamicsPINVOKE.btSliderConstraint_getInfo1NonVirtual(swigCPtr, btConstraintInfo1.getCPtr(info));
  }

  public virtual void getInfo2(btConstraintInfo2 info) {
    BulletDynamicsPINVOKE.btSliderConstraint_getInfo2(swigCPtr, btConstraintInfo2.getCPtr(info));
  }

  public void getInfo2NonVirtual(btConstraintInfo2 info, SWIGTYPE_p_btTransform transA, SWIGTYPE_p_btTransform transB, SWIGTYPE_p_btVector3 linVelA, SWIGTYPE_p_btVector3 linVelB, float rbAinvMass, float rbBinvMass) {
    BulletDynamicsPINVOKE.btSliderConstraint_getInfo2NonVirtual(swigCPtr, btConstraintInfo2.getCPtr(info), SWIGTYPE_p_btTransform.getCPtr(transA), SWIGTYPE_p_btTransform.getCPtr(transB), SWIGTYPE_p_btVector3.getCPtr(linVelA), SWIGTYPE_p_btVector3.getCPtr(linVelB), rbAinvMass, rbBinvMass);
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public btRigidBody getRigidBodyA() {
    btRigidBody ret = new btRigidBody(BulletDynamicsPINVOKE.btSliderConstraint_getRigidBodyA(swigCPtr), false);
    return ret;
  }

  public btRigidBody getRigidBodyB() {
    btRigidBody ret = new btRigidBody(BulletDynamicsPINVOKE.btSliderConstraint_getRigidBodyB(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_btTransform getCalculatedTransformA() {
    SWIGTYPE_p_btTransform ret = new SWIGTYPE_p_btTransform(BulletDynamicsPINVOKE.btSliderConstraint_getCalculatedTransformA(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_btTransform getCalculatedTransformB() {
    SWIGTYPE_p_btTransform ret = new SWIGTYPE_p_btTransform(BulletDynamicsPINVOKE.btSliderConstraint_getCalculatedTransformB(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_btTransform getFrameOffsetA() {
    SWIGTYPE_p_btTransform ret = new SWIGTYPE_p_btTransform(BulletDynamicsPINVOKE.btSliderConstraint_getFrameOffsetA__SWIG_0(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_btTransform getFrameOffsetB() {
    SWIGTYPE_p_btTransform ret = new SWIGTYPE_p_btTransform(BulletDynamicsPINVOKE.btSliderConstraint_getFrameOffsetB__SWIG_0(swigCPtr), false);
    return ret;
  }

  public float getLowerLinLimit() {
    float ret = BulletDynamicsPINVOKE.btSliderConstraint_getLowerLinLimit(swigCPtr);
    return ret;
  }

  public void setLowerLinLimit(float lowerLimit) {
    BulletDynamicsPINVOKE.btSliderConstraint_setLowerLinLimit(swigCPtr, lowerLimit);
  }

  public float getUpperLinLimit() {
    float ret = BulletDynamicsPINVOKE.btSliderConstraint_getUpperLinLimit(swigCPtr);
    return ret;
  }

  public void setUpperLinLimit(float upperLimit) {
    BulletDynamicsPINVOKE.btSliderConstraint_setUpperLinLimit(swigCPtr, upperLimit);
  }

  public float getLowerAngLimit() {
    float ret = BulletDynamicsPINVOKE.btSliderConstraint_getLowerAngLimit(swigCPtr);
    return ret;
  }

  public void setLowerAngLimit(float lowerLimit) {
    BulletDynamicsPINVOKE.btSliderConstraint_setLowerAngLimit(swigCPtr, lowerLimit);
  }

  public float getUpperAngLimit() {
    float ret = BulletDynamicsPINVOKE.btSliderConstraint_getUpperAngLimit(swigCPtr);
    return ret;
  }

  public void setUpperAngLimit(float upperLimit) {
    BulletDynamicsPINVOKE.btSliderConstraint_setUpperAngLimit(swigCPtr, upperLimit);
  }

  public bool getUseLinearReferenceFrameA() {
    bool ret = BulletDynamicsPINVOKE.btSliderConstraint_getUseLinearReferenceFrameA(swigCPtr);
    return ret;
  }

  public float getSoftnessDirLin() {
    float ret = BulletDynamicsPINVOKE.btSliderConstraint_getSoftnessDirLin(swigCPtr);
    return ret;
  }

  public float getRestitutionDirLin() {
    float ret = BulletDynamicsPINVOKE.btSliderConstraint_getRestitutionDirLin(swigCPtr);
    return ret;
  }

  public float getDampingDirLin() {
    float ret = BulletDynamicsPINVOKE.btSliderConstraint_getDampingDirLin(swigCPtr);
    return ret;
  }

  public float getSoftnessDirAng() {
    float ret = BulletDynamicsPINVOKE.btSliderConstraint_getSoftnessDirAng(swigCPtr);
    return ret;
  }

  public float getRestitutionDirAng() {
    float ret = BulletDynamicsPINVOKE.btSliderConstraint_getRestitutionDirAng(swigCPtr);
    return ret;
  }

  public float getDampingDirAng() {
    float ret = BulletDynamicsPINVOKE.btSliderConstraint_getDampingDirAng(swigCPtr);
    return ret;
  }

  public float getSoftnessLimLin() {
    float ret = BulletDynamicsPINVOKE.btSliderConstraint_getSoftnessLimLin(swigCPtr);
    return ret;
  }

  public float getRestitutionLimLin() {
    float ret = BulletDynamicsPINVOKE.btSliderConstraint_getRestitutionLimLin(swigCPtr);
    return ret;
  }

  public float getDampingLimLin() {
    float ret = BulletDynamicsPINVOKE.btSliderConstraint_getDampingLimLin(swigCPtr);
    return ret;
  }

  public float getSoftnessLimAng() {
    float ret = BulletDynamicsPINVOKE.btSliderConstraint_getSoftnessLimAng(swigCPtr);
    return ret;
  }

  public float getRestitutionLimAng() {
    float ret = BulletDynamicsPINVOKE.btSliderConstraint_getRestitutionLimAng(swigCPtr);
    return ret;
  }

  public float getDampingLimAng() {
    float ret = BulletDynamicsPINVOKE.btSliderConstraint_getDampingLimAng(swigCPtr);
    return ret;
  }

  public float getSoftnessOrthoLin() {
    float ret = BulletDynamicsPINVOKE.btSliderConstraint_getSoftnessOrthoLin(swigCPtr);
    return ret;
  }

  public float getRestitutionOrthoLin() {
    float ret = BulletDynamicsPINVOKE.btSliderConstraint_getRestitutionOrthoLin(swigCPtr);
    return ret;
  }

  public float getDampingOrthoLin() {
    float ret = BulletDynamicsPINVOKE.btSliderConstraint_getDampingOrthoLin(swigCPtr);
    return ret;
  }

  public float getSoftnessOrthoAng() {
    float ret = BulletDynamicsPINVOKE.btSliderConstraint_getSoftnessOrthoAng(swigCPtr);
    return ret;
  }

  public float getRestitutionOrthoAng() {
    float ret = BulletDynamicsPINVOKE.btSliderConstraint_getRestitutionOrthoAng(swigCPtr);
    return ret;
  }

  public float getDampingOrthoAng() {
    float ret = BulletDynamicsPINVOKE.btSliderConstraint_getDampingOrthoAng(swigCPtr);
    return ret;
  }

  public void setSoftnessDirLin(float softnessDirLin) {
    BulletDynamicsPINVOKE.btSliderConstraint_setSoftnessDirLin(swigCPtr, softnessDirLin);
  }

  public void setRestitutionDirLin(float restitutionDirLin) {
    BulletDynamicsPINVOKE.btSliderConstraint_setRestitutionDirLin(swigCPtr, restitutionDirLin);
  }

  public void setDampingDirLin(float dampingDirLin) {
    BulletDynamicsPINVOKE.btSliderConstraint_setDampingDirLin(swigCPtr, dampingDirLin);
  }

  public void setSoftnessDirAng(float softnessDirAng) {
    BulletDynamicsPINVOKE.btSliderConstraint_setSoftnessDirAng(swigCPtr, softnessDirAng);
  }

  public void setRestitutionDirAng(float restitutionDirAng) {
    BulletDynamicsPINVOKE.btSliderConstraint_setRestitutionDirAng(swigCPtr, restitutionDirAng);
  }

  public void setDampingDirAng(float dampingDirAng) {
    BulletDynamicsPINVOKE.btSliderConstraint_setDampingDirAng(swigCPtr, dampingDirAng);
  }

  public void setSoftnessLimLin(float softnessLimLin) {
    BulletDynamicsPINVOKE.btSliderConstraint_setSoftnessLimLin(swigCPtr, softnessLimLin);
  }

  public void setRestitutionLimLin(float restitutionLimLin) {
    BulletDynamicsPINVOKE.btSliderConstraint_setRestitutionLimLin(swigCPtr, restitutionLimLin);
  }

  public void setDampingLimLin(float dampingLimLin) {
    BulletDynamicsPINVOKE.btSliderConstraint_setDampingLimLin(swigCPtr, dampingLimLin);
  }

  public void setSoftnessLimAng(float softnessLimAng) {
    BulletDynamicsPINVOKE.btSliderConstraint_setSoftnessLimAng(swigCPtr, softnessLimAng);
  }

  public void setRestitutionLimAng(float restitutionLimAng) {
    BulletDynamicsPINVOKE.btSliderConstraint_setRestitutionLimAng(swigCPtr, restitutionLimAng);
  }

  public void setDampingLimAng(float dampingLimAng) {
    BulletDynamicsPINVOKE.btSliderConstraint_setDampingLimAng(swigCPtr, dampingLimAng);
  }

  public void setSoftnessOrthoLin(float softnessOrthoLin) {
    BulletDynamicsPINVOKE.btSliderConstraint_setSoftnessOrthoLin(swigCPtr, softnessOrthoLin);
  }

  public void setRestitutionOrthoLin(float restitutionOrthoLin) {
    BulletDynamicsPINVOKE.btSliderConstraint_setRestitutionOrthoLin(swigCPtr, restitutionOrthoLin);
  }

  public void setDampingOrthoLin(float dampingOrthoLin) {
    BulletDynamicsPINVOKE.btSliderConstraint_setDampingOrthoLin(swigCPtr, dampingOrthoLin);
  }

  public void setSoftnessOrthoAng(float softnessOrthoAng) {
    BulletDynamicsPINVOKE.btSliderConstraint_setSoftnessOrthoAng(swigCPtr, softnessOrthoAng);
  }

  public void setRestitutionOrthoAng(float restitutionOrthoAng) {
    BulletDynamicsPINVOKE.btSliderConstraint_setRestitutionOrthoAng(swigCPtr, restitutionOrthoAng);
  }

  public void setDampingOrthoAng(float dampingOrthoAng) {
    BulletDynamicsPINVOKE.btSliderConstraint_setDampingOrthoAng(swigCPtr, dampingOrthoAng);
  }

  public void setPoweredLinMotor(bool onOff) {
    BulletDynamicsPINVOKE.btSliderConstraint_setPoweredLinMotor(swigCPtr, onOff);
  }

  public bool getPoweredLinMotor() {
    bool ret = BulletDynamicsPINVOKE.btSliderConstraint_getPoweredLinMotor(swigCPtr);
    return ret;
  }

  public void setTargetLinMotorVelocity(float targetLinMotorVelocity) {
    BulletDynamicsPINVOKE.btSliderConstraint_setTargetLinMotorVelocity(swigCPtr, targetLinMotorVelocity);
  }

  public float getTargetLinMotorVelocity() {
    float ret = BulletDynamicsPINVOKE.btSliderConstraint_getTargetLinMotorVelocity(swigCPtr);
    return ret;
  }

  public void setMaxLinMotorForce(float maxLinMotorForce) {
    BulletDynamicsPINVOKE.btSliderConstraint_setMaxLinMotorForce(swigCPtr, maxLinMotorForce);
  }

  public float getMaxLinMotorForce() {
    float ret = BulletDynamicsPINVOKE.btSliderConstraint_getMaxLinMotorForce(swigCPtr);
    return ret;
  }

  public void setPoweredAngMotor(bool onOff) {
    BulletDynamicsPINVOKE.btSliderConstraint_setPoweredAngMotor(swigCPtr, onOff);
  }

  public bool getPoweredAngMotor() {
    bool ret = BulletDynamicsPINVOKE.btSliderConstraint_getPoweredAngMotor(swigCPtr);
    return ret;
  }

  public void setTargetAngMotorVelocity(float targetAngMotorVelocity) {
    BulletDynamicsPINVOKE.btSliderConstraint_setTargetAngMotorVelocity(swigCPtr, targetAngMotorVelocity);
  }

  public float getTargetAngMotorVelocity() {
    float ret = BulletDynamicsPINVOKE.btSliderConstraint_getTargetAngMotorVelocity(swigCPtr);
    return ret;
  }

  public void setMaxAngMotorForce(float maxAngMotorForce) {
    BulletDynamicsPINVOKE.btSliderConstraint_setMaxAngMotorForce(swigCPtr, maxAngMotorForce);
  }

  public float getMaxAngMotorForce() {
    float ret = BulletDynamicsPINVOKE.btSliderConstraint_getMaxAngMotorForce(swigCPtr);
    return ret;
  }

  public float getLinearPos() {
    float ret = BulletDynamicsPINVOKE.btSliderConstraint_getLinearPos(swigCPtr);
    return ret;
  }

  public float getAngularPos() {
    float ret = BulletDynamicsPINVOKE.btSliderConstraint_getAngularPos(swigCPtr);
    return ret;
  }

  public bool getSolveLinLimit() {
    bool ret = BulletDynamicsPINVOKE.btSliderConstraint_getSolveLinLimit(swigCPtr);
    return ret;
  }

  public float getLinDepth() {
    float ret = BulletDynamicsPINVOKE.btSliderConstraint_getLinDepth(swigCPtr);
    return ret;
  }

  public bool getSolveAngLimit() {
    bool ret = BulletDynamicsPINVOKE.btSliderConstraint_getSolveAngLimit(swigCPtr);
    return ret;
  }

  public float getAngDepth() {
    float ret = BulletDynamicsPINVOKE.btSliderConstraint_getAngDepth(swigCPtr);
    return ret;
  }

  public void calculateTransforms(SWIGTYPE_p_btTransform transA, SWIGTYPE_p_btTransform transB) {
    BulletDynamicsPINVOKE.btSliderConstraint_calculateTransforms(swigCPtr, SWIGTYPE_p_btTransform.getCPtr(transA), SWIGTYPE_p_btTransform.getCPtr(transB));
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void testLinLimits() {
    BulletDynamicsPINVOKE.btSliderConstraint_testLinLimits(swigCPtr);
  }

  public void testAngLimits() {
    BulletDynamicsPINVOKE.btSliderConstraint_testAngLimits(swigCPtr);
  }

  public SWIGTYPE_p_btVector3 getAncorInA() {
    SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(BulletDynamicsPINVOKE.btSliderConstraint_getAncorInA(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_btVector3 getAncorInB() {
    SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(BulletDynamicsPINVOKE.btSliderConstraint_getAncorInB(swigCPtr), true);
    return ret;
  }

  public bool getUseFrameOffset() {
    bool ret = BulletDynamicsPINVOKE.btSliderConstraint_getUseFrameOffset(swigCPtr);
    return ret;
  }

  public void setUseFrameOffset(bool frameOffsetOnOff) {
    BulletDynamicsPINVOKE.btSliderConstraint_setUseFrameOffset(swigCPtr, frameOffsetOnOff);
  }

  public void setFrames(SWIGTYPE_p_btTransform frameA, SWIGTYPE_p_btTransform frameB) {
    BulletDynamicsPINVOKE.btSliderConstraint_setFrames(swigCPtr, SWIGTYPE_p_btTransform.getCPtr(frameA), SWIGTYPE_p_btTransform.getCPtr(frameB));
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setParam(int num, float value, int axis) {
    BulletDynamicsPINVOKE.btSliderConstraint_setParam__SWIG_0(swigCPtr, num, value, axis);
  }

  public virtual void setParam(int num, float value) {
    BulletDynamicsPINVOKE.btSliderConstraint_setParam__SWIG_1(swigCPtr, num, value);
  }

  public virtual float getParam(int num, int axis) {
    float ret = BulletDynamicsPINVOKE.btSliderConstraint_getParam__SWIG_0(swigCPtr, num, axis);
    return ret;
  }

  public virtual float getParam(int num) {
    float ret = BulletDynamicsPINVOKE.btSliderConstraint_getParam__SWIG_1(swigCPtr, num);
    return ret;
  }

  public virtual int calculateSerializeBufferSize() {
    int ret = BulletDynamicsPINVOKE.btSliderConstraint_calculateSerializeBufferSize(swigCPtr);
    return ret;
  }

  public virtual string serialize(SWIGTYPE_p_void dataBuffer, SWIGTYPE_p_btSerializer serializer) {
    string ret = BulletDynamicsPINVOKE.btSliderConstraint_serialize(swigCPtr, SWIGTYPE_p_void.getCPtr(dataBuffer), SWIGTYPE_p_btSerializer.getCPtr(serializer));
    return ret;
  }

}

}

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BulletCSharp {

using System;
using System.Runtime.InteropServices;

public class btRaycastVehicle : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal btRaycastVehicle(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(btRaycastVehicle obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~btRaycastVehicle() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletDynamicsPINVOKE.delete_btRaycastVehicle(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public btRaycastVehicle(SWIGTYPE_p_btRaycastVehicle__btVehicleTuning tuning, btRigidBody chassis, SWIGTYPE_p_btVehicleRaycaster raycaster) : this(BulletDynamicsPINVOKE.new_btRaycastVehicle(SWIGTYPE_p_btRaycastVehicle__btVehicleTuning.getCPtr(tuning), btRigidBody.getCPtr(chassis), SWIGTYPE_p_btVehicleRaycaster.getCPtr(raycaster)), true) {
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void updateAction(SWIGTYPE_p_btCollisionWorld collisionWorld, float step) {
    BulletDynamicsPINVOKE.btRaycastVehicle_updateAction(swigCPtr, SWIGTYPE_p_btCollisionWorld.getCPtr(collisionWorld), step);
  }

  public void debugDraw(SWIGTYPE_p_btIDebugDraw debugDrawer) {
    BulletDynamicsPINVOKE.btRaycastVehicle_debugDraw(swigCPtr, SWIGTYPE_p_btIDebugDraw.getCPtr(debugDrawer));
  }

  public SWIGTYPE_p_btTransform getChassisWorldTransform() {
    SWIGTYPE_p_btTransform ret = new SWIGTYPE_p_btTransform(BulletDynamicsPINVOKE.btRaycastVehicle_getChassisWorldTransform(swigCPtr), false);
    return ret;
  }

  public float rayCast(SWIGTYPE_p_btWheelInfo wheel) {
    float ret = BulletDynamicsPINVOKE.btRaycastVehicle_rayCast(swigCPtr, SWIGTYPE_p_btWheelInfo.getCPtr(wheel));
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void updateVehicle(float step) {
    BulletDynamicsPINVOKE.btRaycastVehicle_updateVehicle(swigCPtr, step);
  }

  public void resetSuspension() {
    BulletDynamicsPINVOKE.btRaycastVehicle_resetSuspension(swigCPtr);
  }

  public float getSteeringValue(int wheel) {
    float ret = BulletDynamicsPINVOKE.btRaycastVehicle_getSteeringValue(swigCPtr, wheel);
    return ret;
  }

  public void setSteeringValue(float steering, int wheel) {
    BulletDynamicsPINVOKE.btRaycastVehicle_setSteeringValue(swigCPtr, steering, wheel);
  }

  public void applyEngineForce(float force, int wheel) {
    BulletDynamicsPINVOKE.btRaycastVehicle_applyEngineForce(swigCPtr, force, wheel);
  }

  public SWIGTYPE_p_btTransform getWheelTransformWS(int wheelIndex) {
    SWIGTYPE_p_btTransform ret = new SWIGTYPE_p_btTransform(BulletDynamicsPINVOKE.btRaycastVehicle_getWheelTransformWS(swigCPtr, wheelIndex), false);
    return ret;
  }

  public void updateWheelTransform(int wheelIndex, bool interpolatedTransform) {
    BulletDynamicsPINVOKE.btRaycastVehicle_updateWheelTransform__SWIG_0(swigCPtr, wheelIndex, interpolatedTransform);
  }

  public void updateWheelTransform(int wheelIndex) {
    BulletDynamicsPINVOKE.btRaycastVehicle_updateWheelTransform__SWIG_1(swigCPtr, wheelIndex);
  }

  public SWIGTYPE_p_btWheelInfo addWheel(SWIGTYPE_p_btVector3 connectionPointCS0, SWIGTYPE_p_btVector3 wheelDirectionCS0, SWIGTYPE_p_btVector3 wheelAxleCS, float suspensionRestLength, float wheelRadius, SWIGTYPE_p_btRaycastVehicle__btVehicleTuning tuning, bool isFrontWheel) {
    SWIGTYPE_p_btWheelInfo ret = new SWIGTYPE_p_btWheelInfo(BulletDynamicsPINVOKE.btRaycastVehicle_addWheel(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(connectionPointCS0), SWIGTYPE_p_btVector3.getCPtr(wheelDirectionCS0), SWIGTYPE_p_btVector3.getCPtr(wheelAxleCS), suspensionRestLength, wheelRadius, SWIGTYPE_p_btRaycastVehicle__btVehicleTuning.getCPtr(tuning), isFrontWheel), false);
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getNumWheels() {
    int ret = BulletDynamicsPINVOKE.btRaycastVehicle_getNumWheels(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_btAlignedObjectArrayT_btWheelInfo_t m_wheelInfo {
    set {
      BulletDynamicsPINVOKE.btRaycastVehicle_m_wheelInfo_set(swigCPtr, SWIGTYPE_p_btAlignedObjectArrayT_btWheelInfo_t.getCPtr(value));
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_btAlignedObjectArrayT_btWheelInfo_t ret = new SWIGTYPE_p_btAlignedObjectArrayT_btWheelInfo_t(BulletDynamicsPINVOKE.btRaycastVehicle_m_wheelInfo_get(swigCPtr), true);
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_btWheelInfo getWheelInfo(int index) {
    SWIGTYPE_p_btWheelInfo ret = new SWIGTYPE_p_btWheelInfo(BulletDynamicsPINVOKE.btRaycastVehicle_getWheelInfo__SWIG_0(swigCPtr, index), false);
    return ret;
  }

  public void updateWheelTransformsWS(SWIGTYPE_p_btWheelInfo wheel, bool interpolatedTransform) {
    BulletDynamicsPINVOKE.btRaycastVehicle_updateWheelTransformsWS__SWIG_0(swigCPtr, SWIGTYPE_p_btWheelInfo.getCPtr(wheel), interpolatedTransform);
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void updateWheelTransformsWS(SWIGTYPE_p_btWheelInfo wheel) {
    BulletDynamicsPINVOKE.btRaycastVehicle_updateWheelTransformsWS__SWIG_1(swigCPtr, SWIGTYPE_p_btWheelInfo.getCPtr(wheel));
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setBrake(float brake, int wheelIndex) {
    BulletDynamicsPINVOKE.btRaycastVehicle_setBrake(swigCPtr, brake, wheelIndex);
  }

  public void setPitchControl(float pitch) {
    BulletDynamicsPINVOKE.btRaycastVehicle_setPitchControl(swigCPtr, pitch);
  }

  public void updateSuspension(float deltaTime) {
    BulletDynamicsPINVOKE.btRaycastVehicle_updateSuspension(swigCPtr, deltaTime);
  }

  public virtual void updateFriction(float timeStep) {
    BulletDynamicsPINVOKE.btRaycastVehicle_updateFriction(swigCPtr, timeStep);
  }

  public btRigidBody getRigidBody() {
    IntPtr cPtr = BulletDynamicsPINVOKE.btRaycastVehicle_getRigidBody__SWIG_0(swigCPtr);
    btRigidBody ret = (cPtr == IntPtr.Zero) ? null : new btRigidBody(cPtr, false);
    return ret;
  }

  public int getRightAxis() {
    int ret = BulletDynamicsPINVOKE.btRaycastVehicle_getRightAxis(swigCPtr);
    return ret;
  }

  public int getUpAxis() {
    int ret = BulletDynamicsPINVOKE.btRaycastVehicle_getUpAxis(swigCPtr);
    return ret;
  }

  public int getForwardAxis() {
    int ret = BulletDynamicsPINVOKE.btRaycastVehicle_getForwardAxis(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_btVector3 getForwardVector() {
    SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(BulletDynamicsPINVOKE.btRaycastVehicle_getForwardVector(swigCPtr), true);
    return ret;
  }

  public float getCurrentSpeedKmHour() {
    float ret = BulletDynamicsPINVOKE.btRaycastVehicle_getCurrentSpeedKmHour(swigCPtr);
    return ret;
  }

  public virtual void setCoordinateSystem(int rightIndex, int upIndex, int forwardIndex) {
    BulletDynamicsPINVOKE.btRaycastVehicle_setCoordinateSystem(swigCPtr, rightIndex, upIndex, forwardIndex);
  }

  public int getUserConstraintType() {
    int ret = BulletDynamicsPINVOKE.btRaycastVehicle_getUserConstraintType(swigCPtr);
    return ret;
  }

  public void setUserConstraintType(int userConstraintType) {
    BulletDynamicsPINVOKE.btRaycastVehicle_setUserConstraintType(swigCPtr, userConstraintType);
  }

  public void setUserConstraintId(int uid) {
    BulletDynamicsPINVOKE.btRaycastVehicle_setUserConstraintId(swigCPtr, uid);
  }

  public int getUserConstraintId() {
    int ret = BulletDynamicsPINVOKE.btRaycastVehicle_getUserConstraintId(swigCPtr);
    return ret;
  }

}

}

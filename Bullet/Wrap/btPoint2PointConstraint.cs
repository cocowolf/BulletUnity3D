/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BulletCSharp {

using System;
using System.Runtime.InteropServices;

public class btPoint2PointConstraint : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;
  private SWIGTYPE_p_btTypedConstraint swigWrapPtr;

  internal btPoint2PointConstraint(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
    swigWrapPtr = new SWIGTYPE_p_btTypedConstraint(cPtr, true);
  }

  internal static HandleRef getCPtr(btPoint2PointConstraint obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~btPoint2PointConstraint() {
    Dispose();
  }

  public SWIGTYPE_p_btTypedConstraint GetSwigPtr()
  {
      return swigWrapPtr;
  }



  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletDynamicsPINVOKE.delete_btPoint2PointConstraint(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
        swigWrapPtr = new SWIGTYPE_p_btTypedConstraint(IntPtr.Zero, true);
      }
      GC.SuppressFinalize(this);
    }
  }

  public bool m_useSolveConstraintObsolete {
    set {
      BulletDynamicsPINVOKE.btPoint2PointConstraint_m_useSolveConstraintObsolete_set(swigCPtr, value);
    } 
    get {
      bool ret = BulletDynamicsPINVOKE.btPoint2PointConstraint_m_useSolveConstraintObsolete_get(swigCPtr);
      return ret;
    } 
  }

  public btConstraintSetting m_setting {
    set {
      BulletDynamicsPINVOKE.btPoint2PointConstraint_m_setting_set(swigCPtr, btConstraintSetting.getCPtr(value));
    } 
    get {
      IntPtr cPtr = BulletDynamicsPINVOKE.btPoint2PointConstraint_m_setting_get(swigCPtr);
      btConstraintSetting ret = (cPtr == IntPtr.Zero) ? null : new btConstraintSetting(cPtr, false);
      return ret;
    } 
  }

  public btPoint2PointConstraint(btRigidBody rbA, btRigidBody rbB, SWIGTYPE_p_btVector3 pivotInA, SWIGTYPE_p_btVector3 pivotInB) : this(BulletDynamicsPINVOKE.new_btPoint2PointConstraint__SWIG_0(btRigidBody.getCPtr(rbA), btRigidBody.getCPtr(rbB), SWIGTYPE_p_btVector3.getCPtr(pivotInA), SWIGTYPE_p_btVector3.getCPtr(pivotInB)), true) {
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public btPoint2PointConstraint(btRigidBody rbA, SWIGTYPE_p_btVector3 pivotInA) : this(BulletDynamicsPINVOKE.new_btPoint2PointConstraint__SWIG_1(btRigidBody.getCPtr(rbA), SWIGTYPE_p_btVector3.getCPtr(pivotInA)), true) {
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void buildJacobian() {
    BulletDynamicsPINVOKE.btPoint2PointConstraint_buildJacobian(swigCPtr);
  }

  public virtual void getInfo1(btConstraintInfo1 info) {
    BulletDynamicsPINVOKE.btPoint2PointConstraint_getInfo1(swigCPtr, btConstraintInfo1.getCPtr(info));
  }

  public void getInfo1NonVirtual(btConstraintInfo1 info) {
    BulletDynamicsPINVOKE.btPoint2PointConstraint_getInfo1NonVirtual(swigCPtr, btConstraintInfo1.getCPtr(info));
  }

  public virtual void getInfo2(btConstraintInfo2 info) {
    BulletDynamicsPINVOKE.btPoint2PointConstraint_getInfo2(swigCPtr, btConstraintInfo2.getCPtr(info));
  }

  public void getInfo2NonVirtual(btConstraintInfo2 info, SWIGTYPE_p_btTransform body0_trans, SWIGTYPE_p_btTransform body1_trans) {
    BulletDynamicsPINVOKE.btPoint2PointConstraint_getInfo2NonVirtual(swigCPtr, btConstraintInfo2.getCPtr(info), SWIGTYPE_p_btTransform.getCPtr(body0_trans), SWIGTYPE_p_btTransform.getCPtr(body1_trans));
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void updateRHS(float timeStep) {
    BulletDynamicsPINVOKE.btPoint2PointConstraint_updateRHS(swigCPtr, timeStep);
  }

  public void setPivotA(SWIGTYPE_p_btVector3 pivotA) {
    BulletDynamicsPINVOKE.btPoint2PointConstraint_setPivotA(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(pivotA));
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setPivotB(SWIGTYPE_p_btVector3 pivotB) {
    BulletDynamicsPINVOKE.btPoint2PointConstraint_setPivotB(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(pivotB));
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_btVector3 getPivotInA() {
    SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(BulletDynamicsPINVOKE.btPoint2PointConstraint_getPivotInA(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_btVector3 getPivotInB() {
    SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(BulletDynamicsPINVOKE.btPoint2PointConstraint_getPivotInB(swigCPtr), false);
    return ret;
  }

  public virtual void setParam(int num, float value, int axis) {
    BulletDynamicsPINVOKE.btPoint2PointConstraint_setParam__SWIG_0(swigCPtr, num, value, axis);
  }

  public virtual void setParam(int num, float value) {
    BulletDynamicsPINVOKE.btPoint2PointConstraint_setParam__SWIG_1(swigCPtr, num, value);
  }

  public virtual float getParam(int num, int axis) {
    float ret = BulletDynamicsPINVOKE.btPoint2PointConstraint_getParam__SWIG_0(swigCPtr, num, axis);
    return ret;
  }

  public virtual float getParam(int num) {
    float ret = BulletDynamicsPINVOKE.btPoint2PointConstraint_getParam__SWIG_1(swigCPtr, num);
    return ret;
  }

  public virtual int calculateSerializeBufferSize() {
    int ret = BulletDynamicsPINVOKE.btPoint2PointConstraint_calculateSerializeBufferSize(swigCPtr);
    return ret;
  }

  public virtual string serialize(SWIGTYPE_p_void dataBuffer, SWIGTYPE_p_btSerializer serializer) {
    string ret = BulletDynamicsPINVOKE.btPoint2PointConstraint_serialize(swigCPtr, SWIGTYPE_p_void.getCPtr(dataBuffer), SWIGTYPE_p_btSerializer.getCPtr(serializer));
    return ret;
  }

}

}

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BulletCSharp {

using System;
using System.Runtime.InteropServices;

public class btSoftBodySolver : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal btSoftBodySolver(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(btSoftBodySolver obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~btSoftBodySolver() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletSoftBodyPINVOKE.delete_btSoftBodySolver(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public virtual btSoftBodySolver.SolverTypes getSolverType() {
    btSoftBodySolver.SolverTypes ret = (btSoftBodySolver.SolverTypes)BulletSoftBodyPINVOKE.btSoftBodySolver_getSolverType(swigCPtr);
    return ret;
  }

  public virtual bool checkInitialized() {
    bool ret = BulletSoftBodyPINVOKE.btSoftBodySolver_checkInitialized(swigCPtr);
    return ret;
  }

  public virtual void optimize(SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody_p_t softBodies, bool forceUpdate) {
    BulletSoftBodyPINVOKE.btSoftBodySolver_optimize__SWIG_0(swigCPtr, SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody_p_t.getCPtr(softBodies), forceUpdate);
    if (BulletSoftBodyPINVOKE.SWIGPendingException.Pending) throw BulletSoftBodyPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void optimize(SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody_p_t softBodies) {
    BulletSoftBodyPINVOKE.btSoftBodySolver_optimize__SWIG_1(swigCPtr, SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody_p_t.getCPtr(softBodies));
    if (BulletSoftBodyPINVOKE.SWIGPendingException.Pending) throw BulletSoftBodyPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void copyBackToSoftBodies(bool bMove) {
    BulletSoftBodyPINVOKE.btSoftBodySolver_copyBackToSoftBodies__SWIG_0(swigCPtr, bMove);
  }

  public virtual void copyBackToSoftBodies() {
    BulletSoftBodyPINVOKE.btSoftBodySolver_copyBackToSoftBodies__SWIG_1(swigCPtr);
  }

  public virtual void predictMotion(float solverdt) {
    BulletSoftBodyPINVOKE.btSoftBodySolver_predictMotion(swigCPtr, solverdt);
  }

  public virtual void solveConstraints(float solverdt) {
    BulletSoftBodyPINVOKE.btSoftBodySolver_solveConstraints(swigCPtr, solverdt);
  }

  public virtual void updateSoftBodies() {
    BulletSoftBodyPINVOKE.btSoftBodySolver_updateSoftBodies(swigCPtr);
  }

  public virtual void processCollision(btSoftBody arg0, SWIGTYPE_p_btCollisionObjectWrapper arg1) {
    BulletSoftBodyPINVOKE.btSoftBodySolver_processCollision__SWIG_0(swigCPtr, btSoftBody.getCPtr(arg0), SWIGTYPE_p_btCollisionObjectWrapper.getCPtr(arg1));
  }

  public virtual void processCollision(btSoftBody arg0, btSoftBody arg1) {
    BulletSoftBodyPINVOKE.btSoftBodySolver_processCollision__SWIG_1(swigCPtr, btSoftBody.getCPtr(arg0), btSoftBody.getCPtr(arg1));
  }

  public virtual void setNumberOfPositionIterations(int iterations) {
    BulletSoftBodyPINVOKE.btSoftBodySolver_setNumberOfPositionIterations(swigCPtr, iterations);
  }

  public virtual int getNumberOfPositionIterations() {
    int ret = BulletSoftBodyPINVOKE.btSoftBodySolver_getNumberOfPositionIterations(swigCPtr);
    return ret;
  }

  public virtual void setNumberOfVelocityIterations(int iterations) {
    BulletSoftBodyPINVOKE.btSoftBodySolver_setNumberOfVelocityIterations(swigCPtr, iterations);
  }

  public virtual int getNumberOfVelocityIterations() {
    int ret = BulletSoftBodyPINVOKE.btSoftBodySolver_getNumberOfVelocityIterations(swigCPtr);
    return ret;
  }

  public float getTimeScale() {
    float ret = BulletSoftBodyPINVOKE.btSoftBodySolver_getTimeScale(swigCPtr);
    return ret;
  }

  public enum SolverTypes {
    DEFAULT_SOLVER,
    CPU_SOLVER,
    CL_SOLVER,
    CL_SIMD_SOLVER,
    DX_SOLVER,
    DX_SIMD_SOLVER
  }

}

}

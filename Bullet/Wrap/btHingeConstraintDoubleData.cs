/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BulletCSharp {

using System;
using System.Runtime.InteropServices;

public class btHingeConstraintDoubleData : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal btHingeConstraintDoubleData(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(btHingeConstraintDoubleData obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~btHingeConstraintDoubleData() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletDynamicsPINVOKE.delete_btHingeConstraintDoubleData(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public SWIGTYPE_p_btTypedConstraintData m_typeConstraintData {
    set {
      BulletDynamicsPINVOKE.btHingeConstraintDoubleData_m_typeConstraintData_set(swigCPtr, SWIGTYPE_p_btTypedConstraintData.getCPtr(value));
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_btTypedConstraintData ret = new SWIGTYPE_p_btTypedConstraintData(BulletDynamicsPINVOKE.btHingeConstraintDoubleData_m_typeConstraintData_get(swigCPtr), true);
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_btTransformDoubleData m_rbAFrame {
    set {
      BulletDynamicsPINVOKE.btHingeConstraintDoubleData_m_rbAFrame_set(swigCPtr, SWIGTYPE_p_btTransformDoubleData.getCPtr(value));
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_btTransformDoubleData ret = new SWIGTYPE_p_btTransformDoubleData(BulletDynamicsPINVOKE.btHingeConstraintDoubleData_m_rbAFrame_get(swigCPtr), true);
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_btTransformDoubleData m_rbBFrame {
    set {
      BulletDynamicsPINVOKE.btHingeConstraintDoubleData_m_rbBFrame_set(swigCPtr, SWIGTYPE_p_btTransformDoubleData.getCPtr(value));
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_btTransformDoubleData ret = new SWIGTYPE_p_btTransformDoubleData(BulletDynamicsPINVOKE.btHingeConstraintDoubleData_m_rbBFrame_get(swigCPtr), true);
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int m_useReferenceFrameA {
    set {
      BulletDynamicsPINVOKE.btHingeConstraintDoubleData_m_useReferenceFrameA_set(swigCPtr, value);
    } 
    get {
      int ret = BulletDynamicsPINVOKE.btHingeConstraintDoubleData_m_useReferenceFrameA_get(swigCPtr);
      return ret;
    } 
  }

  public int m_angularOnly {
    set {
      BulletDynamicsPINVOKE.btHingeConstraintDoubleData_m_angularOnly_set(swigCPtr, value);
    } 
    get {
      int ret = BulletDynamicsPINVOKE.btHingeConstraintDoubleData_m_angularOnly_get(swigCPtr);
      return ret;
    } 
  }

  public int m_enableAngularMotor {
    set {
      BulletDynamicsPINVOKE.btHingeConstraintDoubleData_m_enableAngularMotor_set(swigCPtr, value);
    } 
    get {
      int ret = BulletDynamicsPINVOKE.btHingeConstraintDoubleData_m_enableAngularMotor_get(swigCPtr);
      return ret;
    } 
  }

  public float m_motorTargetVelocity {
    set {
      BulletDynamicsPINVOKE.btHingeConstraintDoubleData_m_motorTargetVelocity_set(swigCPtr, value);
    } 
    get {
      float ret = BulletDynamicsPINVOKE.btHingeConstraintDoubleData_m_motorTargetVelocity_get(swigCPtr);
      return ret;
    } 
  }

  public float m_maxMotorImpulse {
    set {
      BulletDynamicsPINVOKE.btHingeConstraintDoubleData_m_maxMotorImpulse_set(swigCPtr, value);
    } 
    get {
      float ret = BulletDynamicsPINVOKE.btHingeConstraintDoubleData_m_maxMotorImpulse_get(swigCPtr);
      return ret;
    } 
  }

  public float m_lowerLimit {
    set {
      BulletDynamicsPINVOKE.btHingeConstraintDoubleData_m_lowerLimit_set(swigCPtr, value);
    } 
    get {
      float ret = BulletDynamicsPINVOKE.btHingeConstraintDoubleData_m_lowerLimit_get(swigCPtr);
      return ret;
    } 
  }

  public float m_upperLimit {
    set {
      BulletDynamicsPINVOKE.btHingeConstraintDoubleData_m_upperLimit_set(swigCPtr, value);
    } 
    get {
      float ret = BulletDynamicsPINVOKE.btHingeConstraintDoubleData_m_upperLimit_get(swigCPtr);
      return ret;
    } 
  }

  public float m_limitSoftness {
    set {
      BulletDynamicsPINVOKE.btHingeConstraintDoubleData_m_limitSoftness_set(swigCPtr, value);
    } 
    get {
      float ret = BulletDynamicsPINVOKE.btHingeConstraintDoubleData_m_limitSoftness_get(swigCPtr);
      return ret;
    } 
  }

  public float m_biasFactor {
    set {
      BulletDynamicsPINVOKE.btHingeConstraintDoubleData_m_biasFactor_set(swigCPtr, value);
    } 
    get {
      float ret = BulletDynamicsPINVOKE.btHingeConstraintDoubleData_m_biasFactor_get(swigCPtr);
      return ret;
    } 
  }

  public float m_relaxationFactor {
    set {
      BulletDynamicsPINVOKE.btHingeConstraintDoubleData_m_relaxationFactor_set(swigCPtr, value);
    } 
    get {
      float ret = BulletDynamicsPINVOKE.btHingeConstraintDoubleData_m_relaxationFactor_get(swigCPtr);
      return ret;
    } 
  }

  public btHingeConstraintDoubleData() : this(BulletDynamicsPINVOKE.new_btHingeConstraintDoubleData(), true) {
  }

}

}

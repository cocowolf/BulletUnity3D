/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BulletCSharp {

using System;
using System.Runtime.InteropServices;

public class btSimpleBroadphaseProxy : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal btSimpleBroadphaseProxy(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(btSimpleBroadphaseProxy obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~btSimpleBroadphaseProxy() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletCollisionPINVOKE.delete_btSimpleBroadphaseProxy(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public int m_nextFree {
    set {
      BulletCollisionPINVOKE.btSimpleBroadphaseProxy_m_nextFree_set(swigCPtr, value);
    } 
    get {
      int ret = BulletCollisionPINVOKE.btSimpleBroadphaseProxy_m_nextFree_get(swigCPtr);
      return ret;
    } 
  }

  public btSimpleBroadphaseProxy() : this(BulletCollisionPINVOKE.new_btSimpleBroadphaseProxy__SWIG_0(), true) {
  }

  public btSimpleBroadphaseProxy(SWIGTYPE_p_btVector3 minpt, SWIGTYPE_p_btVector3 maxpt, int shapeType, SWIGTYPE_p_void userPtr, short collisionFilterGroup, short collisionFilterMask, SWIGTYPE_p_void multiSapProxy) : this(BulletCollisionPINVOKE.new_btSimpleBroadphaseProxy__SWIG_1(SWIGTYPE_p_btVector3.getCPtr(minpt), SWIGTYPE_p_btVector3.getCPtr(maxpt), shapeType, SWIGTYPE_p_void.getCPtr(userPtr), collisionFilterGroup, collisionFilterMask, SWIGTYPE_p_void.getCPtr(multiSapProxy)), true) {
    if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetNextFree(int next) {
    BulletCollisionPINVOKE.btSimpleBroadphaseProxy_SetNextFree(swigCPtr, next);
  }

  public int GetNextFree() {
    int ret = BulletCollisionPINVOKE.btSimpleBroadphaseProxy_GetNextFree(swigCPtr);
    return ret;
  }

}

}

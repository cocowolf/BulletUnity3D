/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BulletCSharp {

using System;
using System.Runtime.InteropServices;

public class btDbvtBroadphase : IDisposable {
  private HandleRef swigCPtr;
  private SWIGTYPE_p_btBroadphaseInterface swigWrapPtr;
  protected bool swigCMemOwn;

  public SWIGTYPE_p_btBroadphaseInterface GetSwigPtr()
  {
      return swigWrapPtr;
  }

  internal btDbvtBroadphase(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
    swigWrapPtr = new SWIGTYPE_p_btBroadphaseInterface(cPtr, true);
  }

  internal static HandleRef getCPtr(btDbvtBroadphase obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~btDbvtBroadphase() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletCollisionPINVOKE.delete_btDbvtBroadphase(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
        swigWrapPtr = new SWIGTYPE_p_btBroadphaseInterface(IntPtr.Zero, true);
      }
      GC.SuppressFinalize(this);
    }
  }

  public SWIGTYPE_p_btDbvt m_sets {
    set {
      BulletCollisionPINVOKE.btDbvtBroadphase_m_sets_set(swigCPtr, SWIGTYPE_p_btDbvt.getCPtr(value));
    } 
    get {
      IntPtr cPtr = BulletCollisionPINVOKE.btDbvtBroadphase_m_sets_get(swigCPtr);
      SWIGTYPE_p_btDbvt ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_btDbvt(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_p_btDbvtProxy m_stageRoots {
    set {
      BulletCollisionPINVOKE.btDbvtBroadphase_m_stageRoots_set(swigCPtr, SWIGTYPE_p_p_btDbvtProxy.getCPtr(value));
    } 
    get {
      IntPtr cPtr = BulletCollisionPINVOKE.btDbvtBroadphase_m_stageRoots_get(swigCPtr);
      SWIGTYPE_p_p_btDbvtProxy ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_p_btDbvtProxy(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_btOverlappingPairCache m_paircache {
    set {
      BulletCollisionPINVOKE.btDbvtBroadphase_m_paircache_set(swigCPtr, SWIGTYPE_p_btOverlappingPairCache.getCPtr(value));
    } 
    get {
      IntPtr cPtr = BulletCollisionPINVOKE.btDbvtBroadphase_m_paircache_get(swigCPtr);
      SWIGTYPE_p_btOverlappingPairCache ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_btOverlappingPairCache(cPtr, false);
      return ret;
    } 
  }

  public float m_prediction {
    set {
      BulletCollisionPINVOKE.btDbvtBroadphase_m_prediction_set(swigCPtr, value);
    } 
    get {
      float ret = BulletCollisionPINVOKE.btDbvtBroadphase_m_prediction_get(swigCPtr);
      return ret;
    } 
  }

  public int m_stageCurrent {
    set {
      BulletCollisionPINVOKE.btDbvtBroadphase_m_stageCurrent_set(swigCPtr, value);
    } 
    get {
      int ret = BulletCollisionPINVOKE.btDbvtBroadphase_m_stageCurrent_get(swigCPtr);
      return ret;
    } 
  }

  public int m_fupdates {
    set {
      BulletCollisionPINVOKE.btDbvtBroadphase_m_fupdates_set(swigCPtr, value);
    } 
    get {
      int ret = BulletCollisionPINVOKE.btDbvtBroadphase_m_fupdates_get(swigCPtr);
      return ret;
    } 
  }

  public int m_dupdates {
    set {
      BulletCollisionPINVOKE.btDbvtBroadphase_m_dupdates_set(swigCPtr, value);
    } 
    get {
      int ret = BulletCollisionPINVOKE.btDbvtBroadphase_m_dupdates_get(swigCPtr);
      return ret;
    } 
  }

  public int m_cupdates {
    set {
      BulletCollisionPINVOKE.btDbvtBroadphase_m_cupdates_set(swigCPtr, value);
    } 
    get {
      int ret = BulletCollisionPINVOKE.btDbvtBroadphase_m_cupdates_get(swigCPtr);
      return ret;
    } 
  }

  public int m_newpairs {
    set {
      BulletCollisionPINVOKE.btDbvtBroadphase_m_newpairs_set(swigCPtr, value);
    } 
    get {
      int ret = BulletCollisionPINVOKE.btDbvtBroadphase_m_newpairs_get(swigCPtr);
      return ret;
    } 
  }

  public int m_fixedleft {
    set {
      BulletCollisionPINVOKE.btDbvtBroadphase_m_fixedleft_set(swigCPtr, value);
    } 
    get {
      int ret = BulletCollisionPINVOKE.btDbvtBroadphase_m_fixedleft_get(swigCPtr);
      return ret;
    } 
  }

  public uint m_updates_call {
    set {
      BulletCollisionPINVOKE.btDbvtBroadphase_m_updates_call_set(swigCPtr, value);
    } 
    get {
      uint ret = BulletCollisionPINVOKE.btDbvtBroadphase_m_updates_call_get(swigCPtr);
      return ret;
    } 
  }

  public uint m_updates_done {
    set {
      BulletCollisionPINVOKE.btDbvtBroadphase_m_updates_done_set(swigCPtr, value);
    } 
    get {
      uint ret = BulletCollisionPINVOKE.btDbvtBroadphase_m_updates_done_get(swigCPtr);
      return ret;
    } 
  }

  public float m_updates_ratio {
    set {
      BulletCollisionPINVOKE.btDbvtBroadphase_m_updates_ratio_set(swigCPtr, value);
    } 
    get {
      float ret = BulletCollisionPINVOKE.btDbvtBroadphase_m_updates_ratio_get(swigCPtr);
      return ret;
    } 
  }

  public int m_pid {
    set {
      BulletCollisionPINVOKE.btDbvtBroadphase_m_pid_set(swigCPtr, value);
    } 
    get {
      int ret = BulletCollisionPINVOKE.btDbvtBroadphase_m_pid_get(swigCPtr);
      return ret;
    } 
  }

  public int m_cid {
    set {
      BulletCollisionPINVOKE.btDbvtBroadphase_m_cid_set(swigCPtr, value);
    } 
    get {
      int ret = BulletCollisionPINVOKE.btDbvtBroadphase_m_cid_get(swigCPtr);
      return ret;
    } 
  }

  public int m_gid {
    set {
      BulletCollisionPINVOKE.btDbvtBroadphase_m_gid_set(swigCPtr, value);
    } 
    get {
      int ret = BulletCollisionPINVOKE.btDbvtBroadphase_m_gid_get(swigCPtr);
      return ret;
    } 
  }

  public bool m_releasepaircache {
    set {
      BulletCollisionPINVOKE.btDbvtBroadphase_m_releasepaircache_set(swigCPtr, value);
    } 
    get {
      bool ret = BulletCollisionPINVOKE.btDbvtBroadphase_m_releasepaircache_get(swigCPtr);
      return ret;
    } 
  }

  public bool m_deferedcollide {
    set {
      BulletCollisionPINVOKE.btDbvtBroadphase_m_deferedcollide_set(swigCPtr, value);
    } 
    get {
      bool ret = BulletCollisionPINVOKE.btDbvtBroadphase_m_deferedcollide_get(swigCPtr);
      return ret;
    } 
  }

  public bool m_needcleanup {
    set {
      BulletCollisionPINVOKE.btDbvtBroadphase_m_needcleanup_set(swigCPtr, value);
    } 
    get {
      bool ret = BulletCollisionPINVOKE.btDbvtBroadphase_m_needcleanup_get(swigCPtr);
      return ret;
    } 
  }

  public btDbvtBroadphase(SWIGTYPE_p_btOverlappingPairCache paircache) : this(BulletCollisionPINVOKE.new_btDbvtBroadphase__SWIG_0(SWIGTYPE_p_btOverlappingPairCache.getCPtr(paircache)), true) {
  }

  public btDbvtBroadphase() : this(BulletCollisionPINVOKE.new_btDbvtBroadphase__SWIG_1(), true) {
  }

  public void collide(SWIGTYPE_p_btDispatcher dispatcher) {
    BulletCollisionPINVOKE.btDbvtBroadphase_collide(swigCPtr, SWIGTYPE_p_btDispatcher.getCPtr(dispatcher));
  }

  public void optimize() {
    BulletCollisionPINVOKE.btDbvtBroadphase_optimize(swigCPtr);
  }

  public SWIGTYPE_p_btBroadphaseProxy createProxy(SWIGTYPE_p_btVector3 aabbMin, SWIGTYPE_p_btVector3 aabbMax, int shapeType, SWIGTYPE_p_void userPtr, short collisionFilterGroup, short collisionFilterMask, SWIGTYPE_p_btDispatcher dispatcher, SWIGTYPE_p_void multiSapProxy) {
    IntPtr cPtr = BulletCollisionPINVOKE.btDbvtBroadphase_createProxy(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(aabbMin), SWIGTYPE_p_btVector3.getCPtr(aabbMax), shapeType, SWIGTYPE_p_void.getCPtr(userPtr), collisionFilterGroup, collisionFilterMask, SWIGTYPE_p_btDispatcher.getCPtr(dispatcher), SWIGTYPE_p_void.getCPtr(multiSapProxy));
    SWIGTYPE_p_btBroadphaseProxy ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_btBroadphaseProxy(cPtr, false);
    if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void destroyProxy(SWIGTYPE_p_btBroadphaseProxy proxy, SWIGTYPE_p_btDispatcher dispatcher) {
    BulletCollisionPINVOKE.btDbvtBroadphase_destroyProxy(swigCPtr, SWIGTYPE_p_btBroadphaseProxy.getCPtr(proxy), SWIGTYPE_p_btDispatcher.getCPtr(dispatcher));
  }

  public virtual void setAabb(SWIGTYPE_p_btBroadphaseProxy proxy, SWIGTYPE_p_btVector3 aabbMin, SWIGTYPE_p_btVector3 aabbMax, SWIGTYPE_p_btDispatcher dispatcher) {
    BulletCollisionPINVOKE.btDbvtBroadphase_setAabb(swigCPtr, SWIGTYPE_p_btBroadphaseProxy.getCPtr(proxy), SWIGTYPE_p_btVector3.getCPtr(aabbMin), SWIGTYPE_p_btVector3.getCPtr(aabbMax), SWIGTYPE_p_btDispatcher.getCPtr(dispatcher));
    if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void rayTest(SWIGTYPE_p_btVector3 rayFrom, SWIGTYPE_p_btVector3 rayTo, SWIGTYPE_p_btBroadphaseRayCallback rayCallback, SWIGTYPE_p_btVector3 aabbMin, SWIGTYPE_p_btVector3 aabbMax) {
    BulletCollisionPINVOKE.btDbvtBroadphase_rayTest__SWIG_0(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(rayFrom), SWIGTYPE_p_btVector3.getCPtr(rayTo), SWIGTYPE_p_btBroadphaseRayCallback.getCPtr(rayCallback), SWIGTYPE_p_btVector3.getCPtr(aabbMin), SWIGTYPE_p_btVector3.getCPtr(aabbMax));
    if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void rayTest(SWIGTYPE_p_btVector3 rayFrom, SWIGTYPE_p_btVector3 rayTo, SWIGTYPE_p_btBroadphaseRayCallback rayCallback, SWIGTYPE_p_btVector3 aabbMin) {
    BulletCollisionPINVOKE.btDbvtBroadphase_rayTest__SWIG_1(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(rayFrom), SWIGTYPE_p_btVector3.getCPtr(rayTo), SWIGTYPE_p_btBroadphaseRayCallback.getCPtr(rayCallback), SWIGTYPE_p_btVector3.getCPtr(aabbMin));
    if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void rayTest(SWIGTYPE_p_btVector3 rayFrom, SWIGTYPE_p_btVector3 rayTo, SWIGTYPE_p_btBroadphaseRayCallback rayCallback) {
    BulletCollisionPINVOKE.btDbvtBroadphase_rayTest__SWIG_2(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(rayFrom), SWIGTYPE_p_btVector3.getCPtr(rayTo), SWIGTYPE_p_btBroadphaseRayCallback.getCPtr(rayCallback));
    if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void aabbTest(SWIGTYPE_p_btVector3 aabbMin, SWIGTYPE_p_btVector3 aabbMax, SWIGTYPE_p_btBroadphaseAabbCallback callback) {
    BulletCollisionPINVOKE.btDbvtBroadphase_aabbTest(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(aabbMin), SWIGTYPE_p_btVector3.getCPtr(aabbMax), SWIGTYPE_p_btBroadphaseAabbCallback.getCPtr(callback));
    if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void getAabb(SWIGTYPE_p_btBroadphaseProxy proxy, SWIGTYPE_p_btVector3 aabbMin, SWIGTYPE_p_btVector3 aabbMax) {
    BulletCollisionPINVOKE.btDbvtBroadphase_getAabb(swigCPtr, SWIGTYPE_p_btBroadphaseProxy.getCPtr(proxy), SWIGTYPE_p_btVector3.getCPtr(aabbMin), SWIGTYPE_p_btVector3.getCPtr(aabbMax));
    if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void calculateOverlappingPairs(SWIGTYPE_p_btDispatcher dispatcher) {
    BulletCollisionPINVOKE.btDbvtBroadphase_calculateOverlappingPairs(swigCPtr, SWIGTYPE_p_btDispatcher.getCPtr(dispatcher));
  }

  public virtual SWIGTYPE_p_btOverlappingPairCache getOverlappingPairCache() {
    IntPtr cPtr = BulletCollisionPINVOKE.btDbvtBroadphase_getOverlappingPairCache__SWIG_0(swigCPtr);
    SWIGTYPE_p_btOverlappingPairCache ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_btOverlappingPairCache(cPtr, false);
    return ret;
  }

  public virtual void getBroadphaseAabb(SWIGTYPE_p_btVector3 aabbMin, SWIGTYPE_p_btVector3 aabbMax) {
    BulletCollisionPINVOKE.btDbvtBroadphase_getBroadphaseAabb(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(aabbMin), SWIGTYPE_p_btVector3.getCPtr(aabbMax));
    if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void printStats() {
    BulletCollisionPINVOKE.btDbvtBroadphase_printStats(swigCPtr);
  }

  public virtual void resetPool(SWIGTYPE_p_btDispatcher dispatcher) {
    BulletCollisionPINVOKE.btDbvtBroadphase_resetPool(swigCPtr, SWIGTYPE_p_btDispatcher.getCPtr(dispatcher));
  }

  public void performDeferredRemoval(SWIGTYPE_p_btDispatcher dispatcher) {
    BulletCollisionPINVOKE.btDbvtBroadphase_performDeferredRemoval(swigCPtr, SWIGTYPE_p_btDispatcher.getCPtr(dispatcher));
  }

  public void setVelocityPrediction(float prediction) {
    BulletCollisionPINVOKE.btDbvtBroadphase_setVelocityPrediction(swigCPtr, prediction);
  }

  public float getVelocityPrediction() {
    float ret = BulletCollisionPINVOKE.btDbvtBroadphase_getVelocityPrediction(swigCPtr);
    return ret;
  }

  public void setAabbForceUpdate(SWIGTYPE_p_btBroadphaseProxy absproxy, SWIGTYPE_p_btVector3 aabbMin, SWIGTYPE_p_btVector3 aabbMax, SWIGTYPE_p_btDispatcher arg3) {
    BulletCollisionPINVOKE.btDbvtBroadphase_setAabbForceUpdate(swigCPtr, SWIGTYPE_p_btBroadphaseProxy.getCPtr(absproxy), SWIGTYPE_p_btVector3.getCPtr(aabbMin), SWIGTYPE_p_btVector3.getCPtr(aabbMax), SWIGTYPE_p_btDispatcher.getCPtr(arg3));
    if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void benchmark(SWIGTYPE_p_btBroadphaseInterface arg0) {
    BulletCollisionPINVOKE.btDbvtBroadphase_benchmark(SWIGTYPE_p_btBroadphaseInterface.getCPtr(arg0));
  }

  public static readonly int DYNAMIC_SET = BulletCollisionPINVOKE.btDbvtBroadphase_DYNAMIC_SET_get();
  public static readonly int FIXED_SET = BulletCollisionPINVOKE.btDbvtBroadphase_FIXED_SET_get();
  public static readonly int STAGECOUNT = BulletCollisionPINVOKE.btDbvtBroadphase_STAGECOUNT_get();

}

}

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BulletCSharp {

using System;
using System.Runtime.InteropServices;

public class Feature : Element {
  private HandleRef swigCPtr;

  internal Feature(IntPtr cPtr, bool cMemoryOwn) : base(BulletSoftBodyPINVOKE.Feature_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Feature obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Feature() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletSoftBodyPINVOKE.delete_Feature(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Material m_material {
    set {
      BulletSoftBodyPINVOKE.Feature_m_material_set(swigCPtr, Material.getCPtr(value));
    } 
    get {
      IntPtr cPtr = BulletSoftBodyPINVOKE.Feature_m_material_get(swigCPtr);
      Material ret = (cPtr == IntPtr.Zero) ? null : new Material(cPtr, false);
      return ret;
    } 
  }

  public Feature() : this(BulletSoftBodyPINVOKE.new_Feature(), true) {
  }

}

}

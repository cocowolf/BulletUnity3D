/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BulletCSharp {

using System;
using System.Runtime.InteropServices;

public class btStackAlloc : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal btStackAlloc(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(btStackAlloc obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~btStackAlloc() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LinearMathPINVOKE.delete_btStackAlloc(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public btStackAlloc(uint size) : this(LinearMathPINVOKE.new_btStackAlloc(size), true) {
  }

  public void create(uint size) {
    LinearMathPINVOKE.btStackAlloc_create(swigCPtr, size);
  }

  public void destroy() {
    LinearMathPINVOKE.btStackAlloc_destroy(swigCPtr);
  }

  public int getAvailableMemory() {
    int ret = LinearMathPINVOKE.btStackAlloc_getAvailableMemory(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_unsigned_char allocate(uint size) {
    IntPtr cPtr = LinearMathPINVOKE.btStackAlloc_allocate(swigCPtr, size);
    SWIGTYPE_p_unsigned_char ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
    return ret;
  }

  public btBlock beginBlock() {
    IntPtr cPtr = LinearMathPINVOKE.btStackAlloc_beginBlock(swigCPtr);
    btBlock ret = (cPtr == IntPtr.Zero) ? null : new btBlock(cPtr, false);
    return ret;
  }

  public void endBlock(btBlock block) {
    LinearMathPINVOKE.btStackAlloc_endBlock(swigCPtr, btBlock.getCPtr(block));
  }

}

}

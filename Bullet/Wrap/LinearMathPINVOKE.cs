/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BulletCSharp {

using System;
using System.Runtime.InteropServices;

class LinearMathPINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [DllImport("LinearMath", EntryPoint="SWIGRegisterExceptionCallbacks_LinearMath")]
    public static extern void SWIGRegisterExceptionCallbacks_LinearMath(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [DllImport("LinearMath", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_LinearMath")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_LinearMath(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_LinearMath(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_LinearMath(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [ThreadStatic]
    private static Exception pendingException = null;
    private static int numExceptionsPending = 0;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(Exception e) {
      if (pendingException != null)
        throw new ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(typeof(LinearMathPINVOKE)) {
        numExceptionsPending++;
      }
    }

    public static Exception Retrieve() {
      Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(typeof(LinearMathPINVOKE)) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [DllImport("LinearMath", EntryPoint="SWIGRegisterStringCallback_LinearMath")]
    public static extern void SWIGRegisterStringCallback_LinearMath(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_LinearMath(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static LinearMathPINVOKE() {
  }


  [DllImport("LinearMath", EntryPoint="CSharp_BT_BULLET_VERSION_get")]
  public static extern int BT_BULLET_VERSION_get();

  [DllImport("LinearMath", EntryPoint="CSharp_btGetVersion")]
  public static extern int btGetVersion();

  [DllImport("LinearMath", EntryPoint="CSharp_BT_LARGE_FLOAT_get")]
  public static extern double BT_LARGE_FLOAT_get();

  [DllImport("LinearMath", EntryPoint="CSharp_btSqrt")]
  public static extern float btSqrt(float jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btFabs")]
  public static extern float btFabs(float jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btCos")]
  public static extern float btCos(float jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btSin")]
  public static extern float btSin(float jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btTan")]
  public static extern float btTan(float jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btAcos")]
  public static extern float btAcos(float jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btAsin")]
  public static extern float btAsin(float jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btAtan")]
  public static extern float btAtan(float jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btAtan2")]
  public static extern float btAtan2(float jarg1, float jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btExp")]
  public static extern float btExp(float jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btLog")]
  public static extern float btLog(float jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btPow")]
  public static extern float btPow(float jarg1, float jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btFmod")]
  public static extern float btFmod(float jarg1, float jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btAtan2Fast")]
  public static extern float btAtan2Fast(float jarg1, float jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btFuzzyZero")]
  public static extern bool btFuzzyZero(float jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btEqual")]
  public static extern bool btEqual(float jarg1, float jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btGreaterEqual")]
  public static extern bool btGreaterEqual(float jarg1, float jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btIsNegative")]
  public static extern int btIsNegative(float jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btRadians")]
  public static extern float btRadians(float jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btDegrees")]
  public static extern float btDegrees(float jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btFsel")]
  public static extern float btFsel(float jarg1, float jarg2, float jarg3);

  [DllImport("LinearMath", EntryPoint="CSharp_btMachineIsLittleEndian")]
  public static extern bool btMachineIsLittleEndian();

  [DllImport("LinearMath", EntryPoint="CSharp_btSelect__SWIG_0")]
  public static extern uint btSelect__SWIG_0(uint jarg1, uint jarg2, uint jarg3);

  [DllImport("LinearMath", EntryPoint="CSharp_btSelect__SWIG_1")]
  public static extern int btSelect__SWIG_1(uint jarg1, int jarg2, int jarg3);

  [DllImport("LinearMath", EntryPoint="CSharp_btSelect__SWIG_2")]
  public static extern float btSelect__SWIG_2(uint jarg1, float jarg2, float jarg3);

  [DllImport("LinearMath", EntryPoint="CSharp_btSwapEndian__SWIG_0")]
  public static extern uint btSwapEndian__SWIG_0(uint jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btSwapEndian__SWIG_1")]
  public static extern ushort btSwapEndian__SWIG_1(ushort jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btSwapEndian__SWIG_2")]
  public static extern uint btSwapEndian__SWIG_2(int jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btSwapEndian__SWIG_3")]
  public static extern ushort btSwapEndian__SWIG_3(short jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btSwapEndianFloat")]
  public static extern uint btSwapEndianFloat(float jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btUnswapEndianFloat")]
  public static extern float btUnswapEndianFloat(uint jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btSwapEndianDouble")]
  public static extern void btSwapEndianDouble(double jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btUnswapEndianDouble")]
  public static extern double btUnswapEndianDouble(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btNormalizeAngle")]
  public static extern float btNormalizeAngle(float jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btTypedObject")]
  public static extern IntPtr new_btTypedObject(int jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btTypedObject_m_objectType_set")]
  public static extern void btTypedObject_m_objectType_set(HandleRef jarg1, int jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btTypedObject_m_objectType_get")]
  public static extern int btTypedObject_m_objectType_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btTypedObject_getObjectType")]
  public static extern int btTypedObject_getObjectType(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_delete_btTypedObject")]
  public static extern void delete_btTypedObject(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_AabbExpand")]
  public static extern void AabbExpand(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4);

  [DllImport("LinearMath", EntryPoint="CSharp_TestPointAgainstAabb2")]
  public static extern bool TestPointAgainstAabb2(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport("LinearMath", EntryPoint="CSharp_TestAabbAgainstAabb2")]
  public static extern bool TestAabbAgainstAabb2(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4);

  [DllImport("LinearMath", EntryPoint="CSharp_TestTriangleAgainstAabb2")]
  public static extern bool TestTriangleAgainstAabb2(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport("LinearMath", EntryPoint="CSharp_btOutcode")]
  public static extern int btOutcode(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btRayAabb2")]
  public static extern bool btRayAabb2(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4, HandleRef jarg5, float jarg6, float jarg7);

  [DllImport("LinearMath", EntryPoint="CSharp_btRayAabb")]
  public static extern bool btRayAabb(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4, HandleRef jarg5, HandleRef jarg6);

  [DllImport("LinearMath", EntryPoint="CSharp_btTransformAabb__SWIG_0")]
  public static extern void btTransformAabb__SWIG_0(HandleRef jarg1, float jarg2, HandleRef jarg3, HandleRef jarg4, HandleRef jarg5);

  [DllImport("LinearMath", EntryPoint="CSharp_btTransformAabb__SWIG_1")]
  public static extern void btTransformAabb__SWIG_1(HandleRef jarg1, HandleRef jarg2, float jarg3, HandleRef jarg4, HandleRef jarg5, HandleRef jarg6);

  [DllImport("LinearMath", EntryPoint="CSharp_USE_BANCHLESS_get")]
  public static extern int USE_BANCHLESS_get();

  [DllImport("LinearMath", EntryPoint="CSharp_testQuantizedAabbAgainstQuantizedAabb")]
  public static extern uint testQuantizedAabbAgainstQuantizedAabb(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4);

  [DllImport("LinearMath", EntryPoint="CSharp_btAlignedAllocInternal")]
  public static extern IntPtr btAlignedAllocInternal(uint jarg1, int jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btAlignedFreeInternal")]
  public static extern void btAlignedFreeInternal(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btAlignedAllocSetCustom")]
  public static extern void btAlignedAllocSetCustom(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btAlignedAllocSetCustomAligned")]
  public static extern void btAlignedAllocSetCustomAligned(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_BT_USE_PLACEMENT_NEW_get")]
  public static extern int BT_USE_PLACEMENT_NEW_get();

  [DllImport("LinearMath", EntryPoint="CSharp_new_HullResult")]
  public static extern IntPtr new_HullResult();

  [DllImport("LinearMath", EntryPoint="CSharp_HullResult_mPolygons_set")]
  public static extern void HullResult_mPolygons_set(HandleRef jarg1, bool jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_HullResult_mPolygons_get")]
  public static extern bool HullResult_mPolygons_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_HullResult_mNumOutputVertices_set")]
  public static extern void HullResult_mNumOutputVertices_set(HandleRef jarg1, uint jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_HullResult_mNumOutputVertices_get")]
  public static extern uint HullResult_mNumOutputVertices_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_HullResult_m_OutputVertices_set")]
  public static extern void HullResult_m_OutputVertices_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_HullResult_m_OutputVertices_get")]
  public static extern IntPtr HullResult_m_OutputVertices_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_HullResult_mNumFaces_set")]
  public static extern void HullResult_mNumFaces_set(HandleRef jarg1, uint jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_HullResult_mNumFaces_get")]
  public static extern uint HullResult_mNumFaces_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_HullResult_mNumIndices_set")]
  public static extern void HullResult_mNumIndices_set(HandleRef jarg1, uint jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_HullResult_mNumIndices_get")]
  public static extern uint HullResult_mNumIndices_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_HullResult_m_Indices_set")]
  public static extern void HullResult_m_Indices_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_HullResult_m_Indices_get")]
  public static extern IntPtr HullResult_m_Indices_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_delete_HullResult")]
  public static extern void delete_HullResult(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_new_HullDesc__SWIG_0")]
  public static extern IntPtr new_HullDesc__SWIG_0();

  [DllImport("LinearMath", EntryPoint="CSharp_new_HullDesc__SWIG_1")]
  public static extern IntPtr new_HullDesc__SWIG_1(int jarg1, uint jarg2, HandleRef jarg3, uint jarg4);

  [DllImport("LinearMath", EntryPoint="CSharp_new_HullDesc__SWIG_2")]
  public static extern IntPtr new_HullDesc__SWIG_2(int jarg1, uint jarg2, HandleRef jarg3);

  [DllImport("LinearMath", EntryPoint="CSharp_HullDesc_HasHullFlag")]
  public static extern bool HullDesc_HasHullFlag(HandleRef jarg1, int jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_HullDesc_SetHullFlag")]
  public static extern void HullDesc_SetHullFlag(HandleRef jarg1, int jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_HullDesc_ClearHullFlag")]
  public static extern void HullDesc_ClearHullFlag(HandleRef jarg1, int jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_HullDesc_mFlags_set")]
  public static extern void HullDesc_mFlags_set(HandleRef jarg1, uint jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_HullDesc_mFlags_get")]
  public static extern uint HullDesc_mFlags_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_HullDesc_mVcount_set")]
  public static extern void HullDesc_mVcount_set(HandleRef jarg1, uint jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_HullDesc_mVcount_get")]
  public static extern uint HullDesc_mVcount_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_HullDesc_mVertices_set")]
  public static extern void HullDesc_mVertices_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_HullDesc_mVertices_get")]
  public static extern IntPtr HullDesc_mVertices_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_HullDesc_mVertexStride_set")]
  public static extern void HullDesc_mVertexStride_set(HandleRef jarg1, uint jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_HullDesc_mVertexStride_get")]
  public static extern uint HullDesc_mVertexStride_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_HullDesc_mNormalEpsilon_set")]
  public static extern void HullDesc_mNormalEpsilon_set(HandleRef jarg1, float jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_HullDesc_mNormalEpsilon_get")]
  public static extern float HullDesc_mNormalEpsilon_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_HullDesc_mMaxVertices_set")]
  public static extern void HullDesc_mMaxVertices_set(HandleRef jarg1, uint jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_HullDesc_mMaxVertices_get")]
  public static extern uint HullDesc_mMaxVertices_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_HullDesc_mMaxFaces_set")]
  public static extern void HullDesc_mMaxFaces_set(HandleRef jarg1, uint jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_HullDesc_mMaxFaces_get")]
  public static extern uint HullDesc_mMaxFaces_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_delete_HullDesc")]
  public static extern void delete_HullDesc(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btPlane_normal_set")]
  public static extern void btPlane_normal_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btPlane_normal_get")]
  public static extern IntPtr btPlane_normal_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btPlane_dist_set")]
  public static extern void btPlane_dist_set(HandleRef jarg1, float jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btPlane_dist_get")]
  public static extern float btPlane_dist_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btPlane__SWIG_0")]
  public static extern IntPtr new_btPlane__SWIG_0(HandleRef jarg1, float jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btPlane__SWIG_1")]
  public static extern IntPtr new_btPlane__SWIG_1();

  [DllImport("LinearMath", EntryPoint="CSharp_delete_btPlane")]
  public static extern void delete_btPlane(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_new_ConvexH__SWIG_0")]
  public static extern IntPtr new_ConvexH__SWIG_0();

  [DllImport("LinearMath", EntryPoint="CSharp_delete_ConvexH")]
  public static extern void delete_ConvexH(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_ConvexH_vertices_set")]
  public static extern void ConvexH_vertices_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_ConvexH_vertices_get")]
  public static extern IntPtr ConvexH_vertices_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_ConvexH_edges_set")]
  public static extern void ConvexH_edges_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_ConvexH_edges_get")]
  public static extern IntPtr ConvexH_edges_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_ConvexH_facets_set")]
  public static extern void ConvexH_facets_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_ConvexH_facets_get")]
  public static extern IntPtr ConvexH_facets_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_new_ConvexH__SWIG_1")]
  public static extern IntPtr new_ConvexH__SWIG_1(int jarg1, int jarg2, int jarg3);

  [DllImport("LinearMath", EntryPoint="CSharp_int4_x_set")]
  public static extern void int4_x_set(HandleRef jarg1, int jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_int4_x_get")]
  public static extern int int4_x_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_int4_y_set")]
  public static extern void int4_y_set(HandleRef jarg1, int jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_int4_y_get")]
  public static extern int int4_y_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_int4_z_set")]
  public static extern void int4_z_set(HandleRef jarg1, int jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_int4_z_get")]
  public static extern int int4_z_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_int4_w_set")]
  public static extern void int4_w_set(HandleRef jarg1, int jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_int4_w_get")]
  public static extern int int4_w_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_new_int4__SWIG_0")]
  public static extern IntPtr new_int4__SWIG_0();

  [DllImport("LinearMath", EntryPoint="CSharp_new_int4__SWIG_1")]
  public static extern IntPtr new_int4__SWIG_1(int jarg1, int jarg2, int jarg3, int jarg4);

  [DllImport("LinearMath", EntryPoint="CSharp_delete_int4")]
  public static extern void delete_int4(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_new_PHullResult")]
  public static extern IntPtr new_PHullResult();

  [DllImport("LinearMath", EntryPoint="CSharp_PHullResult_mVcount_set")]
  public static extern void PHullResult_mVcount_set(HandleRef jarg1, uint jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_PHullResult_mVcount_get")]
  public static extern uint PHullResult_mVcount_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_PHullResult_mIndexCount_set")]
  public static extern void PHullResult_mIndexCount_set(HandleRef jarg1, uint jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_PHullResult_mIndexCount_get")]
  public static extern uint PHullResult_mIndexCount_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_PHullResult_mFaceCount_set")]
  public static extern void PHullResult_mFaceCount_set(HandleRef jarg1, uint jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_PHullResult_mFaceCount_get")]
  public static extern uint PHullResult_mFaceCount_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_PHullResult_mVertices_set")]
  public static extern void PHullResult_mVertices_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_PHullResult_mVertices_get")]
  public static extern IntPtr PHullResult_mVertices_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_PHullResult_m_Indices_set")]
  public static extern void PHullResult_m_Indices_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_PHullResult_m_Indices_get")]
  public static extern IntPtr PHullResult_m_Indices_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_delete_PHullResult")]
  public static extern void delete_PHullResult(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_HullLibrary_m_vertexIndexMapping_set")]
  public static extern void HullLibrary_m_vertexIndexMapping_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_HullLibrary_m_vertexIndexMapping_get")]
  public static extern IntPtr HullLibrary_m_vertexIndexMapping_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_HullLibrary_CreateConvexHull")]
  public static extern int HullLibrary_CreateConvexHull(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport("LinearMath", EntryPoint="CSharp_HullLibrary_ReleaseResult")]
  public static extern int HullLibrary_ReleaseResult(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_new_HullLibrary")]
  public static extern IntPtr new_HullLibrary();

  [DllImport("LinearMath", EntryPoint="CSharp_delete_HullLibrary")]
  public static extern void delete_HullLibrary(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btConvexHullComputer_vertices_set")]
  public static extern void btConvexHullComputer_vertices_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btConvexHullComputer_vertices_get")]
  public static extern IntPtr btConvexHullComputer_vertices_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btConvexHullComputer_edges_set")]
  public static extern void btConvexHullComputer_edges_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btConvexHullComputer_edges_get")]
  public static extern IntPtr btConvexHullComputer_edges_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btConvexHullComputer_faces_set")]
  public static extern void btConvexHullComputer_faces_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btConvexHullComputer_faces_get")]
  public static extern IntPtr btConvexHullComputer_faces_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btConvexHullComputer_compute__SWIG_0")]
  public static extern float btConvexHullComputer_compute__SWIG_0(HandleRef jarg1, HandleRef jarg2, int jarg3, int jarg4, float jarg5, float jarg6);

  [DllImport("LinearMath", EntryPoint="CSharp_btConvexHullComputer_compute__SWIG_1")]
  public static extern float btConvexHullComputer_compute__SWIG_1(HandleRef jarg1, HandleRef jarg2, int jarg3, int jarg4, float jarg5, float jarg6);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btConvexHullComputer")]
  public static extern IntPtr new_btConvexHullComputer();

  [DllImport("LinearMath", EntryPoint="CSharp_delete_btConvexHullComputer")]
  public static extern void delete_btConvexHullComputer(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btDefaultMotionState_m_graphicsWorldTrans_set")]
  public static extern void btDefaultMotionState_m_graphicsWorldTrans_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btDefaultMotionState_m_graphicsWorldTrans_get")]
  public static extern IntPtr btDefaultMotionState_m_graphicsWorldTrans_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btDefaultMotionState_m_centerOfMassOffset_set")]
  public static extern void btDefaultMotionState_m_centerOfMassOffset_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btDefaultMotionState_m_centerOfMassOffset_get")]
  public static extern IntPtr btDefaultMotionState_m_centerOfMassOffset_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btDefaultMotionState_m_startWorldTrans_set")]
  public static extern void btDefaultMotionState_m_startWorldTrans_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btDefaultMotionState_m_startWorldTrans_get")]
  public static extern IntPtr btDefaultMotionState_m_startWorldTrans_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btDefaultMotionState_m_userPointer_set")]
  public static extern void btDefaultMotionState_m_userPointer_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btDefaultMotionState_m_userPointer_get")]
  public static extern IntPtr btDefaultMotionState_m_userPointer_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btDefaultMotionState__SWIG_0")]
  public static extern IntPtr new_btDefaultMotionState__SWIG_0(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btDefaultMotionState__SWIG_1")]
  public static extern IntPtr new_btDefaultMotionState__SWIG_1(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btDefaultMotionState__SWIG_2")]
  public static extern IntPtr new_btDefaultMotionState__SWIG_2();

  [DllImport("LinearMath", EntryPoint="CSharp_btDefaultMotionState_getWorldTransform")]
  public static extern void btDefaultMotionState_getWorldTransform(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btDefaultMotionState_setWorldTransform")]
  public static extern void btDefaultMotionState_setWorldTransform(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_delete_btDefaultMotionState")]
  public static extern void delete_btDefaultMotionState(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btGeometryUtil_getPlaneEquationsFromVertices")]
  public static extern void btGeometryUtil_getPlaneEquationsFromVertices(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btGeometryUtil_getVerticesFromPlaneEquations")]
  public static extern void btGeometryUtil_getVerticesFromPlaneEquations(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btGeometryUtil_isInside")]
  public static extern bool btGeometryUtil_isInside(HandleRef jarg1, HandleRef jarg2, float jarg3);

  [DllImport("LinearMath", EntryPoint="CSharp_btGeometryUtil_isPointInsidePlanes")]
  public static extern bool btGeometryUtil_isPointInsidePlanes(HandleRef jarg1, HandleRef jarg2, float jarg3);

  [DllImport("LinearMath", EntryPoint="CSharp_btGeometryUtil_areVerticesBehindPlane")]
  public static extern bool btGeometryUtil_areVerticesBehindPlane(HandleRef jarg1, HandleRef jarg2, float jarg3);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btGeometryUtil")]
  public static extern IntPtr new_btGeometryUtil();

  [DllImport("LinearMath", EntryPoint="CSharp_delete_btGeometryUtil")]
  public static extern void delete_btGeometryUtil(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_new_GrahamVector3")]
  public static extern IntPtr new_GrahamVector3(HandleRef jarg1, int jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_GrahamVector3_m_angle_set")]
  public static extern void GrahamVector3_m_angle_set(HandleRef jarg1, float jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_GrahamVector3_m_angle_get")]
  public static extern float GrahamVector3_m_angle_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_GrahamVector3_m_orgIndex_set")]
  public static extern void GrahamVector3_m_orgIndex_set(HandleRef jarg1, int jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_GrahamVector3_m_orgIndex_get")]
  public static extern int GrahamVector3_m_orgIndex_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_delete_GrahamVector3")]
  public static extern void delete_GrahamVector3(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btAngleCompareFunc_m_anchor_set")]
  public static extern void btAngleCompareFunc_m_anchor_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btAngleCompareFunc_m_anchor_get")]
  public static extern IntPtr btAngleCompareFunc_m_anchor_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btAngleCompareFunc")]
  public static extern IntPtr new_btAngleCompareFunc(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_delete_btAngleCompareFunc")]
  public static extern void delete_btAngleCompareFunc(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_GrahamScanConvexHull2D")]
  public static extern void GrahamScanConvexHull2D(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport("LinearMath", EntryPoint="CSharp_btHashString_m_string_set")]
  public static extern void btHashString_m_string_set(HandleRef jarg1, string jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btHashString_m_string_get")]
  public static extern string btHashString_m_string_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btHashString_m_hash_set")]
  public static extern void btHashString_m_hash_set(HandleRef jarg1, uint jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btHashString_m_hash_get")]
  public static extern uint btHashString_m_hash_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btHashString_getHash")]
  public static extern uint btHashString_getHash(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btHashString")]
  public static extern IntPtr new_btHashString(string jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btHashString_portableStringCompare")]
  public static extern int btHashString_portableStringCompare(HandleRef jarg1, string jarg2, string jarg3);

  [DllImport("LinearMath", EntryPoint="CSharp_btHashString_equals")]
  public static extern bool btHashString_equals(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_delete_btHashString")]
  public static extern void delete_btHashString(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_BT_HASH_NULL_get")]
  public static extern int BT_HASH_NULL_get();

  [DllImport("LinearMath", EntryPoint="CSharp_new_btHashInt")]
  public static extern IntPtr new_btHashInt(int jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btHashInt_getUid1")]
  public static extern int btHashInt_getUid1(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btHashInt_setUid1")]
  public static extern void btHashInt_setUid1(HandleRef jarg1, int jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btHashInt_equals")]
  public static extern bool btHashInt_equals(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btHashInt_getHash")]
  public static extern uint btHashInt_getHash(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_delete_btHashInt")]
  public static extern void delete_btHashInt(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btHashPtr")]
  public static extern IntPtr new_btHashPtr(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btHashPtr_getPointer")]
  public static extern IntPtr btHashPtr_getPointer(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btHashPtr_equals")]
  public static extern bool btHashPtr_equals(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btHashPtr_getHash")]
  public static extern uint btHashPtr_getHash(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_delete_btHashPtr")]
  public static extern void delete_btHashPtr(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_delete_btIDebugDraw")]
  public static extern void delete_btIDebugDraw(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_drawLine__SWIG_0")]
  public static extern void btIDebugDraw_drawLine__SWIG_0(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_drawLineSwigExplicitbtIDebugDraw__SWIG_0")]
  public static extern void btIDebugDraw_drawLineSwigExplicitbtIDebugDraw__SWIG_0(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_drawLine__SWIG_1")]
  public static extern void btIDebugDraw_drawLine__SWIG_1(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4, HandleRef jarg5);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_drawLineSwigExplicitbtIDebugDraw__SWIG_1")]
  public static extern void btIDebugDraw_drawLineSwigExplicitbtIDebugDraw__SWIG_1(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4, HandleRef jarg5);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_drawSphere__SWIG_0")]
  public static extern void btIDebugDraw_drawSphere__SWIG_0(HandleRef jarg1, float jarg2, HandleRef jarg3, HandleRef jarg4);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_drawSphereSwigExplicitbtIDebugDraw__SWIG_0")]
  public static extern void btIDebugDraw_drawSphereSwigExplicitbtIDebugDraw__SWIG_0(HandleRef jarg1, float jarg2, HandleRef jarg3, HandleRef jarg4);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_drawSphere__SWIG_1")]
  public static extern void btIDebugDraw_drawSphere__SWIG_1(HandleRef jarg1, HandleRef jarg2, float jarg3, HandleRef jarg4);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_drawSphereSwigExplicitbtIDebugDraw__SWIG_1")]
  public static extern void btIDebugDraw_drawSphereSwigExplicitbtIDebugDraw__SWIG_1(HandleRef jarg1, HandleRef jarg2, float jarg3, HandleRef jarg4);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_drawTriangle__SWIG_0")]
  public static extern void btIDebugDraw_drawTriangle__SWIG_0(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4, HandleRef jarg5, HandleRef jarg6, HandleRef jarg7, HandleRef jarg8, float jarg9);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_drawTriangleSwigExplicitbtIDebugDraw__SWIG_0")]
  public static extern void btIDebugDraw_drawTriangleSwigExplicitbtIDebugDraw__SWIG_0(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4, HandleRef jarg5, HandleRef jarg6, HandleRef jarg7, HandleRef jarg8, float jarg9);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_drawTriangle__SWIG_1")]
  public static extern void btIDebugDraw_drawTriangle__SWIG_1(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4, HandleRef jarg5, float jarg6);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_drawTriangleSwigExplicitbtIDebugDraw__SWIG_1")]
  public static extern void btIDebugDraw_drawTriangleSwigExplicitbtIDebugDraw__SWIG_1(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4, HandleRef jarg5, float jarg6);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_drawContactPoint")]
  public static extern void btIDebugDraw_drawContactPoint(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, float jarg4, int jarg5, HandleRef jarg6);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_drawContactPointSwigExplicitbtIDebugDraw")]
  public static extern void btIDebugDraw_drawContactPointSwigExplicitbtIDebugDraw(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, float jarg4, int jarg5, HandleRef jarg6);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_reportErrorWarning")]
  public static extern void btIDebugDraw_reportErrorWarning(HandleRef jarg1, string jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_reportErrorWarningSwigExplicitbtIDebugDraw")]
  public static extern void btIDebugDraw_reportErrorWarningSwigExplicitbtIDebugDraw(HandleRef jarg1, string jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_draw3dText")]
  public static extern void btIDebugDraw_draw3dText(HandleRef jarg1, HandleRef jarg2, string jarg3);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_draw3dTextSwigExplicitbtIDebugDraw")]
  public static extern void btIDebugDraw_draw3dTextSwigExplicitbtIDebugDraw(HandleRef jarg1, HandleRef jarg2, string jarg3);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_setDebugMode")]
  public static extern void btIDebugDraw_setDebugMode(HandleRef jarg1, int jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_setDebugModeSwigExplicitbtIDebugDraw")]
  public static extern void btIDebugDraw_setDebugModeSwigExplicitbtIDebugDraw(HandleRef jarg1, int jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_getDebugMode")]
  public static extern int btIDebugDraw_getDebugMode(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_getDebugModeSwigExplicitbtIDebugDraw")]
  public static extern int btIDebugDraw_getDebugModeSwigExplicitbtIDebugDraw(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_drawAabb")]
  public static extern void btIDebugDraw_drawAabb(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_drawAabbSwigExplicitbtIDebugDraw")]
  public static extern void btIDebugDraw_drawAabbSwigExplicitbtIDebugDraw(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_drawTransform")]
  public static extern void btIDebugDraw_drawTransform(HandleRef jarg1, HandleRef jarg2, float jarg3);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_drawTransformSwigExplicitbtIDebugDraw")]
  public static extern void btIDebugDraw_drawTransformSwigExplicitbtIDebugDraw(HandleRef jarg1, HandleRef jarg2, float jarg3);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_drawArc__SWIG_0")]
  public static extern void btIDebugDraw_drawArc__SWIG_0(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4, float jarg5, float jarg6, float jarg7, float jarg8, HandleRef jarg9, bool jarg10, float jarg11);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_drawArcSwigExplicitbtIDebugDraw__SWIG_0")]
  public static extern void btIDebugDraw_drawArcSwigExplicitbtIDebugDraw__SWIG_0(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4, float jarg5, float jarg6, float jarg7, float jarg8, HandleRef jarg9, bool jarg10, float jarg11);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_drawArc__SWIG_1")]
  public static extern void btIDebugDraw_drawArc__SWIG_1(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4, float jarg5, float jarg6, float jarg7, float jarg8, HandleRef jarg9, bool jarg10);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_drawArcSwigExplicitbtIDebugDraw__SWIG_1")]
  public static extern void btIDebugDraw_drawArcSwigExplicitbtIDebugDraw__SWIG_1(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4, float jarg5, float jarg6, float jarg7, float jarg8, HandleRef jarg9, bool jarg10);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_drawSpherePatch__SWIG_0")]
  public static extern void btIDebugDraw_drawSpherePatch__SWIG_0(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, HandleRef jarg10, float jarg11);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_drawSpherePatchSwigExplicitbtIDebugDraw__SWIG_0")]
  public static extern void btIDebugDraw_drawSpherePatchSwigExplicitbtIDebugDraw__SWIG_0(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, HandleRef jarg10, float jarg11);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_drawSpherePatch__SWIG_1")]
  public static extern void btIDebugDraw_drawSpherePatch__SWIG_1(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, HandleRef jarg10);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_drawSpherePatchSwigExplicitbtIDebugDraw__SWIG_1")]
  public static extern void btIDebugDraw_drawSpherePatchSwigExplicitbtIDebugDraw__SWIG_1(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, HandleRef jarg10);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_drawBox__SWIG_0")]
  public static extern void btIDebugDraw_drawBox__SWIG_0(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_drawBoxSwigExplicitbtIDebugDraw__SWIG_0")]
  public static extern void btIDebugDraw_drawBoxSwigExplicitbtIDebugDraw__SWIG_0(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_drawBox__SWIG_1")]
  public static extern void btIDebugDraw_drawBox__SWIG_1(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4, HandleRef jarg5);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_drawBoxSwigExplicitbtIDebugDraw__SWIG_1")]
  public static extern void btIDebugDraw_drawBoxSwigExplicitbtIDebugDraw__SWIG_1(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4, HandleRef jarg5);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_drawCapsule")]
  public static extern void btIDebugDraw_drawCapsule(HandleRef jarg1, float jarg2, float jarg3, int jarg4, HandleRef jarg5, HandleRef jarg6);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_drawCapsuleSwigExplicitbtIDebugDraw")]
  public static extern void btIDebugDraw_drawCapsuleSwigExplicitbtIDebugDraw(HandleRef jarg1, float jarg2, float jarg3, int jarg4, HandleRef jarg5, HandleRef jarg6);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_drawCylinder")]
  public static extern void btIDebugDraw_drawCylinder(HandleRef jarg1, float jarg2, float jarg3, int jarg4, HandleRef jarg5, HandleRef jarg6);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_drawCylinderSwigExplicitbtIDebugDraw")]
  public static extern void btIDebugDraw_drawCylinderSwigExplicitbtIDebugDraw(HandleRef jarg1, float jarg2, float jarg3, int jarg4, HandleRef jarg5, HandleRef jarg6);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_drawCone")]
  public static extern void btIDebugDraw_drawCone(HandleRef jarg1, float jarg2, float jarg3, int jarg4, HandleRef jarg5, HandleRef jarg6);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_drawConeSwigExplicitbtIDebugDraw")]
  public static extern void btIDebugDraw_drawConeSwigExplicitbtIDebugDraw(HandleRef jarg1, float jarg2, float jarg3, int jarg4, HandleRef jarg5, HandleRef jarg6);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_drawPlane")]
  public static extern void btIDebugDraw_drawPlane(HandleRef jarg1, HandleRef jarg2, float jarg3, HandleRef jarg4, HandleRef jarg5);

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_drawPlaneSwigExplicitbtIDebugDraw")]
  public static extern void btIDebugDraw_drawPlaneSwigExplicitbtIDebugDraw(HandleRef jarg1, HandleRef jarg2, float jarg3, HandleRef jarg4, HandleRef jarg5);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btIDebugDraw")]
  public static extern IntPtr new_btIDebugDraw();

  [DllImport("LinearMath", EntryPoint="CSharp_btIDebugDraw_director_connect")]
  public static extern void btIDebugDraw_director_connect(HandleRef jarg1, btIDebugDraw.SwigDelegatebtIDebugDraw_0 delegate0, btIDebugDraw.SwigDelegatebtIDebugDraw_1 delegate1, btIDebugDraw.SwigDelegatebtIDebugDraw_2 delegate2, btIDebugDraw.SwigDelegatebtIDebugDraw_3 delegate3, btIDebugDraw.SwigDelegatebtIDebugDraw_4 delegate4, btIDebugDraw.SwigDelegatebtIDebugDraw_5 delegate5, btIDebugDraw.SwigDelegatebtIDebugDraw_6 delegate6, btIDebugDraw.SwigDelegatebtIDebugDraw_7 delegate7, btIDebugDraw.SwigDelegatebtIDebugDraw_8 delegate8, btIDebugDraw.SwigDelegatebtIDebugDraw_9 delegate9, btIDebugDraw.SwigDelegatebtIDebugDraw_10 delegate10, btIDebugDraw.SwigDelegatebtIDebugDraw_11 delegate11, btIDebugDraw.SwigDelegatebtIDebugDraw_12 delegate12, btIDebugDraw.SwigDelegatebtIDebugDraw_13 delegate13, btIDebugDraw.SwigDelegatebtIDebugDraw_14 delegate14, btIDebugDraw.SwigDelegatebtIDebugDraw_15 delegate15, btIDebugDraw.SwigDelegatebtIDebugDraw_16 delegate16, btIDebugDraw.SwigDelegatebtIDebugDraw_17 delegate17, btIDebugDraw.SwigDelegatebtIDebugDraw_18 delegate18, btIDebugDraw.SwigDelegatebtIDebugDraw_19 delegate19, btIDebugDraw.SwigDelegatebtIDebugDraw_20 delegate20, btIDebugDraw.SwigDelegatebtIDebugDraw_21 delegate21, btIDebugDraw.SwigDelegatebtIDebugDraw_22 delegate22);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btGEN_Link__SWIG_0")]
  public static extern IntPtr new_btGEN_Link__SWIG_0();

  [DllImport("LinearMath", EntryPoint="CSharp_new_btGEN_Link__SWIG_1")]
  public static extern IntPtr new_btGEN_Link__SWIG_1(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btGEN_Link_getNext")]
  public static extern IntPtr btGEN_Link_getNext(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btGEN_Link_getPrev")]
  public static extern IntPtr btGEN_Link_getPrev(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btGEN_Link_isHead")]
  public static extern bool btGEN_Link_isHead(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btGEN_Link_isTail")]
  public static extern bool btGEN_Link_isTail(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btGEN_Link_insertBefore")]
  public static extern void btGEN_Link_insertBefore(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btGEN_Link_insertAfter")]
  public static extern void btGEN_Link_insertAfter(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btGEN_Link_remove")]
  public static extern void btGEN_Link_remove(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_delete_btGEN_Link")]
  public static extern void delete_btGEN_Link(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btGEN_List")]
  public static extern IntPtr new_btGEN_List();

  [DllImport("LinearMath", EntryPoint="CSharp_btGEN_List_getHead")]
  public static extern IntPtr btGEN_List_getHead(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btGEN_List_getTail")]
  public static extern IntPtr btGEN_List_getTail(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btGEN_List_addHead")]
  public static extern void btGEN_List_addHead(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btGEN_List_addTail")]
  public static extern void btGEN_List_addTail(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_delete_btGEN_List")]
  public static extern void delete_btGEN_List(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btMatrix3x3__SWIG_0")]
  public static extern IntPtr new_btMatrix3x3__SWIG_0();

  [DllImport("LinearMath", EntryPoint="CSharp_new_btMatrix3x3__SWIG_1")]
  public static extern IntPtr new_btMatrix3x3__SWIG_1(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btMatrix3x3__SWIG_2")]
  public static extern IntPtr new_btMatrix3x3__SWIG_2(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btMatrix3x3__SWIG_3")]
  public static extern IntPtr new_btMatrix3x3__SWIG_3(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btMatrix3x3_getColumn")]
  public static extern IntPtr btMatrix3x3_getColumn(HandleRef jarg1, int jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btMatrix3x3_getRow")]
  public static extern IntPtr btMatrix3x3_getRow(HandleRef jarg1, int jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btMatrix3x3_setFromOpenGLSubMatrix")]
  public static extern void btMatrix3x3_setFromOpenGLSubMatrix(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btMatrix3x3_setValue")]
  public static extern void btMatrix3x3_setValue(HandleRef jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, float jarg10);

  [DllImport("LinearMath", EntryPoint="CSharp_btMatrix3x3_setRotation")]
  public static extern void btMatrix3x3_setRotation(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btMatrix3x3_setEulerYPR")]
  public static extern void btMatrix3x3_setEulerYPR(HandleRef jarg1, float jarg2, float jarg3, float jarg4);

  [DllImport("LinearMath", EntryPoint="CSharp_btMatrix3x3_setEulerZYX")]
  public static extern void btMatrix3x3_setEulerZYX(HandleRef jarg1, float jarg2, float jarg3, float jarg4);

  [DllImport("LinearMath", EntryPoint="CSharp_btMatrix3x3_setIdentity")]
  public static extern void btMatrix3x3_setIdentity(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btMatrix3x3_getIdentity")]
  public static extern IntPtr btMatrix3x3_getIdentity();

  [DllImport("LinearMath", EntryPoint="CSharp_btMatrix3x3_getOpenGLSubMatrix")]
  public static extern void btMatrix3x3_getOpenGLSubMatrix(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btMatrix3x3_getRotation")]
  public static extern void btMatrix3x3_getRotation(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btMatrix3x3_getEulerYPR")]
  public static extern void btMatrix3x3_getEulerYPR(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4);

  [DllImport("LinearMath", EntryPoint="CSharp_btMatrix3x3_getEulerZYX__SWIG_0")]
  public static extern void btMatrix3x3_getEulerZYX__SWIG_0(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4, uint jarg5);

  [DllImport("LinearMath", EntryPoint="CSharp_btMatrix3x3_getEulerZYX__SWIG_1")]
  public static extern void btMatrix3x3_getEulerZYX__SWIG_1(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4);

  [DllImport("LinearMath", EntryPoint="CSharp_btMatrix3x3_scaled")]
  public static extern IntPtr btMatrix3x3_scaled(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btMatrix3x3_determinant")]
  public static extern float btMatrix3x3_determinant(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btMatrix3x3_adjoint")]
  public static extern IntPtr btMatrix3x3_adjoint(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btMatrix3x3_absolute")]
  public static extern IntPtr btMatrix3x3_absolute(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btMatrix3x3_transpose")]
  public static extern IntPtr btMatrix3x3_transpose(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btMatrix3x3_inverse")]
  public static extern IntPtr btMatrix3x3_inverse(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btMatrix3x3_transposeTimes")]
  public static extern IntPtr btMatrix3x3_transposeTimes(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btMatrix3x3_timesTranspose")]
  public static extern IntPtr btMatrix3x3_timesTranspose(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btMatrix3x3_tdotx")]
  public static extern float btMatrix3x3_tdotx(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btMatrix3x3_tdoty")]
  public static extern float btMatrix3x3_tdoty(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btMatrix3x3_tdotz")]
  public static extern float btMatrix3x3_tdotz(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btMatrix3x3_diagonalize")]
  public static extern void btMatrix3x3_diagonalize(HandleRef jarg1, HandleRef jarg2, float jarg3, int jarg4);

  [DllImport("LinearMath", EntryPoint="CSharp_btMatrix3x3_cofac")]
  public static extern float btMatrix3x3_cofac(HandleRef jarg1, int jarg2, int jarg3, int jarg4, int jarg5);

  [DllImport("LinearMath", EntryPoint="CSharp_btMatrix3x3_serialize")]
  public static extern void btMatrix3x3_serialize(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btMatrix3x3_serializeFloat")]
  public static extern void btMatrix3x3_serializeFloat(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btMatrix3x3_deSerialize")]
  public static extern void btMatrix3x3_deSerialize(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btMatrix3x3_deSerializeFloat")]
  public static extern void btMatrix3x3_deSerializeFloat(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btMatrix3x3_deSerializeDouble")]
  public static extern void btMatrix3x3_deSerializeDouble(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_delete_btMatrix3x3")]
  public static extern void delete_btMatrix3x3(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btMatrix3x3FloatData_m_el_set")]
  public static extern void btMatrix3x3FloatData_m_el_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btMatrix3x3FloatData_m_el_get")]
  public static extern IntPtr btMatrix3x3FloatData_m_el_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btMatrix3x3FloatData")]
  public static extern IntPtr new_btMatrix3x3FloatData();

  [DllImport("LinearMath", EntryPoint="CSharp_delete_btMatrix3x3FloatData")]
  public static extern void delete_btMatrix3x3FloatData(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btMatrix3x3DoubleData_m_el_set")]
  public static extern void btMatrix3x3DoubleData_m_el_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btMatrix3x3DoubleData_m_el_get")]
  public static extern IntPtr btMatrix3x3DoubleData_m_el_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btMatrix3x3DoubleData")]
  public static extern IntPtr new_btMatrix3x3DoubleData();

  [DllImport("LinearMath", EntryPoint="CSharp_delete_btMatrix3x3DoubleData")]
  public static extern void delete_btMatrix3x3DoubleData(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_delete_btMotionState")]
  public static extern void delete_btMotionState(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btMotionState_getWorldTransform")]
  public static extern void btMotionState_getWorldTransform(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btMotionState_setWorldTransform")]
  public static extern void btMotionState_setWorldTransform(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btPolarDecomposition_DEFAULT_TOLERANCE_get")]
  public static extern float btPolarDecomposition_DEFAULT_TOLERANCE_get();

  [DllImport("LinearMath", EntryPoint="CSharp_btPolarDecomposition_DEFAULT_MAX_ITERATIONS_get")]
  public static extern uint btPolarDecomposition_DEFAULT_MAX_ITERATIONS_get();

  [DllImport("LinearMath", EntryPoint="CSharp_new_btPolarDecomposition__SWIG_0")]
  public static extern IntPtr new_btPolarDecomposition__SWIG_0(float jarg1, uint jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btPolarDecomposition__SWIG_1")]
  public static extern IntPtr new_btPolarDecomposition__SWIG_1(float jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btPolarDecomposition__SWIG_2")]
  public static extern IntPtr new_btPolarDecomposition__SWIG_2();

  [DllImport("LinearMath", EntryPoint="CSharp_btPolarDecomposition_decompose")]
  public static extern uint btPolarDecomposition_decompose(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4);

  [DllImport("LinearMath", EntryPoint="CSharp_btPolarDecomposition_maxIterations")]
  public static extern uint btPolarDecomposition_maxIterations(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_delete_btPolarDecomposition")]
  public static extern void delete_btPolarDecomposition(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_polarDecompose")]
  public static extern uint polarDecompose(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btPoolAllocator")]
  public static extern IntPtr new_btPoolAllocator(int jarg1, int jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_delete_btPoolAllocator")]
  public static extern void delete_btPoolAllocator(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btPoolAllocator_getFreeCount")]
  public static extern int btPoolAllocator_getFreeCount(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btPoolAllocator_getUsedCount")]
  public static extern int btPoolAllocator_getUsedCount(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btPoolAllocator_getMaxCount")]
  public static extern int btPoolAllocator_getMaxCount(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btPoolAllocator_allocate")]
  public static extern IntPtr btPoolAllocator_allocate(HandleRef jarg1, int jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btPoolAllocator_validPtr")]
  public static extern bool btPoolAllocator_validPtr(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btPoolAllocator_freeMemory")]
  public static extern void btPoolAllocator_freeMemory(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btPoolAllocator_getElementSize")]
  public static extern int btPoolAllocator_getElementSize(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btPoolAllocator_getPoolAddress__SWIG_0")]
  public static extern IntPtr btPoolAllocator_getPoolAddress__SWIG_0(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btQuadWord_getX")]
  public static extern float btQuadWord_getX(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btQuadWord_getY")]
  public static extern float btQuadWord_getY(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btQuadWord_getZ")]
  public static extern float btQuadWord_getZ(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btQuadWord_setX")]
  public static extern void btQuadWord_setX(HandleRef jarg1, float jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btQuadWord_setY")]
  public static extern void btQuadWord_setY(HandleRef jarg1, float jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btQuadWord_setZ")]
  public static extern void btQuadWord_setZ(HandleRef jarg1, float jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btQuadWord_setW")]
  public static extern void btQuadWord_setW(HandleRef jarg1, float jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btQuadWord_x")]
  public static extern float btQuadWord_x(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btQuadWord_y")]
  public static extern float btQuadWord_y(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btQuadWord_z")]
  public static extern float btQuadWord_z(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btQuadWord_w")]
  public static extern float btQuadWord_w(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btQuadWord_setValue__SWIG_0")]
  public static extern void btQuadWord_setValue__SWIG_0(HandleRef jarg1, float jarg2, float jarg3, float jarg4);

  [DllImport("LinearMath", EntryPoint="CSharp_btQuadWord_setValue__SWIG_1")]
  public static extern void btQuadWord_setValue__SWIG_1(HandleRef jarg1, float jarg2, float jarg3, float jarg4, float jarg5);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btQuadWord__SWIG_0")]
  public static extern IntPtr new_btQuadWord__SWIG_0();

  [DllImport("LinearMath", EntryPoint="CSharp_new_btQuadWord__SWIG_1")]
  public static extern IntPtr new_btQuadWord__SWIG_1(float jarg1, float jarg2, float jarg3);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btQuadWord__SWIG_2")]
  public static extern IntPtr new_btQuadWord__SWIG_2(float jarg1, float jarg2, float jarg3, float jarg4);

  [DllImport("LinearMath", EntryPoint="CSharp_btQuadWord_setMax")]
  public static extern void btQuadWord_setMax(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btQuadWord_setMin")]
  public static extern void btQuadWord_setMin(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_delete_btQuadWord")]
  public static extern void delete_btQuadWord(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btQuaternion__SWIG_0")]
  public static extern IntPtr new_btQuaternion__SWIG_0();

  [DllImport("LinearMath", EntryPoint="CSharp_new_btQuaternion__SWIG_1")]
  public static extern IntPtr new_btQuaternion__SWIG_1(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btQuaternion__SWIG_2")]
  public static extern IntPtr new_btQuaternion__SWIG_2(float jarg1, float jarg2, float jarg3, float jarg4);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btQuaternion__SWIG_3")]
  public static extern IntPtr new_btQuaternion__SWIG_3(HandleRef jarg1, float jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btQuaternion__SWIG_4")]
  public static extern IntPtr new_btQuaternion__SWIG_4(float jarg1, float jarg2, float jarg3);

  [DllImport("LinearMath", EntryPoint="CSharp_btQuaternion_setRotation")]
  public static extern void btQuaternion_setRotation(HandleRef jarg1, HandleRef jarg2, float jarg3);

  [DllImport("LinearMath", EntryPoint="CSharp_btQuaternion_setEuler")]
  public static extern void btQuaternion_setEuler(HandleRef jarg1, float jarg2, float jarg3, float jarg4);

  [DllImport("LinearMath", EntryPoint="CSharp_btQuaternion_setEulerZYX")]
  public static extern void btQuaternion_setEulerZYX(HandleRef jarg1, float jarg2, float jarg3, float jarg4);

  [DllImport("LinearMath", EntryPoint="CSharp_btQuaternion_dot")]
  public static extern float btQuaternion_dot(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btQuaternion_length2")]
  public static extern float btQuaternion_length2(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btQuaternion_length")]
  public static extern float btQuaternion_length(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btQuaternion_normalize")]
  public static extern IntPtr btQuaternion_normalize(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btQuaternion_normalized")]
  public static extern IntPtr btQuaternion_normalized(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btQuaternion_angle")]
  public static extern float btQuaternion_angle(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btQuaternion_getAngle")]
  public static extern float btQuaternion_getAngle(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btQuaternion_getAxis")]
  public static extern IntPtr btQuaternion_getAxis(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btQuaternion_inverse")]
  public static extern IntPtr btQuaternion_inverse(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btQuaternion_farthest")]
  public static extern IntPtr btQuaternion_farthest(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btQuaternion_nearest")]
  public static extern IntPtr btQuaternion_nearest(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btQuaternion_slerp")]
  public static extern IntPtr btQuaternion_slerp(HandleRef jarg1, HandleRef jarg2, float jarg3);

  [DllImport("LinearMath", EntryPoint="CSharp_btQuaternion_getIdentity")]
  public static extern IntPtr btQuaternion_getIdentity();

  [DllImport("LinearMath", EntryPoint="CSharp_btQuaternion_getW")]
  public static extern float btQuaternion_getW(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_delete_btQuaternion")]
  public static extern void delete_btQuaternion(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_dot")]
  public static extern float dot(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_length")]
  public static extern float length(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btAngle__SWIG_0")]
  public static extern float btAngle__SWIG_0(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_inverse")]
  public static extern IntPtr inverse(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_slerp")]
  public static extern IntPtr slerp(HandleRef jarg1, HandleRef jarg2, float jarg3);

  [DllImport("LinearMath", EntryPoint="CSharp_quatRotate")]
  public static extern IntPtr quatRotate(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_shortestArcQuat")]
  public static extern IntPtr shortestArcQuat(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_shortestArcQuatNormalize2")]
  public static extern IntPtr shortestArcQuatNormalize2(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_USE_BT_CLOCK_get")]
  public static extern int USE_BT_CLOCK_get();

  [DllImport("LinearMath", EntryPoint="CSharp_new_btClock__SWIG_0")]
  public static extern IntPtr new_btClock__SWIG_0();

  [DllImport("LinearMath", EntryPoint="CSharp_new_btClock__SWIG_1")]
  public static extern IntPtr new_btClock__SWIG_1(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_delete_btClock")]
  public static extern void delete_btClock(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btClock_reset")]
  public static extern void btClock_reset(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btClock_getTimeMilliseconds")]
  public static extern uint btClock_getTimeMilliseconds(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btClock_getTimeMicroseconds")]
  public static extern uint btClock_getTimeMicroseconds(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_new_CProfileNode")]
  public static extern IntPtr new_CProfileNode(string jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_delete_CProfileNode")]
  public static extern void delete_CProfileNode(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_CProfileNode_Get_Sub_Node")]
  public static extern IntPtr CProfileNode_Get_Sub_Node(HandleRef jarg1, string jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_CProfileNode_Get_Parent")]
  public static extern IntPtr CProfileNode_Get_Parent(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_CProfileNode_Get_Sibling")]
  public static extern IntPtr CProfileNode_Get_Sibling(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_CProfileNode_Get_Child")]
  public static extern IntPtr CProfileNode_Get_Child(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_CProfileNode_CleanupMemory")]
  public static extern void CProfileNode_CleanupMemory(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_CProfileNode_Reset")]
  public static extern void CProfileNode_Reset(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_CProfileNode_Call")]
  public static extern void CProfileNode_Call(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_CProfileNode_Return")]
  public static extern bool CProfileNode_Return(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_CProfileNode_Get_Name")]
  public static extern string CProfileNode_Get_Name(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_CProfileNode_Get_Total_Calls")]
  public static extern int CProfileNode_Get_Total_Calls(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_CProfileNode_Get_Total_Time")]
  public static extern float CProfileNode_Get_Total_Time(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_CProfileNode_GetUserPointer")]
  public static extern IntPtr CProfileNode_GetUserPointer(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_CProfileNode_SetUserPointer")]
  public static extern void CProfileNode_SetUserPointer(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_CProfileIterator_First")]
  public static extern void CProfileIterator_First(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_CProfileIterator_Next")]
  public static extern void CProfileIterator_Next(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_CProfileIterator_Is_Done")]
  public static extern bool CProfileIterator_Is_Done(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_CProfileIterator_Is_Root")]
  public static extern bool CProfileIterator_Is_Root(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_CProfileIterator_Enter_Child")]
  public static extern void CProfileIterator_Enter_Child(HandleRef jarg1, int jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_CProfileIterator_Enter_Largest_Child")]
  public static extern void CProfileIterator_Enter_Largest_Child(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_CProfileIterator_Enter_Parent")]
  public static extern void CProfileIterator_Enter_Parent(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_CProfileIterator_Get_Current_Name")]
  public static extern string CProfileIterator_Get_Current_Name(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_CProfileIterator_Get_Current_Total_Calls")]
  public static extern int CProfileIterator_Get_Current_Total_Calls(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_CProfileIterator_Get_Current_Total_Time")]
  public static extern float CProfileIterator_Get_Current_Total_Time(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_CProfileIterator_Get_Current_UserPointer")]
  public static extern IntPtr CProfileIterator_Get_Current_UserPointer(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_CProfileIterator_Set_Current_UserPointer")]
  public static extern void CProfileIterator_Set_Current_UserPointer(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_CProfileIterator_Get_Current_Parent_Name")]
  public static extern string CProfileIterator_Get_Current_Parent_Name(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_CProfileIterator_Get_Current_Parent_Total_Calls")]
  public static extern int CProfileIterator_Get_Current_Parent_Total_Calls(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_CProfileIterator_Get_Current_Parent_Total_Time")]
  public static extern float CProfileIterator_Get_Current_Parent_Total_Time(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_delete_CProfileIterator")]
  public static extern void delete_CProfileIterator(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_CProfileManager_Start_Profile")]
  public static extern void CProfileManager_Start_Profile(string jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_CProfileManager_Stop_Profile")]
  public static extern void CProfileManager_Stop_Profile();

  [DllImport("LinearMath", EntryPoint="CSharp_CProfileManager_CleanupMemory")]
  public static extern void CProfileManager_CleanupMemory();

  [DllImport("LinearMath", EntryPoint="CSharp_CProfileManager_Reset")]
  public static extern void CProfileManager_Reset();

  [DllImport("LinearMath", EntryPoint="CSharp_CProfileManager_Increment_Frame_Counter")]
  public static extern void CProfileManager_Increment_Frame_Counter();

  [DllImport("LinearMath", EntryPoint="CSharp_CProfileManager_Get_Frame_Count_Since_Reset")]
  public static extern int CProfileManager_Get_Frame_Count_Since_Reset();

  [DllImport("LinearMath", EntryPoint="CSharp_CProfileManager_Get_Time_Since_Reset")]
  public static extern float CProfileManager_Get_Time_Since_Reset();

  [DllImport("LinearMath", EntryPoint="CSharp_CProfileManager_Get_Iterator")]
  public static extern IntPtr CProfileManager_Get_Iterator();

  [DllImport("LinearMath", EntryPoint="CSharp_CProfileManager_Release_Iterator")]
  public static extern void CProfileManager_Release_Iterator(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_CProfileManager_dumpRecursive")]
  public static extern void CProfileManager_dumpRecursive(HandleRef jarg1, int jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_CProfileManager_dumpAll")]
  public static extern void CProfileManager_dumpAll();

  [DllImport("LinearMath", EntryPoint="CSharp_new_CProfileManager")]
  public static extern IntPtr new_CProfileManager();

  [DllImport("LinearMath", EntryPoint="CSharp_delete_CProfileManager")]
  public static extern void delete_CProfileManager(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_new_CProfileSample")]
  public static extern IntPtr new_CProfileSample(string jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_delete_CProfileSample")]
  public static extern void delete_CProfileSample(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_GEN_srand")]
  public static extern void GEN_srand(uint jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_GEN_rand")]
  public static extern uint GEN_rand();

  [DllImport("LinearMath", EntryPoint="CSharp_sBulletDNAstr_set")]
  public static extern void sBulletDNAstr_set(string jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_sBulletDNAstr_get")]
  public static extern string sBulletDNAstr_get();

  [DllImport("LinearMath", EntryPoint="CSharp_sBulletDNAlen_set")]
  public static extern void sBulletDNAlen_set(int jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_sBulletDNAlen_get")]
  public static extern int sBulletDNAlen_get();

  [DllImport("LinearMath", EntryPoint="CSharp_sBulletDNAstr64_set")]
  public static extern void sBulletDNAstr64_set(string jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_sBulletDNAstr64_get")]
  public static extern string sBulletDNAstr64_get();

  [DllImport("LinearMath", EntryPoint="CSharp_sBulletDNAlen64_set")]
  public static extern void sBulletDNAlen64_set(int jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_sBulletDNAlen64_get")]
  public static extern int sBulletDNAlen64_get();

  [DllImport("LinearMath", EntryPoint="CSharp_btStrLen")]
  public static extern int btStrLen(string jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btChunk_m_chunkCode_set")]
  public static extern void btChunk_m_chunkCode_set(HandleRef jarg1, int jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btChunk_m_chunkCode_get")]
  public static extern int btChunk_m_chunkCode_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btChunk_m_length_set")]
  public static extern void btChunk_m_length_set(HandleRef jarg1, int jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btChunk_m_length_get")]
  public static extern int btChunk_m_length_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btChunk_m_oldPtr_set")]
  public static extern void btChunk_m_oldPtr_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btChunk_m_oldPtr_get")]
  public static extern IntPtr btChunk_m_oldPtr_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btChunk_m_dna_nr_set")]
  public static extern void btChunk_m_dna_nr_set(HandleRef jarg1, int jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btChunk_m_dna_nr_get")]
  public static extern int btChunk_m_dna_nr_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btChunk_m_number_set")]
  public static extern void btChunk_m_number_set(HandleRef jarg1, int jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btChunk_m_number_get")]
  public static extern int btChunk_m_number_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btChunk")]
  public static extern IntPtr new_btChunk();

  [DllImport("LinearMath", EntryPoint="CSharp_delete_btChunk")]
  public static extern void delete_btChunk(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_delete_btSerializer")]
  public static extern void delete_btSerializer(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btSerializer_getBufferPointer")]
  public static extern IntPtr btSerializer_getBufferPointer(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btSerializer_getCurrentBufferSize")]
  public static extern int btSerializer_getCurrentBufferSize(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btSerializer_allocate")]
  public static extern IntPtr btSerializer_allocate(HandleRef jarg1, uint jarg2, int jarg3);

  [DllImport("LinearMath", EntryPoint="CSharp_btSerializer_finalizeChunk")]
  public static extern void btSerializer_finalizeChunk(HandleRef jarg1, HandleRef jarg2, string jarg3, int jarg4, HandleRef jarg5);

  [DllImport("LinearMath", EntryPoint="CSharp_btSerializer_findPointer")]
  public static extern IntPtr btSerializer_findPointer(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btSerializer_getUniquePointer")]
  public static extern IntPtr btSerializer_getUniquePointer(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btSerializer_startSerialization")]
  public static extern void btSerializer_startSerialization(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btSerializer_finishSerialization")]
  public static extern void btSerializer_finishSerialization(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btSerializer_findNameForPointer")]
  public static extern string btSerializer_findNameForPointer(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btSerializer_registerNameForPointer")]
  public static extern void btSerializer_registerNameForPointer(HandleRef jarg1, HandleRef jarg2, string jarg3);

  [DllImport("LinearMath", EntryPoint="CSharp_btSerializer_serializeName")]
  public static extern void btSerializer_serializeName(HandleRef jarg1, string jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btSerializer_getSerializationFlags")]
  public static extern int btSerializer_getSerializationFlags(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btSerializer_setSerializationFlags")]
  public static extern void btSerializer_setSerializationFlags(HandleRef jarg1, int jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_BT_HEADER_LENGTH_get")]
  public static extern int BT_HEADER_LENGTH_get();

  [DllImport("LinearMath", EntryPoint="CSharp_new_btPointerUid")]
  public static extern IntPtr new_btPointerUid();

  [DllImport("LinearMath", EntryPoint="CSharp_delete_btPointerUid")]
  public static extern void delete_btPointerUid(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btDefaultSerializer__SWIG_0")]
  public static extern IntPtr new_btDefaultSerializer__SWIG_0(int jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btDefaultSerializer__SWIG_1")]
  public static extern IntPtr new_btDefaultSerializer__SWIG_1();

  [DllImport("LinearMath", EntryPoint="CSharp_delete_btDefaultSerializer")]
  public static extern void delete_btDefaultSerializer(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btDefaultSerializer_writeHeader")]
  public static extern void btDefaultSerializer_writeHeader(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btDefaultSerializer_startSerialization")]
  public static extern void btDefaultSerializer_startSerialization(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btDefaultSerializer_finishSerialization")]
  public static extern void btDefaultSerializer_finishSerialization(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btDefaultSerializer_getUniquePointer")]
  public static extern IntPtr btDefaultSerializer_getUniquePointer(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btDefaultSerializer_getBufferPointer")]
  public static extern IntPtr btDefaultSerializer_getBufferPointer(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btDefaultSerializer_getCurrentBufferSize")]
  public static extern int btDefaultSerializer_getCurrentBufferSize(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btDefaultSerializer_finalizeChunk")]
  public static extern void btDefaultSerializer_finalizeChunk(HandleRef jarg1, HandleRef jarg2, string jarg3, int jarg4, HandleRef jarg5);

  [DllImport("LinearMath", EntryPoint="CSharp_btDefaultSerializer_internalAlloc")]
  public static extern IntPtr btDefaultSerializer_internalAlloc(HandleRef jarg1, uint jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btDefaultSerializer_allocate")]
  public static extern IntPtr btDefaultSerializer_allocate(HandleRef jarg1, uint jarg2, int jarg3);

  [DllImport("LinearMath", EntryPoint="CSharp_btDefaultSerializer_findNameForPointer")]
  public static extern string btDefaultSerializer_findNameForPointer(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btDefaultSerializer_registerNameForPointer")]
  public static extern void btDefaultSerializer_registerNameForPointer(HandleRef jarg1, HandleRef jarg2, string jarg3);

  [DllImport("LinearMath", EntryPoint="CSharp_btDefaultSerializer_serializeName")]
  public static extern void btDefaultSerializer_serializeName(HandleRef jarg1, string jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btDefaultSerializer_getSerializationFlags")]
  public static extern int btDefaultSerializer_getSerializationFlags(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btDefaultSerializer_setSerializationFlags")]
  public static extern void btDefaultSerializer_setSerializationFlags(HandleRef jarg1, int jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btBlock_previous_set")]
  public static extern void btBlock_previous_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btBlock_previous_get")]
  public static extern IntPtr btBlock_previous_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btBlock_address_set")]
  public static extern void btBlock_address_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btBlock_address_get")]
  public static extern IntPtr btBlock_address_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btBlock")]
  public static extern IntPtr new_btBlock();

  [DllImport("LinearMath", EntryPoint="CSharp_delete_btBlock")]
  public static extern void delete_btBlock(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btStackAlloc")]
  public static extern IntPtr new_btStackAlloc(uint jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_delete_btStackAlloc")]
  public static extern void delete_btStackAlloc(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btStackAlloc_create")]
  public static extern void btStackAlloc_create(HandleRef jarg1, uint jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btStackAlloc_destroy")]
  public static extern void btStackAlloc_destroy(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btStackAlloc_getAvailableMemory")]
  public static extern int btStackAlloc_getAvailableMemory(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btStackAlloc_allocate")]
  public static extern IntPtr btStackAlloc_allocate(HandleRef jarg1, uint jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btStackAlloc_beginBlock")]
  public static extern IntPtr btStackAlloc_beginBlock(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btStackAlloc_endBlock")]
  public static extern void btStackAlloc_endBlock(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btTransform__SWIG_0")]
  public static extern IntPtr new_btTransform__SWIG_0();

  [DllImport("LinearMath", EntryPoint="CSharp_new_btTransform__SWIG_1")]
  public static extern IntPtr new_btTransform__SWIG_1(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btTransform__SWIG_2")]
  public static extern IntPtr new_btTransform__SWIG_2(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btTransform__SWIG_3")]
  public static extern IntPtr new_btTransform__SWIG_3(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btTransform__SWIG_4")]
  public static extern IntPtr new_btTransform__SWIG_4(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btTransform__SWIG_5")]
  public static extern IntPtr new_btTransform__SWIG_5(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btTransform_mult")]
  public static extern void btTransform_mult(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport("LinearMath", EntryPoint="CSharp_btTransform_getBasis__SWIG_0")]
  public static extern IntPtr btTransform_getBasis__SWIG_0(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btTransform_getOrigin__SWIG_0")]
  public static extern IntPtr btTransform_getOrigin__SWIG_0(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btTransform_getRotation")]
  public static extern IntPtr btTransform_getRotation(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btTransform_setFromOpenGLMatrix")]
  public static extern void btTransform_setFromOpenGLMatrix(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btTransform_getOpenGLMatrix")]
  public static extern void btTransform_getOpenGLMatrix(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btTransform_setOrigin")]
  public static extern void btTransform_setOrigin(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btTransform_invXform")]
  public static extern IntPtr btTransform_invXform(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btTransform_setBasis")]
  public static extern void btTransform_setBasis(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btTransform_setRotation")]
  public static extern void btTransform_setRotation(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btTransform_setIdentity")]
  public static extern void btTransform_setIdentity(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btTransform_inverse")]
  public static extern IntPtr btTransform_inverse(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btTransform_inverseTimes")]
  public static extern IntPtr btTransform_inverseTimes(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btTransform_getIdentity")]
  public static extern IntPtr btTransform_getIdentity();

  [DllImport("LinearMath", EntryPoint="CSharp_btTransform_serialize")]
  public static extern void btTransform_serialize(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btTransform_serializeFloat")]
  public static extern void btTransform_serializeFloat(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btTransform_deSerialize")]
  public static extern void btTransform_deSerialize(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btTransform_deSerializeDouble")]
  public static extern void btTransform_deSerializeDouble(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btTransform_deSerializeFloat")]
  public static extern void btTransform_deSerializeFloat(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_delete_btTransform")]
  public static extern void delete_btTransform(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btTransformFloatData_m_basis_set")]
  public static extern void btTransformFloatData_m_basis_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btTransformFloatData_m_basis_get")]
  public static extern IntPtr btTransformFloatData_m_basis_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btTransformFloatData_m_origin_set")]
  public static extern void btTransformFloatData_m_origin_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btTransformFloatData_m_origin_get")]
  public static extern IntPtr btTransformFloatData_m_origin_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btTransformFloatData")]
  public static extern IntPtr new_btTransformFloatData();

  [DllImport("LinearMath", EntryPoint="CSharp_delete_btTransformFloatData")]
  public static extern void delete_btTransformFloatData(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btTransformDoubleData_m_basis_set")]
  public static extern void btTransformDoubleData_m_basis_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btTransformDoubleData_m_basis_get")]
  public static extern IntPtr btTransformDoubleData_m_basis_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btTransformDoubleData_m_origin_set")]
  public static extern void btTransformDoubleData_m_origin_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btTransformDoubleData_m_origin_get")]
  public static extern IntPtr btTransformDoubleData_m_origin_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btTransformDoubleData")]
  public static extern IntPtr new_btTransformDoubleData();

  [DllImport("LinearMath", EntryPoint="CSharp_delete_btTransformDoubleData")]
  public static extern void delete_btTransformDoubleData(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btAabbSupport")]
  public static extern IntPtr btAabbSupport(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btTransformUtil_integrateTransform")]
  public static extern void btTransformUtil_integrateTransform(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, float jarg4, HandleRef jarg5);

  [DllImport("LinearMath", EntryPoint="CSharp_btTransformUtil_calculateVelocityQuaternion")]
  public static extern void btTransformUtil_calculateVelocityQuaternion(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4, float jarg5, HandleRef jarg6, HandleRef jarg7);

  [DllImport("LinearMath", EntryPoint="CSharp_btTransformUtil_calculateDiffAxisAngleQuaternion")]
  public static extern void btTransformUtil_calculateDiffAxisAngleQuaternion(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4);

  [DllImport("LinearMath", EntryPoint="CSharp_btTransformUtil_calculateVelocity")]
  public static extern void btTransformUtil_calculateVelocity(HandleRef jarg1, HandleRef jarg2, float jarg3, HandleRef jarg4, HandleRef jarg5);

  [DllImport("LinearMath", EntryPoint="CSharp_btTransformUtil_calculateDiffAxisAngle")]
  public static extern void btTransformUtil_calculateDiffAxisAngle(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btTransformUtil")]
  public static extern IntPtr new_btTransformUtil();

  [DllImport("LinearMath", EntryPoint="CSharp_delete_btTransformUtil")]
  public static extern void delete_btTransformUtil(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btConvexSeparatingDistanceUtil")]
  public static extern IntPtr new_btConvexSeparatingDistanceUtil(float jarg1, float jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btConvexSeparatingDistanceUtil_getConservativeSeparatingDistance")]
  public static extern float btConvexSeparatingDistanceUtil_getConservativeSeparatingDistance(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btConvexSeparatingDistanceUtil_updateSeparatingDistance")]
  public static extern void btConvexSeparatingDistanceUtil_updateSeparatingDistance(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport("LinearMath", EntryPoint="CSharp_btConvexSeparatingDistanceUtil_initSeparatingDistance")]
  public static extern void btConvexSeparatingDistanceUtil_initSeparatingDistance(HandleRef jarg1, HandleRef jarg2, float jarg3, HandleRef jarg4, HandleRef jarg5);

  [DllImport("LinearMath", EntryPoint="CSharp_delete_btConvexSeparatingDistanceUtil")]
  public static extern void delete_btConvexSeparatingDistanceUtil(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3DataName_get")]
  public static extern string btVector3DataName_get();

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_m_floats_set")]
  public static extern void btVector3_m_floats_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_m_floats_get")]
  public static extern IntPtr btVector3_m_floats_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btVector3__SWIG_0")]
  public static extern IntPtr new_btVector3__SWIG_0();

  [DllImport("LinearMath", EntryPoint="CSharp_new_btVector3__SWIG_1")]
  public static extern IntPtr new_btVector3__SWIG_1(float jarg1, float jarg2, float jarg3);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_dot")]
  public static extern float btVector3_dot(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_length2")]
  public static extern float btVector3_length2(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_length")]
  public static extern float btVector3_length(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_distance2")]
  public static extern float btVector3_distance2(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_distance")]
  public static extern float btVector3_distance(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_safeNormalize")]
  public static extern IntPtr btVector3_safeNormalize(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_normalize")]
  public static extern IntPtr btVector3_normalize(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_normalized")]
  public static extern IntPtr btVector3_normalized(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_rotate")]
  public static extern IntPtr btVector3_rotate(HandleRef jarg1, HandleRef jarg2, float jarg3);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_angle")]
  public static extern float btVector3_angle(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_absolute")]
  public static extern IntPtr btVector3_absolute(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_cross")]
  public static extern IntPtr btVector3_cross(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_triple")]
  public static extern float btVector3_triple(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_minAxis")]
  public static extern int btVector3_minAxis(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_maxAxis")]
  public static extern int btVector3_maxAxis(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_furthestAxis")]
  public static extern int btVector3_furthestAxis(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_closestAxis")]
  public static extern int btVector3_closestAxis(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_setInterpolate3")]
  public static extern void btVector3_setInterpolate3(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, float jarg4);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_lerp")]
  public static extern IntPtr btVector3_lerp(HandleRef jarg1, HandleRef jarg2, float jarg3);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_getX")]
  public static extern float btVector3_getX(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_getY")]
  public static extern float btVector3_getY(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_getZ")]
  public static extern float btVector3_getZ(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_setX")]
  public static extern void btVector3_setX(HandleRef jarg1, float jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_setY")]
  public static extern void btVector3_setY(HandleRef jarg1, float jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_setZ")]
  public static extern void btVector3_setZ(HandleRef jarg1, float jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_setW")]
  public static extern void btVector3_setW(HandleRef jarg1, float jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_x")]
  public static extern float btVector3_x(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_y")]
  public static extern float btVector3_y(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_z")]
  public static extern float btVector3_z(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_w")]
  public static extern float btVector3_w(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_setMax")]
  public static extern void btVector3_setMax(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_setMin")]
  public static extern void btVector3_setMin(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_setValue")]
  public static extern void btVector3_setValue(HandleRef jarg1, float jarg2, float jarg3, float jarg4);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_getSkewSymmetricMatrix")]
  public static extern void btVector3_getSkewSymmetricMatrix(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_setZero")]
  public static extern void btVector3_setZero(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_isZero")]
  public static extern bool btVector3_isZero(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_fuzzyZero")]
  public static extern bool btVector3_fuzzyZero(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_serialize")]
  public static extern void btVector3_serialize(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_deSerialize")]
  public static extern void btVector3_deSerialize(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_serializeFloat")]
  public static extern void btVector3_serializeFloat(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_deSerializeFloat")]
  public static extern void btVector3_deSerializeFloat(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_serializeDouble")]
  public static extern void btVector3_serializeDouble(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_deSerializeDouble")]
  public static extern void btVector3_deSerializeDouble(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_maxDot")]
  public static extern int btVector3_maxDot(HandleRef jarg1, HandleRef jarg2, int jarg3, HandleRef jarg4);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_minDot")]
  public static extern int btVector3_minDot(HandleRef jarg1, HandleRef jarg2, int jarg3, HandleRef jarg4);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3_dot3")]
  public static extern IntPtr btVector3_dot3(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4);

  [DllImport("LinearMath", EntryPoint="CSharp_delete_btVector3")]
  public static extern void delete_btVector3(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btDot")]
  public static extern float btDot(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btDistance2")]
  public static extern float btDistance2(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btDistance")]
  public static extern float btDistance(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btAngle__SWIG_1")]
  public static extern float btAngle__SWIG_1(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btCross")]
  public static extern IntPtr btCross(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btTriple")]
  public static extern float btTriple(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport("LinearMath", EntryPoint="CSharp_lerp")]
  public static extern IntPtr lerp(HandleRef jarg1, HandleRef jarg2, float jarg3);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btVector4__SWIG_0")]
  public static extern IntPtr new_btVector4__SWIG_0();

  [DllImport("LinearMath", EntryPoint="CSharp_new_btVector4__SWIG_1")]
  public static extern IntPtr new_btVector4__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector4_absolute4")]
  public static extern IntPtr btVector4_absolute4(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector4_getW")]
  public static extern float btVector4_getW(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector4_maxAxis4")]
  public static extern int btVector4_maxAxis4(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector4_minAxis4")]
  public static extern int btVector4_minAxis4(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector4_closestAxis4")]
  public static extern int btVector4_closestAxis4(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector4_setValue")]
  public static extern void btVector4_setValue(HandleRef jarg1, float jarg2, float jarg3, float jarg4, float jarg5);

  [DllImport("LinearMath", EntryPoint="CSharp_delete_btVector4")]
  public static extern void delete_btVector4(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btSwapScalarEndian")]
  public static extern void btSwapScalarEndian(float jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btSwapVector3Endian")]
  public static extern void btSwapVector3Endian(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btUnSwapVector3Endian")]
  public static extern void btUnSwapVector3Endian(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3FloatData_m_floats_set")]
  public static extern void btVector3FloatData_m_floats_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3FloatData_m_floats_get")]
  public static extern IntPtr btVector3FloatData_m_floats_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btVector3FloatData")]
  public static extern IntPtr new_btVector3FloatData();

  [DllImport("LinearMath", EntryPoint="CSharp_delete_btVector3FloatData")]
  public static extern void delete_btVector3FloatData(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3DoubleData_m_floats_set")]
  public static extern void btVector3DoubleData_m_floats_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector3DoubleData_m_floats_get")]
  public static extern IntPtr btVector3DoubleData_m_floats_get(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_new_btVector3DoubleData")]
  public static extern IntPtr new_btVector3DoubleData();

  [DllImport("LinearMath", EntryPoint="CSharp_delete_btVector3DoubleData")]
  public static extern void delete_btVector3DoubleData(HandleRef jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btQuaternion_SWIGUpcast")]
  public static extern IntPtr btQuaternion_SWIGUpcast(IntPtr jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btDefaultSerializer_SWIGUpcast")]
  public static extern IntPtr btDefaultSerializer_SWIGUpcast(IntPtr jarg1);

  [DllImport("LinearMath", EntryPoint="CSharp_btVector4_SWIGUpcast")]
  public static extern IntPtr btVector4_SWIGUpcast(IntPtr jarg1);
}

}

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BulletCSharp {

using System;
using System.Runtime.InteropServices;

public class btHingeConstraint : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;
  private SWIGTYPE_p_btTypedConstraint swigWrapPtr;

  internal btHingeConstraint(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
    swigWrapPtr = new SWIGTYPE_p_btTypedConstraint(cPtr, true);
  }

  internal static HandleRef getCPtr(btHingeConstraint obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~btHingeConstraint() {
    Dispose();
  }

  public SWIGTYPE_p_btTypedConstraint GetSwigPtr()
  {
      return swigWrapPtr;
  }


  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletDynamicsPINVOKE.delete_btHingeConstraint(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
        swigWrapPtr = new SWIGTYPE_p_btTypedConstraint(IntPtr.Zero, true);
      }
      GC.SuppressFinalize(this);
    }
  }

  public btHingeConstraint(btRigidBody rbA, btRigidBody rbB, SWIGTYPE_p_btVector3 pivotInA, SWIGTYPE_p_btVector3 pivotInB, SWIGTYPE_p_btVector3 axisInA, SWIGTYPE_p_btVector3 axisInB, bool useReferenceFrameA) : this(BulletDynamicsPINVOKE.new_btHingeConstraint__SWIG_0(btRigidBody.getCPtr(rbA), btRigidBody.getCPtr(rbB), SWIGTYPE_p_btVector3.getCPtr(pivotInA), SWIGTYPE_p_btVector3.getCPtr(pivotInB), SWIGTYPE_p_btVector3.getCPtr(axisInA), SWIGTYPE_p_btVector3.getCPtr(axisInB), useReferenceFrameA), true) {
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public btHingeConstraint(btRigidBody rbA, btRigidBody rbB, SWIGTYPE_p_btVector3 pivotInA, SWIGTYPE_p_btVector3 pivotInB, SWIGTYPE_p_btVector3 axisInA, SWIGTYPE_p_btVector3 axisInB) : this(BulletDynamicsPINVOKE.new_btHingeConstraint__SWIG_1(btRigidBody.getCPtr(rbA), btRigidBody.getCPtr(rbB), SWIGTYPE_p_btVector3.getCPtr(pivotInA), SWIGTYPE_p_btVector3.getCPtr(pivotInB), SWIGTYPE_p_btVector3.getCPtr(axisInA), SWIGTYPE_p_btVector3.getCPtr(axisInB)), true) {
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public btHingeConstraint(btRigidBody rbA, SWIGTYPE_p_btVector3 pivotInA, SWIGTYPE_p_btVector3 axisInA, bool useReferenceFrameA) : this(BulletDynamicsPINVOKE.new_btHingeConstraint__SWIG_2(btRigidBody.getCPtr(rbA), SWIGTYPE_p_btVector3.getCPtr(pivotInA), SWIGTYPE_p_btVector3.getCPtr(axisInA), useReferenceFrameA), true) {
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public btHingeConstraint(btRigidBody rbA, SWIGTYPE_p_btVector3 pivotInA, SWIGTYPE_p_btVector3 axisInA) : this(BulletDynamicsPINVOKE.new_btHingeConstraint__SWIG_3(btRigidBody.getCPtr(rbA), SWIGTYPE_p_btVector3.getCPtr(pivotInA), SWIGTYPE_p_btVector3.getCPtr(axisInA)), true) {
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public btHingeConstraint(btRigidBody rbA, btRigidBody rbB, SWIGTYPE_p_btTransform rbAFrame, SWIGTYPE_p_btTransform rbBFrame, bool useReferenceFrameA) : this(BulletDynamicsPINVOKE.new_btHingeConstraint__SWIG_4(btRigidBody.getCPtr(rbA), btRigidBody.getCPtr(rbB), SWIGTYPE_p_btTransform.getCPtr(rbAFrame), SWIGTYPE_p_btTransform.getCPtr(rbBFrame), useReferenceFrameA), true) {
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public btHingeConstraint(btRigidBody rbA, btRigidBody rbB, SWIGTYPE_p_btTransform rbAFrame, SWIGTYPE_p_btTransform rbBFrame) : this(BulletDynamicsPINVOKE.new_btHingeConstraint__SWIG_5(btRigidBody.getCPtr(rbA), btRigidBody.getCPtr(rbB), SWIGTYPE_p_btTransform.getCPtr(rbAFrame), SWIGTYPE_p_btTransform.getCPtr(rbBFrame)), true) {
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public btHingeConstraint(btRigidBody rbA, SWIGTYPE_p_btTransform rbAFrame, bool useReferenceFrameA) : this(BulletDynamicsPINVOKE.new_btHingeConstraint__SWIG_6(btRigidBody.getCPtr(rbA), SWIGTYPE_p_btTransform.getCPtr(rbAFrame), useReferenceFrameA), true) {
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public btHingeConstraint(btRigidBody rbA, SWIGTYPE_p_btTransform rbAFrame) : this(BulletDynamicsPINVOKE.new_btHingeConstraint__SWIG_7(btRigidBody.getCPtr(rbA), SWIGTYPE_p_btTransform.getCPtr(rbAFrame)), true) {
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void buildJacobian() {
    BulletDynamicsPINVOKE.btHingeConstraint_buildJacobian(swigCPtr);
  }

  public virtual void getInfo1(btConstraintInfo1 info) {
    BulletDynamicsPINVOKE.btHingeConstraint_getInfo1(swigCPtr, btConstraintInfo1.getCPtr(info));
  }

  public void getInfo1NonVirtual(btConstraintInfo1 info) {
    BulletDynamicsPINVOKE.btHingeConstraint_getInfo1NonVirtual(swigCPtr, btConstraintInfo1.getCPtr(info));
  }

  public virtual void getInfo2(btConstraintInfo2 info) {
    BulletDynamicsPINVOKE.btHingeConstraint_getInfo2(swigCPtr, btConstraintInfo2.getCPtr(info));
  }

  public void getInfo2NonVirtual(btConstraintInfo2 info, SWIGTYPE_p_btTransform transA, SWIGTYPE_p_btTransform transB, SWIGTYPE_p_btVector3 angVelA, SWIGTYPE_p_btVector3 angVelB) {
    BulletDynamicsPINVOKE.btHingeConstraint_getInfo2NonVirtual(swigCPtr, btConstraintInfo2.getCPtr(info), SWIGTYPE_p_btTransform.getCPtr(transA), SWIGTYPE_p_btTransform.getCPtr(transB), SWIGTYPE_p_btVector3.getCPtr(angVelA), SWIGTYPE_p_btVector3.getCPtr(angVelB));
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void getInfo2Internal(btConstraintInfo2 info, SWIGTYPE_p_btTransform transA, SWIGTYPE_p_btTransform transB, SWIGTYPE_p_btVector3 angVelA, SWIGTYPE_p_btVector3 angVelB) {
    BulletDynamicsPINVOKE.btHingeConstraint_getInfo2Internal(swigCPtr, btConstraintInfo2.getCPtr(info), SWIGTYPE_p_btTransform.getCPtr(transA), SWIGTYPE_p_btTransform.getCPtr(transB), SWIGTYPE_p_btVector3.getCPtr(angVelA), SWIGTYPE_p_btVector3.getCPtr(angVelB));
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void getInfo2InternalUsingFrameOffset(btConstraintInfo2 info, SWIGTYPE_p_btTransform transA, SWIGTYPE_p_btTransform transB, SWIGTYPE_p_btVector3 angVelA, SWIGTYPE_p_btVector3 angVelB) {
    BulletDynamicsPINVOKE.btHingeConstraint_getInfo2InternalUsingFrameOffset(swigCPtr, btConstraintInfo2.getCPtr(info), SWIGTYPE_p_btTransform.getCPtr(transA), SWIGTYPE_p_btTransform.getCPtr(transB), SWIGTYPE_p_btVector3.getCPtr(angVelA), SWIGTYPE_p_btVector3.getCPtr(angVelB));
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void updateRHS(float timeStep) {
    BulletDynamicsPINVOKE.btHingeConstraint_updateRHS(swigCPtr, timeStep);
  }

  public btRigidBody getRigidBodyA() {
    btRigidBody ret = new btRigidBody(BulletDynamicsPINVOKE.btHingeConstraint_getRigidBodyA__SWIG_0(swigCPtr), false);
    return ret;
  }

  public btRigidBody getRigidBodyB() {
    btRigidBody ret = new btRigidBody(BulletDynamicsPINVOKE.btHingeConstraint_getRigidBodyB__SWIG_0(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_btTransform getFrameOffsetA() {
    SWIGTYPE_p_btTransform ret = new SWIGTYPE_p_btTransform(BulletDynamicsPINVOKE.btHingeConstraint_getFrameOffsetA(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_btTransform getFrameOffsetB() {
    SWIGTYPE_p_btTransform ret = new SWIGTYPE_p_btTransform(BulletDynamicsPINVOKE.btHingeConstraint_getFrameOffsetB(swigCPtr), false);
    return ret;
  }

  public void setFrames(SWIGTYPE_p_btTransform frameA, SWIGTYPE_p_btTransform frameB) {
    BulletDynamicsPINVOKE.btHingeConstraint_setFrames(swigCPtr, SWIGTYPE_p_btTransform.getCPtr(frameA), SWIGTYPE_p_btTransform.getCPtr(frameB));
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAngularOnly(bool angularOnly) {
    BulletDynamicsPINVOKE.btHingeConstraint_setAngularOnly(swigCPtr, angularOnly);
  }

  public void enableAngularMotor(bool enableMotor, float targetVelocity, float maxMotorImpulse) {
    BulletDynamicsPINVOKE.btHingeConstraint_enableAngularMotor(swigCPtr, enableMotor, targetVelocity, maxMotorImpulse);
  }

  public void enableMotor(bool enableMotor) {
    BulletDynamicsPINVOKE.btHingeConstraint_enableMotor(swigCPtr, enableMotor);
  }

  public void setMaxMotorImpulse(float maxMotorImpulse) {
    BulletDynamicsPINVOKE.btHingeConstraint_setMaxMotorImpulse(swigCPtr, maxMotorImpulse);
  }

  public void setMotorTarget(SWIGTYPE_p_btQuaternion qAinB, float dt) {
    BulletDynamicsPINVOKE.btHingeConstraint_setMotorTarget__SWIG_0(swigCPtr, SWIGTYPE_p_btQuaternion.getCPtr(qAinB), dt);
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setMotorTarget(float targetAngle, float dt) {
    BulletDynamicsPINVOKE.btHingeConstraint_setMotorTarget__SWIG_1(swigCPtr, targetAngle, dt);
  }

  public void setLimit(float low, float high, float _softness, float _biasFactor, float _relaxationFactor) {
    BulletDynamicsPINVOKE.btHingeConstraint_setLimit__SWIG_0(swigCPtr, low, high, _softness, _biasFactor, _relaxationFactor);
  }

  public void setLimit(float low, float high, float _softness, float _biasFactor) {
    BulletDynamicsPINVOKE.btHingeConstraint_setLimit__SWIG_1(swigCPtr, low, high, _softness, _biasFactor);
  }

  public void setLimit(float low, float high, float _softness) {
    BulletDynamicsPINVOKE.btHingeConstraint_setLimit__SWIG_2(swigCPtr, low, high, _softness);
  }

  public void setLimit(float low, float high) {
    BulletDynamicsPINVOKE.btHingeConstraint_setLimit__SWIG_3(swigCPtr, low, high);
  }

  public void setAxis(SWIGTYPE_p_btVector3 axisInA) {
    BulletDynamicsPINVOKE.btHingeConstraint_setAxis(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(axisInA));
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public float getLowerLimit() {
    float ret = BulletDynamicsPINVOKE.btHingeConstraint_getLowerLimit(swigCPtr);
    return ret;
  }

  public float getUpperLimit() {
    float ret = BulletDynamicsPINVOKE.btHingeConstraint_getUpperLimit(swigCPtr);
    return ret;
  }

  public float getHingeAngle() {
    float ret = BulletDynamicsPINVOKE.btHingeConstraint_getHingeAngle__SWIG_0(swigCPtr);
    return ret;
  }

  public float getHingeAngle(SWIGTYPE_p_btTransform transA, SWIGTYPE_p_btTransform transB) {
    float ret = BulletDynamicsPINVOKE.btHingeConstraint_getHingeAngle__SWIG_1(swigCPtr, SWIGTYPE_p_btTransform.getCPtr(transA), SWIGTYPE_p_btTransform.getCPtr(transB));
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void testLimit(SWIGTYPE_p_btTransform transA, SWIGTYPE_p_btTransform transB) {
    BulletDynamicsPINVOKE.btHingeConstraint_testLimit(swigCPtr, SWIGTYPE_p_btTransform.getCPtr(transA), SWIGTYPE_p_btTransform.getCPtr(transB));
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_btTransform getAFrame() {
    SWIGTYPE_p_btTransform ret = new SWIGTYPE_p_btTransform(BulletDynamicsPINVOKE.btHingeConstraint_getAFrame__SWIG_0(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_btTransform getBFrame() {
    SWIGTYPE_p_btTransform ret = new SWIGTYPE_p_btTransform(BulletDynamicsPINVOKE.btHingeConstraint_getBFrame__SWIG_0(swigCPtr), false);
    return ret;
  }

  public int getSolveLimit() {
    int ret = BulletDynamicsPINVOKE.btHingeConstraint_getSolveLimit(swigCPtr);
    return ret;
  }

  public float getLimitSign() {
    float ret = BulletDynamicsPINVOKE.btHingeConstraint_getLimitSign(swigCPtr);
    return ret;
  }

  public bool getAngularOnly() {
    bool ret = BulletDynamicsPINVOKE.btHingeConstraint_getAngularOnly(swigCPtr);
    return ret;
  }

  public bool getEnableAngularMotor() {
    bool ret = BulletDynamicsPINVOKE.btHingeConstraint_getEnableAngularMotor(swigCPtr);
    return ret;
  }

  public float getMotorTargetVelosity() {
    float ret = BulletDynamicsPINVOKE.btHingeConstraint_getMotorTargetVelosity(swigCPtr);
    return ret;
  }

  public float getMaxMotorImpulse() {
    float ret = BulletDynamicsPINVOKE.btHingeConstraint_getMaxMotorImpulse(swigCPtr);
    return ret;
  }

  public bool getUseFrameOffset() {
    bool ret = BulletDynamicsPINVOKE.btHingeConstraint_getUseFrameOffset(swigCPtr);
    return ret;
  }

  public void setUseFrameOffset(bool frameOffsetOnOff) {
    BulletDynamicsPINVOKE.btHingeConstraint_setUseFrameOffset(swigCPtr, frameOffsetOnOff);
  }

  public virtual void setParam(int num, float value, int axis) {
    BulletDynamicsPINVOKE.btHingeConstraint_setParam__SWIG_0(swigCPtr, num, value, axis);
  }

  public virtual void setParam(int num, float value) {
    BulletDynamicsPINVOKE.btHingeConstraint_setParam__SWIG_1(swigCPtr, num, value);
  }

  public virtual float getParam(int num, int axis) {
    float ret = BulletDynamicsPINVOKE.btHingeConstraint_getParam__SWIG_0(swigCPtr, num, axis);
    return ret;
  }

  public virtual float getParam(int num) {
    float ret = BulletDynamicsPINVOKE.btHingeConstraint_getParam__SWIG_1(swigCPtr, num);
    return ret;
  }

  public virtual int calculateSerializeBufferSize() {
    int ret = BulletDynamicsPINVOKE.btHingeConstraint_calculateSerializeBufferSize(swigCPtr);
    return ret;
  }

  public virtual string serialize(SWIGTYPE_p_void dataBuffer, SWIGTYPE_p_btSerializer serializer) {
    string ret = BulletDynamicsPINVOKE.btHingeConstraint_serialize(swigCPtr, SWIGTYPE_p_void.getCPtr(dataBuffer), SWIGTYPE_p_btSerializer.getCPtr(serializer));
    return ret;
  }

}

}

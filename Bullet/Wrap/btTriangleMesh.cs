/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BulletCSharp {

using System;
using System.Runtime.InteropServices;

public class btTriangleMesh : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal btTriangleMesh(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(btTriangleMesh obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~btTriangleMesh() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletCollisionPINVOKE.delete_btTriangleMesh(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public float m_weldingThreshold {
    set {
      BulletCollisionPINVOKE.btTriangleMesh_m_weldingThreshold_set(swigCPtr, value);
    } 
    get {
      float ret = BulletCollisionPINVOKE.btTriangleMesh_m_weldingThreshold_get(swigCPtr);
      return ret;
    } 
  }

  public btTriangleMesh(bool use32bitIndices, bool use4componentVertices) : this(BulletCollisionPINVOKE.new_btTriangleMesh__SWIG_0(use32bitIndices, use4componentVertices), true) {
  }

  public btTriangleMesh(bool use32bitIndices) : this(BulletCollisionPINVOKE.new_btTriangleMesh__SWIG_1(use32bitIndices), true) {
  }

  public btTriangleMesh() : this(BulletCollisionPINVOKE.new_btTriangleMesh__SWIG_2(), true) {
  }

  public bool getUse32bitIndices() {
    bool ret = BulletCollisionPINVOKE.btTriangleMesh_getUse32bitIndices(swigCPtr);
    return ret;
  }

  public bool getUse4componentVertices() {
    bool ret = BulletCollisionPINVOKE.btTriangleMesh_getUse4componentVertices(swigCPtr);
    return ret;
  }

  public void addTriangle(SWIGTYPE_p_btVector3 vertex0, SWIGTYPE_p_btVector3 vertex1, SWIGTYPE_p_btVector3 vertex2, bool removeDuplicateVertices) {
    BulletCollisionPINVOKE.btTriangleMesh_addTriangle__SWIG_0(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(vertex0), SWIGTYPE_p_btVector3.getCPtr(vertex1), SWIGTYPE_p_btVector3.getCPtr(vertex2), removeDuplicateVertices);
    if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addTriangle(SWIGTYPE_p_btVector3 vertex0, SWIGTYPE_p_btVector3 vertex1, SWIGTYPE_p_btVector3 vertex2) {
    BulletCollisionPINVOKE.btTriangleMesh_addTriangle__SWIG_1(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(vertex0), SWIGTYPE_p_btVector3.getCPtr(vertex1), SWIGTYPE_p_btVector3.getCPtr(vertex2));
    if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
  }

  public int getNumTriangles() {
    int ret = BulletCollisionPINVOKE.btTriangleMesh_getNumTriangles(swigCPtr);
    return ret;
  }

  public virtual void preallocateVertices(int numverts) {
    BulletCollisionPINVOKE.btTriangleMesh_preallocateVertices(swigCPtr, numverts);
  }

  public virtual void preallocateIndices(int numindices) {
    BulletCollisionPINVOKE.btTriangleMesh_preallocateIndices(swigCPtr, numindices);
  }

  public int findOrAddVertex(SWIGTYPE_p_btVector3 vertex, bool removeDuplicateVertices) {
    int ret = BulletCollisionPINVOKE.btTriangleMesh_findOrAddVertex(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(vertex), removeDuplicateVertices);
    if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void addIndex(int index) {
    BulletCollisionPINVOKE.btTriangleMesh_addIndex(swigCPtr, index);
  }

}

}

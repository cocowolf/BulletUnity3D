/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BulletCSharp {

using System;
using System.Runtime.InteropServices;

public class LinearMath {
  public static int btGetVersion() {
    int ret = LinearMathPINVOKE.btGetVersion();
    return ret;
  }

  public static float btSqrt(float y) {
    float ret = LinearMathPINVOKE.btSqrt(y);
    return ret;
  }

  public static float btFabs(float x) {
    float ret = LinearMathPINVOKE.btFabs(x);
    return ret;
  }

  public static float btCos(float x) {
    float ret = LinearMathPINVOKE.btCos(x);
    return ret;
  }

  public static float btSin(float x) {
    float ret = LinearMathPINVOKE.btSin(x);
    return ret;
  }

  public static float btTan(float x) {
    float ret = LinearMathPINVOKE.btTan(x);
    return ret;
  }

  public static float btAcos(float x) {
    float ret = LinearMathPINVOKE.btAcos(x);
    return ret;
  }

  public static float btAsin(float x) {
    float ret = LinearMathPINVOKE.btAsin(x);
    return ret;
  }

  public static float btAtan(float x) {
    float ret = LinearMathPINVOKE.btAtan(x);
    return ret;
  }

  public static float btAtan2(float x, float y) {
    float ret = LinearMathPINVOKE.btAtan2(x, y);
    return ret;
  }

  public static float btExp(float x) {
    float ret = LinearMathPINVOKE.btExp(x);
    return ret;
  }

  public static float btLog(float x) {
    float ret = LinearMathPINVOKE.btLog(x);
    return ret;
  }

  public static float btPow(float x, float y) {
    float ret = LinearMathPINVOKE.btPow(x, y);
    return ret;
  }

  public static float btFmod(float x, float y) {
    float ret = LinearMathPINVOKE.btFmod(x, y);
    return ret;
  }

  public static float btAtan2Fast(float y, float x) {
    float ret = LinearMathPINVOKE.btAtan2Fast(y, x);
    return ret;
  }

  public static bool btFuzzyZero(float x) {
    bool ret = LinearMathPINVOKE.btFuzzyZero(x);
    return ret;
  }

  public static bool btEqual(float a, float eps) {
    bool ret = LinearMathPINVOKE.btEqual(a, eps);
    return ret;
  }

  public static bool btGreaterEqual(float a, float eps) {
    bool ret = LinearMathPINVOKE.btGreaterEqual(a, eps);
    return ret;
  }

  public static int btIsNegative(float x) {
    int ret = LinearMathPINVOKE.btIsNegative(x);
    return ret;
  }

  public static float btRadians(float x) {
    float ret = LinearMathPINVOKE.btRadians(x);
    return ret;
  }

  public static float btDegrees(float x) {
    float ret = LinearMathPINVOKE.btDegrees(x);
    return ret;
  }

  public static float btFsel(float a, float b, float c) {
    float ret = LinearMathPINVOKE.btFsel(a, b, c);
    return ret;
  }

  public static bool btMachineIsLittleEndian() {
    bool ret = LinearMathPINVOKE.btMachineIsLittleEndian();
    return ret;
  }

  public static uint btSelect(uint condition, uint valueIfConditionNonZero, uint valueIfConditionZero) {
    uint ret = LinearMathPINVOKE.btSelect__SWIG_0(condition, valueIfConditionNonZero, valueIfConditionZero);
    return ret;
  }

  public static int btSelect(uint condition, int valueIfConditionNonZero, int valueIfConditionZero) {
    int ret = LinearMathPINVOKE.btSelect__SWIG_1(condition, valueIfConditionNonZero, valueIfConditionZero);
    return ret;
  }

  public static float btSelect(uint condition, float valueIfConditionNonZero, float valueIfConditionZero) {
    float ret = LinearMathPINVOKE.btSelect__SWIG_2(condition, valueIfConditionNonZero, valueIfConditionZero);
    return ret;
  }

  public static uint btSwapEndian(uint val) {
    uint ret = LinearMathPINVOKE.btSwapEndian__SWIG_0(val);
    return ret;
  }

  public static ushort btSwapEndian(ushort val) {
    ushort ret = LinearMathPINVOKE.btSwapEndian__SWIG_1(val);
    return ret;
  }

  public static uint btSwapEndian(int val) {
    uint ret = LinearMathPINVOKE.btSwapEndian__SWIG_2(val);
    return ret;
  }

  public static ushort btSwapEndian(short val) {
    ushort ret = LinearMathPINVOKE.btSwapEndian__SWIG_3(val);
    return ret;
  }

  public static uint btSwapEndianFloat(float d) {
    uint ret = LinearMathPINVOKE.btSwapEndianFloat(d);
    return ret;
  }

  public static float btUnswapEndianFloat(uint a) {
    float ret = LinearMathPINVOKE.btUnswapEndianFloat(a);
    return ret;
  }

  public static void btSwapEndianDouble(double d, SWIGTYPE_p_unsigned_char dst) {
    LinearMathPINVOKE.btSwapEndianDouble(d, SWIGTYPE_p_unsigned_char.getCPtr(dst));
  }

  public static double btUnswapEndianDouble(SWIGTYPE_p_unsigned_char src) {
    double ret = LinearMathPINVOKE.btUnswapEndianDouble(SWIGTYPE_p_unsigned_char.getCPtr(src));
    return ret;
  }

  public static float btNormalizeAngle(float angleInRadians) {
    float ret = LinearMathPINVOKE.btNormalizeAngle(angleInRadians);
    return ret;
  }

  public static void AabbExpand(btVector3 aabbMin, btVector3 aabbMax, btVector3 expansionMin, btVector3 expansionMax) {
    LinearMathPINVOKE.AabbExpand(btVector3.getCPtr(aabbMin), btVector3.getCPtr(aabbMax), btVector3.getCPtr(expansionMin), btVector3.getCPtr(expansionMax));
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool TestPointAgainstAabb2(btVector3 aabbMin1, btVector3 aabbMax1, btVector3 point) {
    bool ret = LinearMathPINVOKE.TestPointAgainstAabb2(btVector3.getCPtr(aabbMin1), btVector3.getCPtr(aabbMax1), btVector3.getCPtr(point));
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool TestAabbAgainstAabb2(btVector3 aabbMin1, btVector3 aabbMax1, btVector3 aabbMin2, btVector3 aabbMax2) {
    bool ret = LinearMathPINVOKE.TestAabbAgainstAabb2(btVector3.getCPtr(aabbMin1), btVector3.getCPtr(aabbMax1), btVector3.getCPtr(aabbMin2), btVector3.getCPtr(aabbMax2));
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool TestTriangleAgainstAabb2(btVector3 vertices, btVector3 aabbMin, btVector3 aabbMax) {
    bool ret = LinearMathPINVOKE.TestTriangleAgainstAabb2(btVector3.getCPtr(vertices), btVector3.getCPtr(aabbMin), btVector3.getCPtr(aabbMax));
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int btOutcode(btVector3 p, btVector3 halfExtent) {
    int ret = LinearMathPINVOKE.btOutcode(btVector3.getCPtr(p), btVector3.getCPtr(halfExtent));
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool btRayAabb2(btVector3 rayFrom, btVector3 rayInvDirection, SWIGTYPE_p_unsigned_int raySign, btVector3 bounds, SWIGTYPE_p_float tmin, float lambda_min, float lambda_max) {
    bool ret = LinearMathPINVOKE.btRayAabb2(btVector3.getCPtr(rayFrom), btVector3.getCPtr(rayInvDirection), SWIGTYPE_p_unsigned_int.getCPtr(raySign), btVector3.getCPtr(bounds), SWIGTYPE_p_float.getCPtr(tmin), lambda_min, lambda_max);
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool btRayAabb(btVector3 rayFrom, btVector3 rayTo, btVector3 aabbMin, btVector3 aabbMax, SWIGTYPE_p_float param, btVector3 normal) {
    bool ret = LinearMathPINVOKE.btRayAabb(btVector3.getCPtr(rayFrom), btVector3.getCPtr(rayTo), btVector3.getCPtr(aabbMin), btVector3.getCPtr(aabbMax), SWIGTYPE_p_float.getCPtr(param), btVector3.getCPtr(normal));
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void btTransformAabb(btVector3 halfExtents, float margin, btTransform t, btVector3 aabbMinOut, btVector3 aabbMaxOut) {
    LinearMathPINVOKE.btTransformAabb__SWIG_0(btVector3.getCPtr(halfExtents), margin, btTransform.getCPtr(t), btVector3.getCPtr(aabbMinOut), btVector3.getCPtr(aabbMaxOut));
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void btTransformAabb(btVector3 localAabbMin, btVector3 localAabbMax, float margin, btTransform trans, btVector3 aabbMinOut, btVector3 aabbMaxOut) {
    LinearMathPINVOKE.btTransformAabb__SWIG_1(btVector3.getCPtr(localAabbMin), btVector3.getCPtr(localAabbMax), margin, btTransform.getCPtr(trans), btVector3.getCPtr(aabbMinOut), btVector3.getCPtr(aabbMaxOut));
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
  }

  public static uint testQuantizedAabbAgainstQuantizedAabb(SWIGTYPE_p_unsigned_short aabbMin1, SWIGTYPE_p_unsigned_short aabbMax1, SWIGTYPE_p_unsigned_short aabbMin2, SWIGTYPE_p_unsigned_short aabbMax2) {
    uint ret = LinearMathPINVOKE.testQuantizedAabbAgainstQuantizedAabb(SWIGTYPE_p_unsigned_short.getCPtr(aabbMin1), SWIGTYPE_p_unsigned_short.getCPtr(aabbMax1), SWIGTYPE_p_unsigned_short.getCPtr(aabbMin2), SWIGTYPE_p_unsigned_short.getCPtr(aabbMax2));
    return ret;
  }

  public static SWIGTYPE_p_void btAlignedAllocInternal(uint size, int alignment) {
    IntPtr cPtr = LinearMathPINVOKE.btAlignedAllocInternal(size, alignment);
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static void btAlignedFreeInternal(SWIGTYPE_p_void ptr) {
    LinearMathPINVOKE.btAlignedFreeInternal(SWIGTYPE_p_void.getCPtr(ptr));
  }

  public static void btAlignedAllocSetCustom(SWIGTYPE_p_f_size_t__p_void allocFunc, SWIGTYPE_p_f_p_void__void freeFunc) {
    LinearMathPINVOKE.btAlignedAllocSetCustom(SWIGTYPE_p_f_size_t__p_void.getCPtr(allocFunc), SWIGTYPE_p_f_p_void__void.getCPtr(freeFunc));
  }

  public static void btAlignedAllocSetCustomAligned(SWIGTYPE_p_f_size_t_int__p_void allocFunc, SWIGTYPE_p_f_p_void__void freeFunc) {
    LinearMathPINVOKE.btAlignedAllocSetCustomAligned(SWIGTYPE_p_f_size_t_int__p_void.getCPtr(allocFunc), SWIGTYPE_p_f_p_void__void.getCPtr(freeFunc));
  }

  public static void GrahamScanConvexHull2D(SWIGTYPE_p_btAlignedObjectArrayT_GrahamVector3_t originalPoints, SWIGTYPE_p_btAlignedObjectArrayT_GrahamVector3_t hull, btVector3 normalAxis) {
    LinearMathPINVOKE.GrahamScanConvexHull2D(SWIGTYPE_p_btAlignedObjectArrayT_GrahamVector3_t.getCPtr(originalPoints), SWIGTYPE_p_btAlignedObjectArrayT_GrahamVector3_t.getCPtr(hull), btVector3.getCPtr(normalAxis));
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int BT_HASH_NULL {
    get {
      int ret = LinearMathPINVOKE.BT_HASH_NULL_get();
      return ret;
    } 
  }

  public static uint polarDecompose(btMatrix3x3 a, btMatrix3x3 u, btMatrix3x3 h) {
    uint ret = LinearMathPINVOKE.polarDecompose(btMatrix3x3.getCPtr(a), btMatrix3x3.getCPtr(u), btMatrix3x3.getCPtr(h));
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float dot(btQuaternion q1, btQuaternion q2) {
    float ret = LinearMathPINVOKE.dot(btQuaternion.getCPtr(q1), btQuaternion.getCPtr(q2));
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float length(btQuaternion q) {
    float ret = LinearMathPINVOKE.length(btQuaternion.getCPtr(q));
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float btAngle(btQuaternion q1, btQuaternion q2) {
    float ret = LinearMathPINVOKE.btAngle__SWIG_0(btQuaternion.getCPtr(q1), btQuaternion.getCPtr(q2));
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static btQuaternion inverse(btQuaternion q) {
    btQuaternion ret = new btQuaternion(LinearMathPINVOKE.inverse(btQuaternion.getCPtr(q)), true);
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static btQuaternion slerp(btQuaternion q1, btQuaternion q2, float t) {
    btQuaternion ret = new btQuaternion(LinearMathPINVOKE.slerp(btQuaternion.getCPtr(q1), btQuaternion.getCPtr(q2), t), true);
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static btVector3 quatRotate(btQuaternion rotation, btVector3 v) {
    btVector3 ret = new btVector3(LinearMathPINVOKE.quatRotate(btQuaternion.getCPtr(rotation), btVector3.getCPtr(v)), true);
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static btQuaternion shortestArcQuat(btVector3 v0, btVector3 v1) {
    btQuaternion ret = new btQuaternion(LinearMathPINVOKE.shortestArcQuat(btVector3.getCPtr(v0), btVector3.getCPtr(v1)), true);
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static btQuaternion shortestArcQuatNormalize2(btVector3 v0, btVector3 v1) {
    btQuaternion ret = new btQuaternion(LinearMathPINVOKE.shortestArcQuatNormalize2(btVector3.getCPtr(v0), btVector3.getCPtr(v1)), true);
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void GEN_srand(uint seed) {
    LinearMathPINVOKE.GEN_srand(seed);
  }

  public static uint GEN_rand() {
    uint ret = LinearMathPINVOKE.GEN_rand();
    return ret;
  }

  public static string sBulletDNAstr {
    set {
      LinearMathPINVOKE.sBulletDNAstr_set(value);
    } 
    get {
      string ret = LinearMathPINVOKE.sBulletDNAstr_get();
      return ret;
    } 
  }

  public static int sBulletDNAlen {
    set {
      LinearMathPINVOKE.sBulletDNAlen_set(value);
    } 
    get {
      int ret = LinearMathPINVOKE.sBulletDNAlen_get();
      return ret;
    } 
  }

  public static string sBulletDNAstr64 {
    set {
      LinearMathPINVOKE.sBulletDNAstr64_set(value);
    } 
    get {
      string ret = LinearMathPINVOKE.sBulletDNAstr64_get();
      return ret;
    } 
  }

  public static int sBulletDNAlen64 {
    set {
      LinearMathPINVOKE.sBulletDNAlen64_set(value);
    } 
    get {
      int ret = LinearMathPINVOKE.sBulletDNAlen64_get();
      return ret;
    } 
  }

  public static int btStrLen(string str) {
    int ret = LinearMathPINVOKE.btStrLen(str);
    return ret;
  }

  public static btVector3 btAabbSupport(btVector3 halfExtents, btVector3 supportDir) {
    btVector3 ret = new btVector3(LinearMathPINVOKE.btAabbSupport(btVector3.getCPtr(halfExtents), btVector3.getCPtr(supportDir)), true);
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float btDot(btVector3 v1, btVector3 v2) {
    float ret = LinearMathPINVOKE.btDot(btVector3.getCPtr(v1), btVector3.getCPtr(v2));
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float btDistance2(btVector3 v1, btVector3 v2) {
    float ret = LinearMathPINVOKE.btDistance2(btVector3.getCPtr(v1), btVector3.getCPtr(v2));
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float btDistance(btVector3 v1, btVector3 v2) {
    float ret = LinearMathPINVOKE.btDistance(btVector3.getCPtr(v1), btVector3.getCPtr(v2));
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float btAngle(btVector3 v1, btVector3 v2) {
    float ret = LinearMathPINVOKE.btAngle__SWIG_1(btVector3.getCPtr(v1), btVector3.getCPtr(v2));
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static btVector3 btCross(btVector3 v1, btVector3 v2) {
    btVector3 ret = new btVector3(LinearMathPINVOKE.btCross(btVector3.getCPtr(v1), btVector3.getCPtr(v2)), true);
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float btTriple(btVector3 v1, btVector3 v2, btVector3 v3) {
    float ret = LinearMathPINVOKE.btTriple(btVector3.getCPtr(v1), btVector3.getCPtr(v2), btVector3.getCPtr(v3));
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static btVector3 lerp(btVector3 v1, btVector3 v2, float t) {
    btVector3 ret = new btVector3(LinearMathPINVOKE.lerp(btVector3.getCPtr(v1), btVector3.getCPtr(v2), t), true);
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void btSwapScalarEndian(float sourceVal, SWIGTYPE_p_float destVal) {
    LinearMathPINVOKE.btSwapScalarEndian(sourceVal, SWIGTYPE_p_float.getCPtr(destVal));
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void btSwapVector3Endian(btVector3 sourceVec, btVector3 destVec) {
    LinearMathPINVOKE.btSwapVector3Endian(btVector3.getCPtr(sourceVec), btVector3.getCPtr(destVec));
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void btUnSwapVector3Endian(btVector3 vector) {
    LinearMathPINVOKE.btUnSwapVector3Endian(btVector3.getCPtr(vector));
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
  }

  public static readonly int BT_BULLET_VERSION = LinearMathPINVOKE.BT_BULLET_VERSION_get();
  public static readonly double BT_LARGE_FLOAT = LinearMathPINVOKE.BT_LARGE_FLOAT_get();
  public static readonly int USE_BANCHLESS = LinearMathPINVOKE.USE_BANCHLESS_get();
  public static readonly int BT_USE_PLACEMENT_NEW = LinearMathPINVOKE.BT_USE_PLACEMENT_NEW_get();
  public static readonly int USE_BT_CLOCK = LinearMathPINVOKE.USE_BT_CLOCK_get();
  public static readonly int BT_HEADER_LENGTH = LinearMathPINVOKE.BT_HEADER_LENGTH_get();
  public static readonly string btVector3DataName = LinearMathPINVOKE.btVector3DataName_get();
}

}

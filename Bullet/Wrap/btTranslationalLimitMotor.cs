/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BulletCSharp {

using System;
using System.Runtime.InteropServices;

public class btTranslationalLimitMotor : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal btTranslationalLimitMotor(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(btTranslationalLimitMotor obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~btTranslationalLimitMotor() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletDynamicsPINVOKE.delete_btTranslationalLimitMotor(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public SWIGTYPE_p_btVector3 m_lowerLimit {
    set {
      BulletDynamicsPINVOKE.btTranslationalLimitMotor_m_lowerLimit_set(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(value));
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(BulletDynamicsPINVOKE.btTranslationalLimitMotor_m_lowerLimit_get(swigCPtr), true);
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_btVector3 m_upperLimit {
    set {
      BulletDynamicsPINVOKE.btTranslationalLimitMotor_m_upperLimit_set(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(value));
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(BulletDynamicsPINVOKE.btTranslationalLimitMotor_m_upperLimit_get(swigCPtr), true);
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_btVector3 m_accumulatedImpulse {
    set {
      BulletDynamicsPINVOKE.btTranslationalLimitMotor_m_accumulatedImpulse_set(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(value));
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(BulletDynamicsPINVOKE.btTranslationalLimitMotor_m_accumulatedImpulse_get(swigCPtr), true);
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float m_limitSoftness {
    set {
      BulletDynamicsPINVOKE.btTranslationalLimitMotor_m_limitSoftness_set(swigCPtr, value);
    } 
    get {
      float ret = BulletDynamicsPINVOKE.btTranslationalLimitMotor_m_limitSoftness_get(swigCPtr);
      return ret;
    } 
  }

  public float m_damping {
    set {
      BulletDynamicsPINVOKE.btTranslationalLimitMotor_m_damping_set(swigCPtr, value);
    } 
    get {
      float ret = BulletDynamicsPINVOKE.btTranslationalLimitMotor_m_damping_get(swigCPtr);
      return ret;
    } 
  }

  public float m_restitution {
    set {
      BulletDynamicsPINVOKE.btTranslationalLimitMotor_m_restitution_set(swigCPtr, value);
    } 
    get {
      float ret = BulletDynamicsPINVOKE.btTranslationalLimitMotor_m_restitution_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_btVector3 m_normalCFM {
    set {
      BulletDynamicsPINVOKE.btTranslationalLimitMotor_m_normalCFM_set(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(value));
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(BulletDynamicsPINVOKE.btTranslationalLimitMotor_m_normalCFM_get(swigCPtr), true);
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_btVector3 m_stopERP {
    set {
      BulletDynamicsPINVOKE.btTranslationalLimitMotor_m_stopERP_set(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(value));
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(BulletDynamicsPINVOKE.btTranslationalLimitMotor_m_stopERP_get(swigCPtr), true);
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_btVector3 m_stopCFM {
    set {
      BulletDynamicsPINVOKE.btTranslationalLimitMotor_m_stopCFM_set(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(value));
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(BulletDynamicsPINVOKE.btTranslationalLimitMotor_m_stopCFM_get(swigCPtr), true);
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_bool m_enableMotor {
    set {
      BulletDynamicsPINVOKE.btTranslationalLimitMotor_m_enableMotor_set(swigCPtr, SWIGTYPE_p_bool.getCPtr(value));
    } 
    get {
      IntPtr cPtr = BulletDynamicsPINVOKE.btTranslationalLimitMotor_m_enableMotor_get(swigCPtr);
      SWIGTYPE_p_bool ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_bool(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_btVector3 m_targetVelocity {
    set {
      BulletDynamicsPINVOKE.btTranslationalLimitMotor_m_targetVelocity_set(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(value));
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(BulletDynamicsPINVOKE.btTranslationalLimitMotor_m_targetVelocity_get(swigCPtr), true);
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_btVector3 m_maxMotorForce {
    set {
      BulletDynamicsPINVOKE.btTranslationalLimitMotor_m_maxMotorForce_set(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(value));
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(BulletDynamicsPINVOKE.btTranslationalLimitMotor_m_maxMotorForce_get(swigCPtr), true);
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_btVector3 m_currentLimitError {
    set {
      BulletDynamicsPINVOKE.btTranslationalLimitMotor_m_currentLimitError_set(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(value));
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(BulletDynamicsPINVOKE.btTranslationalLimitMotor_m_currentLimitError_get(swigCPtr), true);
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_btVector3 m_currentLinearDiff {
    set {
      BulletDynamicsPINVOKE.btTranslationalLimitMotor_m_currentLinearDiff_set(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(value));
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(BulletDynamicsPINVOKE.btTranslationalLimitMotor_m_currentLinearDiff_get(swigCPtr), true);
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_int m_currentLimit {
    set {
      BulletDynamicsPINVOKE.btTranslationalLimitMotor_m_currentLimit_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      IntPtr cPtr = BulletDynamicsPINVOKE.btTranslationalLimitMotor_m_currentLimit_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public btTranslationalLimitMotor() : this(BulletDynamicsPINVOKE.new_btTranslationalLimitMotor__SWIG_0(), true) {
  }

  public btTranslationalLimitMotor(btTranslationalLimitMotor other) : this(BulletDynamicsPINVOKE.new_btTranslationalLimitMotor__SWIG_1(btTranslationalLimitMotor.getCPtr(other)), true) {
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isLimited(int limitIndex) {
    bool ret = BulletDynamicsPINVOKE.btTranslationalLimitMotor_isLimited(swigCPtr, limitIndex);
    return ret;
  }

  public bool needApplyForce(int limitIndex) {
    bool ret = BulletDynamicsPINVOKE.btTranslationalLimitMotor_needApplyForce(swigCPtr, limitIndex);
    return ret;
  }

  public int testLimitValue(int limitIndex, float test_value) {
    int ret = BulletDynamicsPINVOKE.btTranslationalLimitMotor_testLimitValue(swigCPtr, limitIndex, test_value);
    return ret;
  }

  public float solveLinearAxis(float timeStep, float jacDiagABInv, btRigidBody body1, SWIGTYPE_p_btVector3 pointInA, btRigidBody body2, SWIGTYPE_p_btVector3 pointInB, int limit_index, SWIGTYPE_p_btVector3 axis_normal_on_a, SWIGTYPE_p_btVector3 anchorPos) {
    float ret = BulletDynamicsPINVOKE.btTranslationalLimitMotor_solveLinearAxis(swigCPtr, timeStep, jacDiagABInv, btRigidBody.getCPtr(body1), SWIGTYPE_p_btVector3.getCPtr(pointInA), btRigidBody.getCPtr(body2), SWIGTYPE_p_btVector3.getCPtr(pointInB), limit_index, SWIGTYPE_p_btVector3.getCPtr(axis_normal_on_a), SWIGTYPE_p_btVector3.getCPtr(anchorPos));
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}

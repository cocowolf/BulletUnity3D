/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BulletCSharp {

using System;
using System.Runtime.InteropServices;

public class btPoolAllocator : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal btPoolAllocator(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(btPoolAllocator obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~btPoolAllocator() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LinearMathPINVOKE.delete_btPoolAllocator(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public btPoolAllocator(int elemSize, int maxElements) : this(LinearMathPINVOKE.new_btPoolAllocator(elemSize, maxElements), true) {
  }

  public int getFreeCount() {
    int ret = LinearMathPINVOKE.btPoolAllocator_getFreeCount(swigCPtr);
    return ret;
  }

  public int getUsedCount() {
    int ret = LinearMathPINVOKE.btPoolAllocator_getUsedCount(swigCPtr);
    return ret;
  }

  public int getMaxCount() {
    int ret = LinearMathPINVOKE.btPoolAllocator_getMaxCount(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_void allocate(int size) {
    IntPtr cPtr = LinearMathPINVOKE.btPoolAllocator_allocate(swigCPtr, size);
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public bool validPtr(SWIGTYPE_p_void ptr) {
    bool ret = LinearMathPINVOKE.btPoolAllocator_validPtr(swigCPtr, SWIGTYPE_p_void.getCPtr(ptr));
    return ret;
  }

  public void freeMemory(SWIGTYPE_p_void ptr) {
    LinearMathPINVOKE.btPoolAllocator_freeMemory(swigCPtr, SWIGTYPE_p_void.getCPtr(ptr));
  }

  public int getElementSize() {
    int ret = LinearMathPINVOKE.btPoolAllocator_getElementSize(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_unsigned_char getPoolAddress() {
    IntPtr cPtr = LinearMathPINVOKE.btPoolAllocator_getPoolAddress__SWIG_0(swigCPtr);
    SWIGTYPE_p_unsigned_char ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
    return ret;
  }

}

}

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BulletCSharp {

using System;
using System.Runtime.InteropServices;

public class btCollisionDispatcher : IDisposable {
  private HandleRef swigCPtr;
  private SWIGTYPE_p_btDispatcher swigWrapPtr;
  protected bool swigCMemOwn;

  internal btCollisionDispatcher(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
    swigWrapPtr = new SWIGTYPE_p_btDispatcher(cPtr, true);
  }

  internal static HandleRef getCPtr(btCollisionDispatcher obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~btCollisionDispatcher() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletCollisionPINVOKE.delete_btCollisionDispatcher(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
        swigWrapPtr = new SWIGTYPE_p_btDispatcher(IntPtr.Zero, true);
      }
      GC.SuppressFinalize(this);
    }
  }

  public int getDispatcherFlags() {
    int ret = BulletCollisionPINVOKE.btCollisionDispatcher_getDispatcherFlags(swigCPtr);
    return ret;
  }

  public void setDispatcherFlags(int flags) {
    BulletCollisionPINVOKE.btCollisionDispatcher_setDispatcherFlags(swigCPtr, flags);
  }

  public void registerCollisionCreateFunc(int proxyType0, int proxyType1, SWIGTYPE_p_btCollisionAlgorithmCreateFunc createFunc) {
    BulletCollisionPINVOKE.btCollisionDispatcher_registerCollisionCreateFunc(swigCPtr, proxyType0, proxyType1, SWIGTYPE_p_btCollisionAlgorithmCreateFunc.getCPtr(createFunc));
  }

  public int getNumManifolds() {
    int ret = BulletCollisionPINVOKE.btCollisionDispatcher_getNumManifolds(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_p_btPersistentManifold getInternalManifoldPointer() {
    IntPtr cPtr = BulletCollisionPINVOKE.btCollisionDispatcher_getInternalManifoldPointer(swigCPtr);
    SWIGTYPE_p_p_btPersistentManifold ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_p_btPersistentManifold(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_btPersistentManifold getManifoldByIndexInternal(int index) {
    IntPtr cPtr = BulletCollisionPINVOKE.btCollisionDispatcher_getManifoldByIndexInternal__SWIG_0(swigCPtr, index);
    SWIGTYPE_p_btPersistentManifold ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_btPersistentManifold(cPtr, false);
    return ret;
  }

  public btCollisionDispatcher(SWIGTYPE_p_btCollisionConfiguration collisionConfiguration) : this(BulletCollisionPINVOKE.new_btCollisionDispatcher(SWIGTYPE_p_btCollisionConfiguration.getCPtr(collisionConfiguration)), true) {
  }

  public virtual SWIGTYPE_p_btPersistentManifold getNewManifold(btCollisionObject b0, btCollisionObject b1) {
    IntPtr cPtr = BulletCollisionPINVOKE.btCollisionDispatcher_getNewManifold(swigCPtr, btCollisionObject.getCPtr(b0), btCollisionObject.getCPtr(b1));
    SWIGTYPE_p_btPersistentManifold ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_btPersistentManifold(cPtr, false);
    return ret;
  }

  public virtual void releaseManifold(SWIGTYPE_p_btPersistentManifold manifold) {
    BulletCollisionPINVOKE.btCollisionDispatcher_releaseManifold(swigCPtr, SWIGTYPE_p_btPersistentManifold.getCPtr(manifold));
  }

  public virtual void clearManifold(SWIGTYPE_p_btPersistentManifold manifold) {
    BulletCollisionPINVOKE.btCollisionDispatcher_clearManifold(swigCPtr, SWIGTYPE_p_btPersistentManifold.getCPtr(manifold));
  }

  public SWIGTYPE_p_btCollisionAlgorithm findAlgorithm(SWIGTYPE_p_btCollisionObjectWrapper body0Wrap, SWIGTYPE_p_btCollisionObjectWrapper body1Wrap, SWIGTYPE_p_btPersistentManifold sharedManifold) {
    IntPtr cPtr = BulletCollisionPINVOKE.btCollisionDispatcher_findAlgorithm__SWIG_0(swigCPtr, SWIGTYPE_p_btCollisionObjectWrapper.getCPtr(body0Wrap), SWIGTYPE_p_btCollisionObjectWrapper.getCPtr(body1Wrap), SWIGTYPE_p_btPersistentManifold.getCPtr(sharedManifold));
    SWIGTYPE_p_btCollisionAlgorithm ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_btCollisionAlgorithm(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_btCollisionAlgorithm findAlgorithm(SWIGTYPE_p_btCollisionObjectWrapper body0Wrap, SWIGTYPE_p_btCollisionObjectWrapper body1Wrap) {
    IntPtr cPtr = BulletCollisionPINVOKE.btCollisionDispatcher_findAlgorithm__SWIG_1(swigCPtr, SWIGTYPE_p_btCollisionObjectWrapper.getCPtr(body0Wrap), SWIGTYPE_p_btCollisionObjectWrapper.getCPtr(body1Wrap));
    SWIGTYPE_p_btCollisionAlgorithm ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_btCollisionAlgorithm(cPtr, false);
    return ret;
  }

  public virtual bool needsCollision(btCollisionObject body0, btCollisionObject body1) {
    bool ret = BulletCollisionPINVOKE.btCollisionDispatcher_needsCollision(swigCPtr, btCollisionObject.getCPtr(body0), btCollisionObject.getCPtr(body1));
    return ret;
  }

  public virtual bool needsResponse(btCollisionObject body0, btCollisionObject body1) {
    bool ret = BulletCollisionPINVOKE.btCollisionDispatcher_needsResponse(swigCPtr, btCollisionObject.getCPtr(body0), btCollisionObject.getCPtr(body1));
    return ret;
  }

  public virtual void dispatchAllCollisionPairs(SWIGTYPE_p_btOverlappingPairCache pairCache, SWIGTYPE_p_btDispatcherInfo dispatchInfo, SWIGTYPE_p_btDispatcher dispatcher) {
    BulletCollisionPINVOKE.btCollisionDispatcher_dispatchAllCollisionPairs(swigCPtr, SWIGTYPE_p_btOverlappingPairCache.getCPtr(pairCache), SWIGTYPE_p_btDispatcherInfo.getCPtr(dispatchInfo), SWIGTYPE_p_btDispatcher.getCPtr(dispatcher));
    if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setNearCallback(SWIGTYPE_p_f_r_btBroadphasePair_r_btCollisionDispatcher_r_q_const__btDispatcherInfo__void nearCallback) {
    BulletCollisionPINVOKE.btCollisionDispatcher_setNearCallback(swigCPtr, SWIGTYPE_p_f_r_btBroadphasePair_r_btCollisionDispatcher_r_q_const__btDispatcherInfo__void.getCPtr(nearCallback));
  }

  public SWIGTYPE_p_f_r_btBroadphasePair_r_btCollisionDispatcher_r_q_const__btDispatcherInfo__void getNearCallback() {
    IntPtr cPtr = BulletCollisionPINVOKE.btCollisionDispatcher_getNearCallback(swigCPtr);
    SWIGTYPE_p_f_r_btBroadphasePair_r_btCollisionDispatcher_r_q_const__btDispatcherInfo__void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_f_r_btBroadphasePair_r_btCollisionDispatcher_r_q_const__btDispatcherInfo__void(cPtr, false);
    return ret;
  }

  public static void defaultNearCallback(SWIGTYPE_p_btBroadphasePair collisionPair, btCollisionDispatcher dispatcher, SWIGTYPE_p_btDispatcherInfo dispatchInfo) {
    BulletCollisionPINVOKE.btCollisionDispatcher_defaultNearCallback(SWIGTYPE_p_btBroadphasePair.getCPtr(collisionPair), btCollisionDispatcher.getCPtr(dispatcher), SWIGTYPE_p_btDispatcherInfo.getCPtr(dispatchInfo));
    if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SWIGTYPE_p_void allocateCollisionAlgorithm(int size) {
    IntPtr cPtr = BulletCollisionPINVOKE.btCollisionDispatcher_allocateCollisionAlgorithm(swigCPtr, size);
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public virtual void freeCollisionAlgorithm(SWIGTYPE_p_void ptr) {
    BulletCollisionPINVOKE.btCollisionDispatcher_freeCollisionAlgorithm(swigCPtr, SWIGTYPE_p_void.getCPtr(ptr));
  }

  public SWIGTYPE_p_btCollisionConfiguration getCollisionConfiguration() {
    IntPtr cPtr = BulletCollisionPINVOKE.btCollisionDispatcher_getCollisionConfiguration__SWIG_0(swigCPtr);
    SWIGTYPE_p_btCollisionConfiguration ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_btCollisionConfiguration(cPtr, false);
    return ret;
  }

  public void setCollisionConfiguration(SWIGTYPE_p_btCollisionConfiguration config) {
    BulletCollisionPINVOKE.btCollisionDispatcher_setCollisionConfiguration(swigCPtr, SWIGTYPE_p_btCollisionConfiguration.getCPtr(config));
  }

  public virtual SWIGTYPE_p_btPoolAllocator getInternalManifoldPool() {
    IntPtr cPtr = BulletCollisionPINVOKE.btCollisionDispatcher_getInternalManifoldPool__SWIG_0(swigCPtr);
    SWIGTYPE_p_btPoolAllocator ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_btPoolAllocator(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_btDispatcher GetSwigPtr()
  {
      return swigWrapPtr;
  }

  public enum DispatcherFlags {
    CD_STATIC_STATIC_REPORTED = 1,
    CD_USE_RELATIVE_CONTACT_BREAKING_THRESHOLD = 2,
    CD_DISABLE_CONTACTPOOL_DYNAMIC_ALLOCATION = 4
  }

}

}

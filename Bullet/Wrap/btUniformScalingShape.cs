/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BulletCSharp {

using System;
using System.Runtime.InteropServices;

public class btUniformScalingShape : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal btUniformScalingShape(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(btUniformScalingShape obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~btUniformScalingShape() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletCollisionPINVOKE.delete_btUniformScalingShape(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public btUniformScalingShape(SWIGTYPE_p_btConvexShape convexChildShape, float uniformScalingFactor) : this(BulletCollisionPINVOKE.new_btUniformScalingShape(SWIGTYPE_p_btConvexShape.getCPtr(convexChildShape), uniformScalingFactor), true) {
  }

  public virtual SWIGTYPE_p_btVector3 localGetSupportingVertexWithoutMargin(SWIGTYPE_p_btVector3 vec) {
    SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(BulletCollisionPINVOKE.btUniformScalingShape_localGetSupportingVertexWithoutMargin(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(vec)), true);
    if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_btVector3 localGetSupportingVertex(SWIGTYPE_p_btVector3 vec) {
    SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(BulletCollisionPINVOKE.btUniformScalingShape_localGetSupportingVertex(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(vec)), true);
    if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void batchedUnitVectorGetSupportingVertexWithoutMargin(SWIGTYPE_p_btVector3 vectors, SWIGTYPE_p_btVector3 supportVerticesOut, int numVectors) {
    BulletCollisionPINVOKE.btUniformScalingShape_batchedUnitVectorGetSupportingVertexWithoutMargin(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(vectors), SWIGTYPE_p_btVector3.getCPtr(supportVerticesOut), numVectors);
  }

  public virtual void calculateLocalInertia(float mass, SWIGTYPE_p_btVector3 inertia) {
    BulletCollisionPINVOKE.btUniformScalingShape_calculateLocalInertia(swigCPtr, mass, SWIGTYPE_p_btVector3.getCPtr(inertia));
    if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
  }

  public float getUniformScalingFactor() {
    float ret = BulletCollisionPINVOKE.btUniformScalingShape_getUniformScalingFactor(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_btConvexShape getChildShape() {
    IntPtr cPtr = BulletCollisionPINVOKE.btUniformScalingShape_getChildShape__SWIG_0(swigCPtr);
    SWIGTYPE_p_btConvexShape ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_btConvexShape(cPtr, false);
    return ret;
  }

  public virtual string getName() {
    string ret = BulletCollisionPINVOKE.btUniformScalingShape_getName(swigCPtr);
    return ret;
  }

  public void getAabb(SWIGTYPE_p_btTransform t, SWIGTYPE_p_btVector3 aabbMin, SWIGTYPE_p_btVector3 aabbMax) {
    BulletCollisionPINVOKE.btUniformScalingShape_getAabb(swigCPtr, SWIGTYPE_p_btTransform.getCPtr(t), SWIGTYPE_p_btVector3.getCPtr(aabbMin), SWIGTYPE_p_btVector3.getCPtr(aabbMax));
    if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void getAabbSlow(SWIGTYPE_p_btTransform t, SWIGTYPE_p_btVector3 aabbMin, SWIGTYPE_p_btVector3 aabbMax) {
    BulletCollisionPINVOKE.btUniformScalingShape_getAabbSlow(swigCPtr, SWIGTYPE_p_btTransform.getCPtr(t), SWIGTYPE_p_btVector3.getCPtr(aabbMin), SWIGTYPE_p_btVector3.getCPtr(aabbMax));
    if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setLocalScaling(SWIGTYPE_p_btVector3 scaling) {
    BulletCollisionPINVOKE.btUniformScalingShape_setLocalScaling(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(scaling));
    if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SWIGTYPE_p_btVector3 getLocalScaling() {
    SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(BulletCollisionPINVOKE.btUniformScalingShape_getLocalScaling(swigCPtr), false);
    return ret;
  }

  public virtual void setMargin(float margin) {
    BulletCollisionPINVOKE.btUniformScalingShape_setMargin(swigCPtr, margin);
  }

  public virtual float getMargin() {
    float ret = BulletCollisionPINVOKE.btUniformScalingShape_getMargin(swigCPtr);
    return ret;
  }

  public virtual int getNumPreferredPenetrationDirections() {
    int ret = BulletCollisionPINVOKE.btUniformScalingShape_getNumPreferredPenetrationDirections(swigCPtr);
    return ret;
  }

  public virtual void getPreferredPenetrationDirection(int index, SWIGTYPE_p_btVector3 penetrationVector) {
    BulletCollisionPINVOKE.btUniformScalingShape_getPreferredPenetrationDirection(swigCPtr, index, SWIGTYPE_p_btVector3.getCPtr(penetrationVector));
    if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
  }

}

}

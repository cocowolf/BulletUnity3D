/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BulletCSharp {

using System;
using System.Runtime.InteropServices;

public class btVoronoiSimplexSolver : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal btVoronoiSimplexSolver(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(btVoronoiSimplexSolver obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~btVoronoiSimplexSolver() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletCollisionPINVOKE.delete_btVoronoiSimplexSolver(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public int m_numVertices {
    set {
      BulletCollisionPINVOKE.btVoronoiSimplexSolver_m_numVertices_set(swigCPtr, value);
    } 
    get {
      int ret = BulletCollisionPINVOKE.btVoronoiSimplexSolver_m_numVertices_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_btVector3 m_simplexVectorW {
    set {
      BulletCollisionPINVOKE.btVoronoiSimplexSolver_m_simplexVectorW_set(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(value));
    } 
    get {
      IntPtr cPtr = BulletCollisionPINVOKE.btVoronoiSimplexSolver_m_simplexVectorW_get(swigCPtr);
      SWIGTYPE_p_btVector3 ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_btVector3(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_btVector3 m_simplexPointsP {
    set {
      BulletCollisionPINVOKE.btVoronoiSimplexSolver_m_simplexPointsP_set(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(value));
    } 
    get {
      IntPtr cPtr = BulletCollisionPINVOKE.btVoronoiSimplexSolver_m_simplexPointsP_get(swigCPtr);
      SWIGTYPE_p_btVector3 ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_btVector3(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_btVector3 m_simplexPointsQ {
    set {
      BulletCollisionPINVOKE.btVoronoiSimplexSolver_m_simplexPointsQ_set(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(value));
    } 
    get {
      IntPtr cPtr = BulletCollisionPINVOKE.btVoronoiSimplexSolver_m_simplexPointsQ_get(swigCPtr);
      SWIGTYPE_p_btVector3 ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_btVector3(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_btVector3 m_cachedP1 {
    set {
      BulletCollisionPINVOKE.btVoronoiSimplexSolver_m_cachedP1_set(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(value));
      if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(BulletCollisionPINVOKE.btVoronoiSimplexSolver_m_cachedP1_get(swigCPtr), true);
      if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_btVector3 m_cachedP2 {
    set {
      BulletCollisionPINVOKE.btVoronoiSimplexSolver_m_cachedP2_set(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(value));
      if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(BulletCollisionPINVOKE.btVoronoiSimplexSolver_m_cachedP2_get(swigCPtr), true);
      if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_btVector3 m_cachedV {
    set {
      BulletCollisionPINVOKE.btVoronoiSimplexSolver_m_cachedV_set(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(value));
      if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(BulletCollisionPINVOKE.btVoronoiSimplexSolver_m_cachedV_get(swigCPtr), true);
      if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_btVector3 m_lastW {
    set {
      BulletCollisionPINVOKE.btVoronoiSimplexSolver_m_lastW_set(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(value));
      if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(BulletCollisionPINVOKE.btVoronoiSimplexSolver_m_lastW_get(swigCPtr), true);
      if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float m_equalVertexThreshold {
    set {
      BulletCollisionPINVOKE.btVoronoiSimplexSolver_m_equalVertexThreshold_set(swigCPtr, value);
    } 
    get {
      float ret = BulletCollisionPINVOKE.btVoronoiSimplexSolver_m_equalVertexThreshold_get(swigCPtr);
      return ret;
    } 
  }

  public bool m_cachedValidClosest {
    set {
      BulletCollisionPINVOKE.btVoronoiSimplexSolver_m_cachedValidClosest_set(swigCPtr, value);
    } 
    get {
      bool ret = BulletCollisionPINVOKE.btVoronoiSimplexSolver_m_cachedValidClosest_get(swigCPtr);
      return ret;
    } 
  }

  public btSubSimplexClosestResult m_cachedBC {
    set {
      BulletCollisionPINVOKE.btVoronoiSimplexSolver_m_cachedBC_set(swigCPtr, btSubSimplexClosestResult.getCPtr(value));
    } 
    get {
      IntPtr cPtr = BulletCollisionPINVOKE.btVoronoiSimplexSolver_m_cachedBC_get(swigCPtr);
      btSubSimplexClosestResult ret = (cPtr == IntPtr.Zero) ? null : new btSubSimplexClosestResult(cPtr, false);
      return ret;
    } 
  }

  public bool m_needsUpdate {
    set {
      BulletCollisionPINVOKE.btVoronoiSimplexSolver_m_needsUpdate_set(swigCPtr, value);
    } 
    get {
      bool ret = BulletCollisionPINVOKE.btVoronoiSimplexSolver_m_needsUpdate_get(swigCPtr);
      return ret;
    } 
  }

  public void removeVertex(int index) {
    BulletCollisionPINVOKE.btVoronoiSimplexSolver_removeVertex(swigCPtr, index);
  }

  public void reduceVertices(btUsageBitfield usedVerts) {
    BulletCollisionPINVOKE.btVoronoiSimplexSolver_reduceVertices(swigCPtr, btUsageBitfield.getCPtr(usedVerts));
    if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool updateClosestVectorAndPoints() {
    bool ret = BulletCollisionPINVOKE.btVoronoiSimplexSolver_updateClosestVectorAndPoints(swigCPtr);
    return ret;
  }

  public bool closestPtPointTetrahedron(SWIGTYPE_p_btVector3 p, SWIGTYPE_p_btVector3 a, SWIGTYPE_p_btVector3 b, SWIGTYPE_p_btVector3 c, SWIGTYPE_p_btVector3 d, btSubSimplexClosestResult finalResult) {
    bool ret = BulletCollisionPINVOKE.btVoronoiSimplexSolver_closestPtPointTetrahedron(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(p), SWIGTYPE_p_btVector3.getCPtr(a), SWIGTYPE_p_btVector3.getCPtr(b), SWIGTYPE_p_btVector3.getCPtr(c), SWIGTYPE_p_btVector3.getCPtr(d), btSubSimplexClosestResult.getCPtr(finalResult));
    if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int pointOutsideOfPlane(SWIGTYPE_p_btVector3 p, SWIGTYPE_p_btVector3 a, SWIGTYPE_p_btVector3 b, SWIGTYPE_p_btVector3 c, SWIGTYPE_p_btVector3 d) {
    int ret = BulletCollisionPINVOKE.btVoronoiSimplexSolver_pointOutsideOfPlane(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(p), SWIGTYPE_p_btVector3.getCPtr(a), SWIGTYPE_p_btVector3.getCPtr(b), SWIGTYPE_p_btVector3.getCPtr(c), SWIGTYPE_p_btVector3.getCPtr(d));
    if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool closestPtPointTriangle(SWIGTYPE_p_btVector3 p, SWIGTYPE_p_btVector3 a, SWIGTYPE_p_btVector3 b, SWIGTYPE_p_btVector3 c, btSubSimplexClosestResult result) {
    bool ret = BulletCollisionPINVOKE.btVoronoiSimplexSolver_closestPtPointTriangle(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(p), SWIGTYPE_p_btVector3.getCPtr(a), SWIGTYPE_p_btVector3.getCPtr(b), SWIGTYPE_p_btVector3.getCPtr(c), btSubSimplexClosestResult.getCPtr(result));
    if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public btVoronoiSimplexSolver() : this(BulletCollisionPINVOKE.new_btVoronoiSimplexSolver(), true) {
  }

  public void reset() {
    BulletCollisionPINVOKE.btVoronoiSimplexSolver_reset(swigCPtr);
  }

  public void addVertex(SWIGTYPE_p_btVector3 w, SWIGTYPE_p_btVector3 p, SWIGTYPE_p_btVector3 q) {
    BulletCollisionPINVOKE.btVoronoiSimplexSolver_addVertex(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(w), SWIGTYPE_p_btVector3.getCPtr(p), SWIGTYPE_p_btVector3.getCPtr(q));
    if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setEqualVertexThreshold(float threshold) {
    BulletCollisionPINVOKE.btVoronoiSimplexSolver_setEqualVertexThreshold(swigCPtr, threshold);
  }

  public float getEqualVertexThreshold() {
    float ret = BulletCollisionPINVOKE.btVoronoiSimplexSolver_getEqualVertexThreshold(swigCPtr);
    return ret;
  }

  public bool closest(SWIGTYPE_p_btVector3 v) {
    bool ret = BulletCollisionPINVOKE.btVoronoiSimplexSolver_closest(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(v));
    if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float maxVertex() {
    float ret = BulletCollisionPINVOKE.btVoronoiSimplexSolver_maxVertex(swigCPtr);
    return ret;
  }

  public bool fullSimplex() {
    bool ret = BulletCollisionPINVOKE.btVoronoiSimplexSolver_fullSimplex(swigCPtr);
    return ret;
  }

  public int getSimplex(SWIGTYPE_p_btVector3 pBuf, SWIGTYPE_p_btVector3 qBuf, SWIGTYPE_p_btVector3 yBuf) {
    int ret = BulletCollisionPINVOKE.btVoronoiSimplexSolver_getSimplex(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(pBuf), SWIGTYPE_p_btVector3.getCPtr(qBuf), SWIGTYPE_p_btVector3.getCPtr(yBuf));
    return ret;
  }

  public bool inSimplex(SWIGTYPE_p_btVector3 w) {
    bool ret = BulletCollisionPINVOKE.btVoronoiSimplexSolver_inSimplex(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(w));
    if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void backup_closest(SWIGTYPE_p_btVector3 v) {
    BulletCollisionPINVOKE.btVoronoiSimplexSolver_backup_closest(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(v));
    if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool emptySimplex() {
    bool ret = BulletCollisionPINVOKE.btVoronoiSimplexSolver_emptySimplex(swigCPtr);
    return ret;
  }

  public void compute_points(SWIGTYPE_p_btVector3 p1, SWIGTYPE_p_btVector3 p2) {
    BulletCollisionPINVOKE.btVoronoiSimplexSolver_compute_points(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(p1), SWIGTYPE_p_btVector3.getCPtr(p2));
    if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
  }

  public int numVertices() {
    int ret = BulletCollisionPINVOKE.btVoronoiSimplexSolver_numVertices(swigCPtr);
    return ret;
  }

}

}

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BulletCSharp {

using System;
using System.Runtime.InteropServices;

public class btSimpleDynamicsWorld : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal btSimpleDynamicsWorld(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(btSimpleDynamicsWorld obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~btSimpleDynamicsWorld() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletDynamicsPINVOKE.delete_btSimpleDynamicsWorld(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public btSimpleDynamicsWorld(SWIGTYPE_p_btDispatcher dispatcher, SWIGTYPE_p_btBroadphaseInterface pairCache, SWIGTYPE_p_btConstraintSolver constraintSolver, SWIGTYPE_p_btCollisionConfiguration collisionConfiguration) : this(BulletDynamicsPINVOKE.new_btSimpleDynamicsWorld(SWIGTYPE_p_btDispatcher.getCPtr(dispatcher), SWIGTYPE_p_btBroadphaseInterface.getCPtr(pairCache), SWIGTYPE_p_btConstraintSolver.getCPtr(constraintSolver), SWIGTYPE_p_btCollisionConfiguration.getCPtr(collisionConfiguration)), true) {
  }

  public virtual int stepSimulation(float timeStep, int maxSubSteps, float fixedTimeStep) {
    int ret = BulletDynamicsPINVOKE.btSimpleDynamicsWorld_stepSimulation__SWIG_0(swigCPtr, timeStep, maxSubSteps, fixedTimeStep);
    return ret;
  }

  public virtual int stepSimulation(float timeStep, int maxSubSteps) {
    int ret = BulletDynamicsPINVOKE.btSimpleDynamicsWorld_stepSimulation__SWIG_1(swigCPtr, timeStep, maxSubSteps);
    return ret;
  }

  public virtual int stepSimulation(float timeStep) {
    int ret = BulletDynamicsPINVOKE.btSimpleDynamicsWorld_stepSimulation__SWIG_2(swigCPtr, timeStep);
    return ret;
  }

  public virtual void setGravity(SWIGTYPE_p_btVector3 gravity) {
    BulletDynamicsPINVOKE.btSimpleDynamicsWorld_setGravity(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(gravity));
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SWIGTYPE_p_btVector3 getGravity() {
    SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(BulletDynamicsPINVOKE.btSimpleDynamicsWorld_getGravity(swigCPtr), true);
    return ret;
  }

  public virtual void addRigidBody(btRigidBody body) {
    BulletDynamicsPINVOKE.btSimpleDynamicsWorld_addRigidBody__SWIG_0(swigCPtr, btRigidBody.getCPtr(body));
  }

  public virtual void addRigidBody(btRigidBody body, short group, short mask) {
    BulletDynamicsPINVOKE.btSimpleDynamicsWorld_addRigidBody__SWIG_1(swigCPtr, btRigidBody.getCPtr(body), group, mask);
  }

  public virtual void removeRigidBody(btRigidBody body) {
    BulletDynamicsPINVOKE.btSimpleDynamicsWorld_removeRigidBody(swigCPtr, btRigidBody.getCPtr(body));
  }

  public virtual void debugDrawWorld() {
    BulletDynamicsPINVOKE.btSimpleDynamicsWorld_debugDrawWorld(swigCPtr);
  }

  public virtual void addAction(SWIGTYPE_p_btActionInterface action) {
    BulletDynamicsPINVOKE.btSimpleDynamicsWorld_addAction(swigCPtr, SWIGTYPE_p_btActionInterface.getCPtr(action));
  }

  public virtual void removeAction(SWIGTYPE_p_btActionInterface action) {
    BulletDynamicsPINVOKE.btSimpleDynamicsWorld_removeAction(swigCPtr, SWIGTYPE_p_btActionInterface.getCPtr(action));
  }

  public virtual void removeCollisionObject(SWIGTYPE_p_btCollisionObject collisionObject) {
    BulletDynamicsPINVOKE.btSimpleDynamicsWorld_removeCollisionObject(swigCPtr, SWIGTYPE_p_btCollisionObject.getCPtr(collisionObject));
  }

  public virtual void updateAabbs() {
    BulletDynamicsPINVOKE.btSimpleDynamicsWorld_updateAabbs(swigCPtr);
  }

  public virtual void synchronizeMotionStates() {
    BulletDynamicsPINVOKE.btSimpleDynamicsWorld_synchronizeMotionStates(swigCPtr);
  }

  public virtual void setConstraintSolver(SWIGTYPE_p_btConstraintSolver solver) {
    BulletDynamicsPINVOKE.btSimpleDynamicsWorld_setConstraintSolver(swigCPtr, SWIGTYPE_p_btConstraintSolver.getCPtr(solver));
  }

  public virtual SWIGTYPE_p_btConstraintSolver getConstraintSolver() {
    IntPtr cPtr = BulletDynamicsPINVOKE.btSimpleDynamicsWorld_getConstraintSolver(swigCPtr);
    SWIGTYPE_p_btConstraintSolver ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_btConstraintSolver(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_btDynamicsWorldType getWorldType() {
    SWIGTYPE_p_btDynamicsWorldType ret = new SWIGTYPE_p_btDynamicsWorldType(BulletDynamicsPINVOKE.btSimpleDynamicsWorld_getWorldType(swigCPtr), true);
    return ret;
  }

  public virtual void clearForces() {
    BulletDynamicsPINVOKE.btSimpleDynamicsWorld_clearForces(swigCPtr);
  }

}

}

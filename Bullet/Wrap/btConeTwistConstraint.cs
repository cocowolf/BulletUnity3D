/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BulletCSharp {

using System;
using System.Runtime.InteropServices;

public class btConeTwistConstraint : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;
  private SWIGTYPE_p_btTypedConstraint swigWrapPtr;

  internal btConeTwistConstraint(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
    swigWrapPtr = new SWIGTYPE_p_btTypedConstraint(cPtr, true);
  }

  internal static HandleRef getCPtr(btConeTwistConstraint obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~btConeTwistConstraint() {
    Dispose();
  }

  public SWIGTYPE_p_btTypedConstraint GetSwigPtr()
  {
      return swigWrapPtr;
  }


  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletDynamicsPINVOKE.delete_btConeTwistConstraint(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
        swigWrapPtr = new SWIGTYPE_p_btTypedConstraint(IntPtr.Zero, true);
      }
      GC.SuppressFinalize(this);
    }
  }

  public btConeTwistConstraint(btRigidBody rbA, btRigidBody rbB, SWIGTYPE_p_btTransform rbAFrame, SWIGTYPE_p_btTransform rbBFrame) : this(BulletDynamicsPINVOKE.new_btConeTwistConstraint__SWIG_0(btRigidBody.getCPtr(rbA), btRigidBody.getCPtr(rbB), SWIGTYPE_p_btTransform.getCPtr(rbAFrame), SWIGTYPE_p_btTransform.getCPtr(rbBFrame)), true) {
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public btConeTwistConstraint(btRigidBody rbA, SWIGTYPE_p_btTransform rbAFrame) : this(BulletDynamicsPINVOKE.new_btConeTwistConstraint__SWIG_1(btRigidBody.getCPtr(rbA), SWIGTYPE_p_btTransform.getCPtr(rbAFrame)), true) {
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void buildJacobian() {
    BulletDynamicsPINVOKE.btConeTwistConstraint_buildJacobian(swigCPtr);
  }

  public virtual void getInfo1(btConstraintInfo1 info) {
    BulletDynamicsPINVOKE.btConeTwistConstraint_getInfo1(swigCPtr, btConstraintInfo1.getCPtr(info));
  }

  public void getInfo1NonVirtual(btConstraintInfo1 info) {
    BulletDynamicsPINVOKE.btConeTwistConstraint_getInfo1NonVirtual(swigCPtr, btConstraintInfo1.getCPtr(info));
  }

  public virtual void getInfo2(btConstraintInfo2 info) {
    BulletDynamicsPINVOKE.btConeTwistConstraint_getInfo2(swigCPtr, btConstraintInfo2.getCPtr(info));
  }

  public void getInfo2NonVirtual(btConstraintInfo2 info, SWIGTYPE_p_btTransform transA, SWIGTYPE_p_btTransform transB, SWIGTYPE_p_btMatrix3x3 invInertiaWorldA, SWIGTYPE_p_btMatrix3x3 invInertiaWorldB) {
    BulletDynamicsPINVOKE.btConeTwistConstraint_getInfo2NonVirtual(swigCPtr, btConstraintInfo2.getCPtr(info), SWIGTYPE_p_btTransform.getCPtr(transA), SWIGTYPE_p_btTransform.getCPtr(transB), SWIGTYPE_p_btMatrix3x3.getCPtr(invInertiaWorldA), SWIGTYPE_p_btMatrix3x3.getCPtr(invInertiaWorldB));
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void solveConstraintObsolete(SWIGTYPE_p_btSolverBody bodyA, SWIGTYPE_p_btSolverBody bodyB, float timeStep) {
    BulletDynamicsPINVOKE.btConeTwistConstraint_solveConstraintObsolete(swigCPtr, SWIGTYPE_p_btSolverBody.getCPtr(bodyA), SWIGTYPE_p_btSolverBody.getCPtr(bodyB), timeStep);
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void updateRHS(float timeStep) {
    BulletDynamicsPINVOKE.btConeTwistConstraint_updateRHS(swigCPtr, timeStep);
  }

  public btRigidBody getRigidBodyA() {
    btRigidBody ret = new btRigidBody(BulletDynamicsPINVOKE.btConeTwistConstraint_getRigidBodyA(swigCPtr), false);
    return ret;
  }

  public btRigidBody getRigidBodyB() {
    btRigidBody ret = new btRigidBody(BulletDynamicsPINVOKE.btConeTwistConstraint_getRigidBodyB(swigCPtr), false);
    return ret;
  }

  public void setAngularOnly(bool angularOnly) {
    BulletDynamicsPINVOKE.btConeTwistConstraint_setAngularOnly(swigCPtr, angularOnly);
  }

  public void setLimit(int limitIndex, float limitValue) {
    BulletDynamicsPINVOKE.btConeTwistConstraint_setLimit__SWIG_0(swigCPtr, limitIndex, limitValue);
  }

  public void setLimit(float _swingSpan1, float _swingSpan2, float _twistSpan, float _softness, float _biasFactor, float _relaxationFactor) {
    BulletDynamicsPINVOKE.btConeTwistConstraint_setLimit__SWIG_1(swigCPtr, _swingSpan1, _swingSpan2, _twistSpan, _softness, _biasFactor, _relaxationFactor);
  }

  public void setLimit(float _swingSpan1, float _swingSpan2, float _twistSpan, float _softness, float _biasFactor) {
    BulletDynamicsPINVOKE.btConeTwistConstraint_setLimit__SWIG_2(swigCPtr, _swingSpan1, _swingSpan2, _twistSpan, _softness, _biasFactor);
  }

  public void setLimit(float _swingSpan1, float _swingSpan2, float _twistSpan, float _softness) {
    BulletDynamicsPINVOKE.btConeTwistConstraint_setLimit__SWIG_3(swigCPtr, _swingSpan1, _swingSpan2, _twistSpan, _softness);
  }

  public void setLimit(float _swingSpan1, float _swingSpan2, float _twistSpan) {
    BulletDynamicsPINVOKE.btConeTwistConstraint_setLimit__SWIG_4(swigCPtr, _swingSpan1, _swingSpan2, _twistSpan);
  }

  public SWIGTYPE_p_btTransform getAFrame() {
    SWIGTYPE_p_btTransform ret = new SWIGTYPE_p_btTransform(BulletDynamicsPINVOKE.btConeTwistConstraint_getAFrame(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_btTransform getBFrame() {
    SWIGTYPE_p_btTransform ret = new SWIGTYPE_p_btTransform(BulletDynamicsPINVOKE.btConeTwistConstraint_getBFrame(swigCPtr), false);
    return ret;
  }

  public int getSolveTwistLimit() {
    int ret = BulletDynamicsPINVOKE.btConeTwistConstraint_getSolveTwistLimit(swigCPtr);
    return ret;
  }

  public int getSolveSwingLimit() {
    int ret = BulletDynamicsPINVOKE.btConeTwistConstraint_getSolveSwingLimit(swigCPtr);
    return ret;
  }

  public float getTwistLimitSign() {
    float ret = BulletDynamicsPINVOKE.btConeTwistConstraint_getTwistLimitSign(swigCPtr);
    return ret;
  }

  public void calcAngleInfo() {
    BulletDynamicsPINVOKE.btConeTwistConstraint_calcAngleInfo(swigCPtr);
  }

  public void calcAngleInfo2(SWIGTYPE_p_btTransform transA, SWIGTYPE_p_btTransform transB, SWIGTYPE_p_btMatrix3x3 invInertiaWorldA, SWIGTYPE_p_btMatrix3x3 invInertiaWorldB) {
    BulletDynamicsPINVOKE.btConeTwistConstraint_calcAngleInfo2(swigCPtr, SWIGTYPE_p_btTransform.getCPtr(transA), SWIGTYPE_p_btTransform.getCPtr(transB), SWIGTYPE_p_btMatrix3x3.getCPtr(invInertiaWorldA), SWIGTYPE_p_btMatrix3x3.getCPtr(invInertiaWorldB));
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public float getSwingSpan1() {
    float ret = BulletDynamicsPINVOKE.btConeTwistConstraint_getSwingSpan1(swigCPtr);
    return ret;
  }

  public float getSwingSpan2() {
    float ret = BulletDynamicsPINVOKE.btConeTwistConstraint_getSwingSpan2(swigCPtr);
    return ret;
  }

  public float getTwistSpan() {
    float ret = BulletDynamicsPINVOKE.btConeTwistConstraint_getTwistSpan(swigCPtr);
    return ret;
  }

  public float getTwistAngle() {
    float ret = BulletDynamicsPINVOKE.btConeTwistConstraint_getTwistAngle(swigCPtr);
    return ret;
  }

  public bool isPastSwingLimit() {
    bool ret = BulletDynamicsPINVOKE.btConeTwistConstraint_isPastSwingLimit(swigCPtr);
    return ret;
  }

  public void setDamping(float damping) {
    BulletDynamicsPINVOKE.btConeTwistConstraint_setDamping(swigCPtr, damping);
  }

  public void enableMotor(bool b) {
    BulletDynamicsPINVOKE.btConeTwistConstraint_enableMotor(swigCPtr, b);
  }

  public void setMaxMotorImpulse(float maxMotorImpulse) {
    BulletDynamicsPINVOKE.btConeTwistConstraint_setMaxMotorImpulse(swigCPtr, maxMotorImpulse);
  }

  public void setMaxMotorImpulseNormalized(float maxMotorImpulse) {
    BulletDynamicsPINVOKE.btConeTwistConstraint_setMaxMotorImpulseNormalized(swigCPtr, maxMotorImpulse);
  }

  public float getFixThresh() {
    float ret = BulletDynamicsPINVOKE.btConeTwistConstraint_getFixThresh(swigCPtr);
    return ret;
  }

  public void setFixThresh(float fixThresh) {
    BulletDynamicsPINVOKE.btConeTwistConstraint_setFixThresh(swigCPtr, fixThresh);
  }

  public void setMotorTarget(SWIGTYPE_p_btQuaternion q) {
    BulletDynamicsPINVOKE.btConeTwistConstraint_setMotorTarget(swigCPtr, SWIGTYPE_p_btQuaternion.getCPtr(q));
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setMotorTargetInConstraintSpace(SWIGTYPE_p_btQuaternion q) {
    BulletDynamicsPINVOKE.btConeTwistConstraint_setMotorTargetInConstraintSpace(swigCPtr, SWIGTYPE_p_btQuaternion.getCPtr(q));
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_btVector3 GetPointForAngle(float fAngleInRadians, float fLength) {
    SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(BulletDynamicsPINVOKE.btConeTwistConstraint_GetPointForAngle(swigCPtr, fAngleInRadians, fLength), true);
    return ret;
  }

  public virtual void setParam(int num, float value, int axis) {
    BulletDynamicsPINVOKE.btConeTwistConstraint_setParam__SWIG_0(swigCPtr, num, value, axis);
  }

  public virtual void setParam(int num, float value) {
    BulletDynamicsPINVOKE.btConeTwistConstraint_setParam__SWIG_1(swigCPtr, num, value);
  }

  public virtual void setFrames(SWIGTYPE_p_btTransform frameA, SWIGTYPE_p_btTransform frameB) {
    BulletDynamicsPINVOKE.btConeTwistConstraint_setFrames(swigCPtr, SWIGTYPE_p_btTransform.getCPtr(frameA), SWIGTYPE_p_btTransform.getCPtr(frameB));
    if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_btTransform getFrameOffsetA() {
    SWIGTYPE_p_btTransform ret = new SWIGTYPE_p_btTransform(BulletDynamicsPINVOKE.btConeTwistConstraint_getFrameOffsetA(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_btTransform getFrameOffsetB() {
    SWIGTYPE_p_btTransform ret = new SWIGTYPE_p_btTransform(BulletDynamicsPINVOKE.btConeTwistConstraint_getFrameOffsetB(swigCPtr), false);
    return ret;
  }

  public virtual float getParam(int num, int axis) {
    float ret = BulletDynamicsPINVOKE.btConeTwistConstraint_getParam__SWIG_0(swigCPtr, num, axis);
    return ret;
  }

  public virtual float getParam(int num) {
    float ret = BulletDynamicsPINVOKE.btConeTwistConstraint_getParam__SWIG_1(swigCPtr, num);
    return ret;
  }

  public virtual int calculateSerializeBufferSize() {
    int ret = BulletDynamicsPINVOKE.btConeTwistConstraint_calculateSerializeBufferSize(swigCPtr);
    return ret;
  }

  public virtual string serialize(SWIGTYPE_p_void dataBuffer, SWIGTYPE_p_btSerializer serializer) {
    string ret = BulletDynamicsPINVOKE.btConeTwistConstraint_serialize(swigCPtr, SWIGTYPE_p_void.getCPtr(dataBuffer), SWIGTYPE_p_btSerializer.getCPtr(serializer));
    return ret;
  }

}

}

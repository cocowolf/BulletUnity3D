/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BulletCSharp {

using System;
using System.Runtime.InteropServices;

public class btBoxShape : IDisposable {
  private HandleRef swigCPtr;
  private SWIGTYPE_p_btCollisionShape swigWrapPtr;
  protected bool swigCMemOwn;

  public SWIGTYPE_p_btCollisionShape GetSwigPtr()
  {
      return swigWrapPtr;
  }


  internal btBoxShape(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
    swigWrapPtr = new SWIGTYPE_p_btCollisionShape(cPtr, true);
  }

  internal static HandleRef getCPtr(btBoxShape obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~btBoxShape() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletCollisionPINVOKE.delete_btBoxShape(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
        swigWrapPtr = new SWIGTYPE_p_btCollisionShape(IntPtr.Zero, true);
      }
      GC.SuppressFinalize(this);
    }
  }

  public SWIGTYPE_p_btVector3 getHalfExtentsWithMargin() {
    SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(BulletCollisionPINVOKE.btBoxShape_getHalfExtentsWithMargin(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_btVector3 getHalfExtentsWithoutMargin() {
    SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(BulletCollisionPINVOKE.btBoxShape_getHalfExtentsWithoutMargin(swigCPtr), false);
    return ret;
  }

  public virtual SWIGTYPE_p_btVector3 localGetSupportingVertex(SWIGTYPE_p_btVector3 vec) {
    SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(BulletCollisionPINVOKE.btBoxShape_localGetSupportingVertex(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(vec)), true);
    if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_btVector3 localGetSupportingVertexWithoutMargin(SWIGTYPE_p_btVector3 vec) {
    SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(BulletCollisionPINVOKE.btBoxShape_localGetSupportingVertexWithoutMargin(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(vec)), true);
    if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void batchedUnitVectorGetSupportingVertexWithoutMargin(SWIGTYPE_p_btVector3 vectors, SWIGTYPE_p_btVector3 supportVerticesOut, int numVectors) {
    BulletCollisionPINVOKE.btBoxShape_batchedUnitVectorGetSupportingVertexWithoutMargin(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(vectors), SWIGTYPE_p_btVector3.getCPtr(supportVerticesOut), numVectors);
  }

  public btBoxShape(SWIGTYPE_p_btVector3 boxHalfExtents) : this(BulletCollisionPINVOKE.new_btBoxShape(SWIGTYPE_p_btVector3.getCPtr(boxHalfExtents)), true) {
    if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setMargin(float collisionMargin) {
    BulletCollisionPINVOKE.btBoxShape_setMargin(swigCPtr, collisionMargin);
  }

  public virtual void setLocalScaling(SWIGTYPE_p_btVector3 scaling) {
    BulletCollisionPINVOKE.btBoxShape_setLocalScaling(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(scaling));
    if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void getAabb(SWIGTYPE_p_btTransform t, SWIGTYPE_p_btVector3 aabbMin, SWIGTYPE_p_btVector3 aabbMax) {
    BulletCollisionPINVOKE.btBoxShape_getAabb(swigCPtr, SWIGTYPE_p_btTransform.getCPtr(t), SWIGTYPE_p_btVector3.getCPtr(aabbMin), SWIGTYPE_p_btVector3.getCPtr(aabbMax));
    if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void calculateLocalInertia(float mass, SWIGTYPE_p_btVector3 inertia) {
    BulletCollisionPINVOKE.btBoxShape_calculateLocalInertia(swigCPtr, mass, SWIGTYPE_p_btVector3.getCPtr(inertia));
    if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void getPlane(SWIGTYPE_p_btVector3 planeNormal, SWIGTYPE_p_btVector3 planeSupport, int i) {
    BulletCollisionPINVOKE.btBoxShape_getPlane(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(planeNormal), SWIGTYPE_p_btVector3.getCPtr(planeSupport), i);
    if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual int getNumPlanes() {
    int ret = BulletCollisionPINVOKE.btBoxShape_getNumPlanes(swigCPtr);
    return ret;
  }

  public virtual int getNumVertices() {
    int ret = BulletCollisionPINVOKE.btBoxShape_getNumVertices(swigCPtr);
    return ret;
  }

  public virtual int getNumEdges() {
    int ret = BulletCollisionPINVOKE.btBoxShape_getNumEdges(swigCPtr);
    return ret;
  }

  public virtual void getVertex(int i, SWIGTYPE_p_btVector3 vtx) {
    BulletCollisionPINVOKE.btBoxShape_getVertex(swigCPtr, i, SWIGTYPE_p_btVector3.getCPtr(vtx));
    if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void getPlaneEquation(SWIGTYPE_p_btVector4 plane, int i) {
    BulletCollisionPINVOKE.btBoxShape_getPlaneEquation(swigCPtr, SWIGTYPE_p_btVector4.getCPtr(plane), i);
    if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void getEdge(int i, SWIGTYPE_p_btVector3 pa, SWIGTYPE_p_btVector3 pb) {
    BulletCollisionPINVOKE.btBoxShape_getEdge(swigCPtr, i, SWIGTYPE_p_btVector3.getCPtr(pa), SWIGTYPE_p_btVector3.getCPtr(pb));
    if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool isInside(SWIGTYPE_p_btVector3 pt, float tolerance) {
    bool ret = BulletCollisionPINVOKE.btBoxShape_isInside(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(pt), tolerance);
    if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string getName() {
    string ret = BulletCollisionPINVOKE.btBoxShape_getName(swigCPtr);
    return ret;
  }

  public virtual int getNumPreferredPenetrationDirections() {
    int ret = BulletCollisionPINVOKE.btBoxShape_getNumPreferredPenetrationDirections(swigCPtr);
    return ret;
  }

  public virtual void getPreferredPenetrationDirection(int index, SWIGTYPE_p_btVector3 penetrationVector) {
    BulletCollisionPINVOKE.btBoxShape_getPreferredPenetrationDirection(swigCPtr, index, SWIGTYPE_p_btVector3.getCPtr(penetrationVector));
    if (BulletCollisionPINVOKE.SWIGPendingException.Pending) throw BulletCollisionPINVOKE.SWIGPendingException.Retrieve();
  }

}

}

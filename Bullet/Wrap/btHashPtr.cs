/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BulletCSharp {

using System;
using System.Runtime.InteropServices;

public class btHashPtr : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal btHashPtr(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(btHashPtr obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~btHashPtr() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LinearMathPINVOKE.delete_btHashPtr(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public btHashPtr(SWIGTYPE_p_void ptr) : this(LinearMathPINVOKE.new_btHashPtr(SWIGTYPE_p_void.getCPtr(ptr)), true) {
  }

  public SWIGTYPE_p_void getPointer() {
    IntPtr cPtr = LinearMathPINVOKE.btHashPtr_getPointer(swigCPtr);
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public bool equals(btHashPtr other) {
    bool ret = LinearMathPINVOKE.btHashPtr_equals(swigCPtr, btHashPtr.getCPtr(other));
    if (LinearMathPINVOKE.SWIGPendingException.Pending) throw LinearMathPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getHash() {
    uint ret = LinearMathPINVOKE.btHashPtr_getHash(swigCPtr);
    return ret;
  }

}

}

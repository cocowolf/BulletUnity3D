/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BulletCSharp {

using System;
using System.Runtime.InteropServices;

public class RaycastInfo : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal RaycastInfo(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(RaycastInfo obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~RaycastInfo() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletDynamicsPINVOKE.delete_RaycastInfo(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public SWIGTYPE_p_btVector3 m_contactNormalWS {
    set {
      BulletDynamicsPINVOKE.RaycastInfo_m_contactNormalWS_set(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(value));
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(BulletDynamicsPINVOKE.RaycastInfo_m_contactNormalWS_get(swigCPtr), true);
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_btVector3 m_contactPointWS {
    set {
      BulletDynamicsPINVOKE.RaycastInfo_m_contactPointWS_set(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(value));
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(BulletDynamicsPINVOKE.RaycastInfo_m_contactPointWS_get(swigCPtr), true);
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float m_suspensionLength {
    set {
      BulletDynamicsPINVOKE.RaycastInfo_m_suspensionLength_set(swigCPtr, value);
    } 
    get {
      float ret = BulletDynamicsPINVOKE.RaycastInfo_m_suspensionLength_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_btVector3 m_hardPointWS {
    set {
      BulletDynamicsPINVOKE.RaycastInfo_m_hardPointWS_set(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(value));
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(BulletDynamicsPINVOKE.RaycastInfo_m_hardPointWS_get(swigCPtr), true);
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_btVector3 m_wheelDirectionWS {
    set {
      BulletDynamicsPINVOKE.RaycastInfo_m_wheelDirectionWS_set(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(value));
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(BulletDynamicsPINVOKE.RaycastInfo_m_wheelDirectionWS_get(swigCPtr), true);
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_btVector3 m_wheelAxleWS {
    set {
      BulletDynamicsPINVOKE.RaycastInfo_m_wheelAxleWS_set(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(value));
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(BulletDynamicsPINVOKE.RaycastInfo_m_wheelAxleWS_get(swigCPtr), true);
      if (BulletDynamicsPINVOKE.SWIGPendingException.Pending) throw BulletDynamicsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool m_isInContact {
    set {
      BulletDynamicsPINVOKE.RaycastInfo_m_isInContact_set(swigCPtr, value);
    } 
    get {
      bool ret = BulletDynamicsPINVOKE.RaycastInfo_m_isInContact_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_void m_groundObject {
    set {
      BulletDynamicsPINVOKE.RaycastInfo_m_groundObject_set(swigCPtr, SWIGTYPE_p_void.getCPtr(value));
    } 
    get {
      IntPtr cPtr = BulletDynamicsPINVOKE.RaycastInfo_m_groundObject_get(swigCPtr);
      SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
      return ret;
    } 
  }

  public RaycastInfo() : this(BulletDynamicsPINVOKE.new_RaycastInfo(), true) {
  }

}

}

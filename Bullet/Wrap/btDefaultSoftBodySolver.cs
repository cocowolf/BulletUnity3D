/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BulletCSharp {

using System;
using System.Runtime.InteropServices;

public class btDefaultSoftBodySolver : btSoftBodySolver {
  private HandleRef swigCPtr;

  internal btDefaultSoftBodySolver(IntPtr cPtr, bool cMemoryOwn) : base(BulletSoftBodyPINVOKE.btDefaultSoftBodySolver_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(btDefaultSoftBodySolver obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~btDefaultSoftBodySolver() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletSoftBodyPINVOKE.delete_btDefaultSoftBodySolver(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public btDefaultSoftBodySolver() : this(BulletSoftBodyPINVOKE.new_btDefaultSoftBodySolver(), true) {
  }

  public override btSoftBodySolver.SolverTypes getSolverType() {
    btSoftBodySolver.SolverTypes ret = (btSoftBodySolver.SolverTypes)BulletSoftBodyPINVOKE.btDefaultSoftBodySolver_getSolverType(swigCPtr);
    return ret;
  }

  public override bool checkInitialized() {
    bool ret = BulletSoftBodyPINVOKE.btDefaultSoftBodySolver_checkInitialized(swigCPtr);
    return ret;
  }

  public override void updateSoftBodies() {
    BulletSoftBodyPINVOKE.btDefaultSoftBodySolver_updateSoftBodies(swigCPtr);
  }

  public override void optimize(SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody_p_t softBodies, bool forceUpdate) {
    BulletSoftBodyPINVOKE.btDefaultSoftBodySolver_optimize__SWIG_0(swigCPtr, SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody_p_t.getCPtr(softBodies), forceUpdate);
    if (BulletSoftBodyPINVOKE.SWIGPendingException.Pending) throw BulletSoftBodyPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void optimize(SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody_p_t softBodies) {
    BulletSoftBodyPINVOKE.btDefaultSoftBodySolver_optimize__SWIG_1(swigCPtr, SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody_p_t.getCPtr(softBodies));
    if (BulletSoftBodyPINVOKE.SWIGPendingException.Pending) throw BulletSoftBodyPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void copyBackToSoftBodies(bool bMove) {
    BulletSoftBodyPINVOKE.btDefaultSoftBodySolver_copyBackToSoftBodies__SWIG_0(swigCPtr, bMove);
  }

  public override void copyBackToSoftBodies() {
    BulletSoftBodyPINVOKE.btDefaultSoftBodySolver_copyBackToSoftBodies__SWIG_1(swigCPtr);
  }

  public override void solveConstraints(float solverdt) {
    BulletSoftBodyPINVOKE.btDefaultSoftBodySolver_solveConstraints(swigCPtr, solverdt);
  }

  public override void predictMotion(float solverdt) {
    BulletSoftBodyPINVOKE.btDefaultSoftBodySolver_predictMotion(swigCPtr, solverdt);
  }

  public virtual void copySoftBodyToVertexBuffer(btSoftBody softBody, btVertexBufferDescriptor vertexBuffer) {
    BulletSoftBodyPINVOKE.btDefaultSoftBodySolver_copySoftBodyToVertexBuffer(swigCPtr, btSoftBody.getCPtr(softBody), btVertexBufferDescriptor.getCPtr(vertexBuffer));
  }

  public override void processCollision(btSoftBody arg0, SWIGTYPE_p_btCollisionObjectWrapper arg1) {
    BulletSoftBodyPINVOKE.btDefaultSoftBodySolver_processCollision__SWIG_0(swigCPtr, btSoftBody.getCPtr(arg0), SWIGTYPE_p_btCollisionObjectWrapper.getCPtr(arg1));
  }

  public override void processCollision(btSoftBody arg0, btSoftBody arg1) {
    BulletSoftBodyPINVOKE.btDefaultSoftBodySolver_processCollision__SWIG_1(swigCPtr, btSoftBody.getCPtr(arg0), btSoftBody.getCPtr(arg1));
  }

}

}
